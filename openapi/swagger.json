{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a user by ID",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/profile": {
      "patch": {
        "operationId": "UsersController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User profile data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user profile",
        "tags": [
          "users"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns JWT tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "Login with email and password",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseDto"
                }
              }
            }
          }
        },
        "summary": "Register a new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a new access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponseDto"
                }
              }
            }
          }
        },
        "summary": "Refresh an access token using a refresh token",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Logout the current user",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the current user profile",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/verify-email": {
      "get": {
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEmailResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid verification token"
          }
        },
        "summary": "Verify user email address",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordResponseDto"
                }
              }
            }
          }
        },
        "summary": "Request a password reset",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "summary": "Reset password using token",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/storage/presigned-url": {
      "post": {
        "operationId": "StorageController_createPresignedUrl",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePresignedUrlDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns a presigned URL for direct upload to S3",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrlResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a presigned URL for uploading a file to S3",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/confirm-upload": {
      "post": {
        "operationId": "StorageController_confirmUpload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmUploadDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File upload confirmed"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Confirm that a file was successfully uploaded to S3",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/download/{fileId}": {
      "get": {
        "operationId": "StorageController_getDownloadUrl",
        "parameters": [
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a presigned URL for downloading the file"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a presigned URL for downloading a file from S3",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/files": {
      "get": {
        "operationId": "StorageController_getUserFiles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a list of files for the user"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all files for the current user",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/{fileId}": {
      "delete": {
        "operationId": "StorageController_deleteFile",
        "parameters": [
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a file",
        "tags": [
          "storage"
        ]
      }
    }
  },
  "info": {
    "title": "Sunest API",
    "description": "Modern NestJS API with comprehensive features",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "users",
      "description": "User management endpoints"
    },
    {
      "name": "files",
      "description": "File management endpoints"
    },
    {
      "name": "websockets",
      "description": "WebSocket communication"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local Development"
    },
    {
      "url": "https://tree2u.kobotogether.com",
      "description": "Production"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "Authorization",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "FileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "File ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "key": {
            "type": "string",
            "description": "File storage key/path",
            "example": "user-files/document.pdf"
          },
          "filename": {
            "type": "string",
            "description": "Original filename",
            "example": "document.pdf"
          },
          "mimetype": {
            "type": "string",
            "description": "File MIME type",
            "example": "application/pdf"
          },
          "size": {
            "type": "number",
            "description": "File size in bytes",
            "example": 1048576
          },
          "bucket": {
            "type": "string",
            "description": "Storage bucket name",
            "example": "my-app-files"
          },
          "uploadedBy": {
            "type": "string",
            "description": "User ID who uploaded the file",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "userId": {
            "type": "string",
            "description": "User ID who owns the file",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "status": {
            "type": "string",
            "description": "File status",
            "enum": [
              "PENDING",
              "UPLOADED",
              "FAILED"
            ],
            "example": "UPLOADED"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "File creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "File last update date"
          }
        },
        "required": [
          "id",
          "key",
          "filename",
          "mimetype",
          "bucket",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "displayName": {
            "type": "object",
            "description": "User display name",
            "example": "John Doe"
          },
          "avatar": {
            "type": "object",
            "description": "URL to user avatar image",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether user account is active",
            "default": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether user email is verified",
            "default": false
          },
          "provider": {
            "type": "object",
            "description": "Authentication provider (local, google, github)",
            "example": "local"
          },
          "providerId": {
            "type": "object",
            "description": "ID from auth provider",
            "example": "123456789"
          },
          "roles": {
            "description": "User roles",
            "example": [
              "user"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "description": "Files owned by user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account last updated date"
          }
        },
        "required": [
          "id",
          "email",
          "isActive",
          "emailVerified",
          "roles",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "User display name",
            "example": "John Doe"
          },
          "avatar": {
            "type": "string",
            "description": "URL to avatar image",
            "example": "https://example.com/avatar.jpg"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "userId"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "description": "URL to avatar image"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RegisterResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "displayName": {
            "type": "object",
            "description": "User display name",
            "example": "John Doe"
          },
          "avatar": {
            "type": "object",
            "description": "URL to user avatar image",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether user account is active",
            "default": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether user email is verified",
            "default": false
          },
          "provider": {
            "type": "object",
            "description": "Authentication provider (local, google, github)",
            "example": "local"
          },
          "providerId": {
            "type": "object",
            "description": "ID from auth provider",
            "example": "123456789"
          },
          "roles": {
            "description": "User roles",
            "example": [
              "user"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "description": "Files owned by user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account last updated date"
          }
        },
        "required": [
          "id",
          "email",
          "isActive",
          "emailVerified",
          "roles",
          "createdAt",
          "updatedAt"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "refreshToken"
        ]
      },
      "RefreshTokenResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "SuccessResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "ProfileResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "displayName": {
            "type": "object",
            "description": "User display name",
            "example": "John Doe"
          },
          "avatar": {
            "type": "object",
            "description": "URL to user avatar image",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether user account is active",
            "default": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether user email is verified",
            "default": false
          },
          "provider": {
            "type": "object",
            "description": "Authentication provider (local, google, github)",
            "example": "local"
          },
          "providerId": {
            "type": "object",
            "description": "ID from auth provider",
            "example": "123456789"
          },
          "roles": {
            "description": "User roles",
            "example": [
              "user"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "description": "Files owned by user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account last updated date"
          }
        },
        "required": [
          "id",
          "email",
          "isActive",
          "emailVerified",
          "roles",
          "createdAt",
          "updatedAt"
        ]
      },
      "VerifyEmailResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ForgotPasswordResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "token",
          "password"
        ]
      },
      "ResetPasswordResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "CreatePresignedUrlDto": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          }
        },
        "required": [
          "filename",
          "mimetype"
        ]
      },
      "PresignedUrlResponseDto": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "presignedUrl": {
            "type": "string"
          },
          "expiresIn": {
            "type": "number"
          }
        },
        "required": [
          "fileId",
          "key",
          "presignedUrl",
          "expiresIn"
        ]
      },
      "ConfirmUploadDto": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string"
          }
        },
        "required": [
          "fileId"
        ]
      }
    }
  }
}