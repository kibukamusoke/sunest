{
  "openapi": "3.0.0",
  "paths": {
    "/api/api/health": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/users/roles": {
      "get": {
        "operationId": "UsersController_getAllRoles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns list of all available user roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all available user roles",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users": {
      "get": {
        "operationId": "UsersController_getAllUsers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for email or name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by user status (active/inactive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Filter by user role (admin/user)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "required": false,
            "in": "query",
            "description": "Filter by app ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "total": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    },
                    "limit": {
                      "type": "number"
                    },
                    "pages": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users with pagination and filtering",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a user by ID",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/{id}/roles": {
      "patch": {
        "operationId": "UsersController_updateUserRoles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of role names"
                  }
                },
                "required": [
                  "roles"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User roles updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user roles (Admin only)",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/profile": {
      "patch": {
        "operationId": "UsersController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User profile data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user profile",
        "tags": [
          "users"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns JWT tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "Login with email and password",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponseDto"
                }
              }
            }
          }
        },
        "summary": "Register a new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a new access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponseDto"
                }
              }
            }
          }
        },
        "summary": "Refresh an access token using a refresh token",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Logout the current user",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the current user profile",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/verify-email": {
      "get": {
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEmailResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid verification token"
          }
        },
        "summary": "Verify user email address",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordResponseDto"
                }
              }
            }
          }
        },
        "summary": "Request a password reset",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "summary": "Reset password using token",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/notifications": {
      "post": {
        "operationId": "EnhancedNotificationController_createNotification",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new notification",
        "tags": [
          "notifications"
        ]
      },
      "get": {
        "operationId": "EnhancedNotificationController_getNotifications",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "description": "Filter by channel",
            "schema": {
              "type": "string",
              "enum": [
                "EMAIL",
                "IN_APP",
                "SMS",
                "PUSH",
                "WEBHOOK"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string",
              "enum": [
                "SYSTEM",
                "ORDER",
                "INVENTORY",
                "MERCHANT",
                "USER",
                "SECURITY",
                "PROMOTION",
                "REMINDER",
                "ALERT"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "SENT",
                "DELIVERED",
                "READ",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "recipientId",
            "required": false,
            "in": "query",
            "description": "Filter by recipient ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Filter by group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "Filter from date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "Filter to date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get notifications list",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/{id}": {
      "put": {
        "operationId": "EnhancedNotificationController_updateNotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a notification",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/bulk": {
      "post": {
        "operationId": "EnhancedNotificationController_createBulkNotifications",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create bulk notifications",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/{id}/send": {
      "post": {
        "operationId": "EnhancedNotificationController_sendNotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a notification manually",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/templates": {
      "post": {
        "operationId": "EnhancedNotificationController_createTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a notification template",
        "tags": [
          "notifications"
        ]
      },
      "get": {
        "operationId": "EnhancedNotificationController_getTemplates",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by type",
            "schema": {
              "type": "string",
              "enum": [
                "WELCOME",
                "VERIFICATION",
                "PASSWORD_RESET",
                "ORDER_CONFIRMATION",
                "ORDER_SHIPPED",
                "ORDER_DELIVERED",
                "ORDER_CANCELLED",
                "INVOICE_READY",
                "PAYMENT_RECEIVED",
                "PAYMENT_FAILED",
                "MERCHANT_APPROVED",
                "MERCHANT_REJECTED",
                "PRODUCT_APPROVED",
                "PRODUCT_REJECTED",
                "LOW_STOCK_ALERT",
                "PRICE_CHANGE",
                "QUOTE_REQUEST",
                "QUOTE_RECEIVED",
                "RFQ_SUBMITTED",
                "RFQ_RESPONSE",
                "CART_ABANDONED",
                "BULK_ORDER_READY",
                "SHIPMENT_DELAYED",
                "APPROVAL_REQUIRED",
                "APPROVAL_GRANTED",
                "APPROVAL_DENIED",
                "SYSTEM_MAINTENANCE",
                "SECURITY_ALERT"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string",
              "enum": [
                "SYSTEM",
                "ORDER",
                "INVENTORY",
                "MERCHANT",
                "USER",
                "SECURITY",
                "PROMOTION",
                "REMINDER",
                "ALERT"
              ]
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get notification templates",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/templates/{id}": {
      "put": {
        "operationId": "EnhancedNotificationController_updateTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a notification template",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/templates/{id}/render": {
      "post": {
        "operationId": "EnhancedNotificationController_renderTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenderTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenderedTemplateDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Render a template with data",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/preferences": {
      "get": {
        "operationId": "EnhancedNotificationController_getUserPreferences",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PreferenceResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user notification preferences",
        "tags": [
          "notifications"
        ]
      },
      "post": {
        "operationId": "EnhancedNotificationController_createOrUpdatePreference",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreferenceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create or update notification preference",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/preferences/bulk": {
      "put": {
        "operationId": "EnhancedNotificationController_updateBulkPreferences",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPreferenceUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PreferenceResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update multiple notification preferences",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/events": {
      "post": {
        "operationId": "EnhancedNotificationController_createEvent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a system event",
        "tags": [
          "notifications"
        ]
      },
      "get": {
        "operationId": "EnhancedNotificationController_getEvents",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by event type",
            "schema": {
              "type": "string",
              "enum": [
                "USER_REGISTERED",
                "USER_LOGIN",
                "USER_LOGOUT",
                "ORDER_CREATED",
                "ORDER_CONFIRMED",
                "ORDER_SHIPPED",
                "ORDER_DELIVERED",
                "ORDER_CANCELLED",
                "PAYMENT_PROCESSED",
                "PAYMENT_FAILED",
                "INVENTORY_LOW",
                "INVENTORY_OUT",
                "PRODUCT_CREATED",
                "PRODUCT_UPDATED",
                "PRODUCT_APPROVED",
                "PRODUCT_REJECTED",
                "MERCHANT_APPLIED",
                "MERCHANT_APPROVED",
                "MERCHANT_REJECTED",
                "QUOTE_REQUESTED",
                "QUOTE_SUBMITTED",
                "RFQ_CREATED",
                "RFQ_RESPONDED",
                "CART_ABANDONED",
                "PRICE_CHANGED",
                "SYSTEM_ERROR",
                "SECURITY_BREACH"
              ]
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchantId",
            "required": false,
            "in": "query",
            "description": "Filter by merchant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "required": false,
            "in": "query",
            "description": "Filter by order ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "severity",
            "required": false,
            "in": "query",
            "description": "Filter by severity",
            "schema": {
              "type": "string",
              "enum": [
                "LOW",
                "NORMAL",
                "HIGH",
                "URGENT"
              ]
            }
          },
          {
            "name": "processed",
            "required": false,
            "in": "query",
            "description": "Filter by processed status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "source",
            "required": false,
            "in": "query",
            "description": "Filter by source",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "Filter from date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "Filter to date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get system events",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/events/stats": {
      "get": {
        "operationId": "EnhancedNotificationController_getEventStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventStatsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get event statistics",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/emails/queue": {
      "post": {
        "operationId": "EnhancedNotificationController_queueEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueEmailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailQueueResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Queue an email for sending",
        "tags": [
          "notifications"
        ]
      },
      "get": {
        "operationId": "EnhancedNotificationController_getEmailQueue",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "SENT",
                "DELIVERED",
                "READ",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "toEmail",
            "required": false,
            "in": "query",
            "description": "Filter by to email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromEmail",
            "required": false,
            "in": "query",
            "description": "Filter by from email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "required": false,
            "in": "query",
            "description": "Filter by subject (contains)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "Filter from date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "Filter to date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailQueueListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get email queue",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/emails/{id}/send": {
      "post": {
        "operationId": "EnhancedNotificationController_sendQueuedEmail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a queued email manually",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/emails/stats": {
      "get": {
        "operationId": "EnhancedNotificationController_getEmailStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailStatsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get email statistics",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/my-notifications": {
      "get": {
        "operationId": "EnhancedNotificationController_getMyNotifications",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "description": "Filter by channel",
            "schema": {
              "type": "string",
              "enum": [
                "EMAIL",
                "IN_APP",
                "SMS",
                "PUSH",
                "WEBHOOK"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string",
              "enum": [
                "SYSTEM",
                "ORDER",
                "INVENTORY",
                "MERCHANT",
                "USER",
                "SECURITY",
                "PROMOTION",
                "REMINDER",
                "ALERT"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "SENT",
                "DELIVERED",
                "READ",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "recipientId",
            "required": false,
            "in": "query",
            "description": "Filter by recipient ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Filter by group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "Filter from date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "Filter to date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user notifications",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/my-notifications/{id}/read": {
      "put": {
        "operationId": "EnhancedNotificationController_markNotificationAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark notification as read",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/my-notifications/mark-all-read": {
      "put": {
        "operationId": "EnhancedNotificationController_markAllNotificationsAsRead",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark all notifications as read",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/my-notifications/unread-count": {
      "get": {
        "operationId": "EnhancedNotificationController_getUnreadCount",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get unread notification count",
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/storage/presigned-url": {
      "post": {
        "operationId": "StorageController_createPresignedUrl",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePresignedUrlDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns a presigned URL for direct upload to S3",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrlResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a presigned URL for uploading a file to S3",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/confirm-upload": {
      "post": {
        "operationId": "StorageController_confirmUpload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmUploadDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File upload confirmed"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Confirm that a file was successfully uploaded to S3",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/download/{fileId}": {
      "get": {
        "operationId": "StorageController_getDownloadUrl",
        "parameters": [
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a presigned URL for downloading the file"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a presigned URL for downloading a file from S3",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/files": {
      "get": {
        "operationId": "StorageController_getUserFiles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a list of files for the user"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all files for the current user",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/storage/{fileId}": {
      "delete": {
        "operationId": "StorageController_deleteFile",
        "parameters": [
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a file",
        "tags": [
          "storage"
        ]
      }
    },
    "/api/merchants/apply": {
      "post": {
        "description": "Submit a new merchant application for review. No authentication required.",
        "operationId": "MerchantController_submitApplication",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Merchant application details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantApplicationDto"
              },
              "examples": {
                "tech-supplier": {
                  "summary": "Technology Supplier Application",
                  "value": {
                    "name": "TechParts Supplier Inc.",
                    "displayName": "TechParts Supplier",
                    "description": "Premium electronic components supplier",
                    "businessType": "distributor",
                    "contactEmail": "admin@techparts.com",
                    "contactPhone": "+1-555-0200",
                    "website": "https://techparts.com",
                    "addressLine1": "456 Supplier Blvd",
                    "city": "San Francisco",
                    "state": "CA",
                    "postalCode": "94105",
                    "country": "USA",
                    "taxId": "TECH789123456",
                    "registrationNumber": "REG123456789",
                    "minimumOrderValue": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Application submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantApplicationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors or duplicate merchant",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Merchant with this name or tax ID already exists",
                    "error": "Bad Request"
                  }
                }
              }
            }
          }
        },
        "summary": "Submit merchant application",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/application/{id}/status": {
      "get": {
        "description": "Check the status of a merchant application using the application ID.",
        "operationId": "MerchantController_checkApplicationStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant application ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckApplicationStatusDto"
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Application not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Check application status",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/application/{id}": {
      "put": {
        "description": "Update a pending or rejected merchant application. Only allowed for PENDING or REJECTED applications.",
        "operationId": "MerchantController_updateApplication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant application ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated merchant application data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantApplicationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Application updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantApplicationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Application cannot be edited",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Application cannot be edited in current status",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Application not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Update merchant application",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/application/{id}/documents": {
      "get": {
        "description": "Retrieve all documents for a merchant application (public endpoint)",
        "operationId": "MerchantController_getApplicationDocuments",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant application ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDocumentsListDto"
                }
              }
            }
          },
          "404": {
            "description": "Application not found"
          }
        },
        "summary": "Get merchant application documents",
        "tags": [
          "Merchant Management"
        ]
      },
      "post": {
        "description": "Upload a supporting document for merchant application (public endpoint)",
        "operationId": "MerchantController_uploadApplicationDocument",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant application ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Document upload information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantDocumentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDocumentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid file or document type"
          },
          "404": {
            "description": "Application not found"
          }
        },
        "summary": "Upload document to merchant application",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/application/{id}/documents/{documentId}": {
      "delete": {
        "description": "Delete a document from merchant application (public endpoint)",
        "operationId": "MerchantController_deleteApplicationDocument",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant application ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "description": "Document ID to delete",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440001",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully"
          },
          "404": {
            "description": "Document or application not found"
          }
        },
        "summary": "Delete merchant application document",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/pending": {
      "get": {
        "description": "Retrieve all merchant applications with PENDING status. Requires System Admin role.",
        "operationId": "MerchantController_getPendingApplications",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for merchant name, email, or tax ID",
            "schema": {
              "example": "TechParts",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pending applications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantListDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pending merchant applications",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants": {
      "get": {
        "description": "Retrieve all merchants with filtering options. Requires System Admin role.",
        "operationId": "MerchantController_getAllMerchants",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by merchant status",
            "schema": {
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED",
                "SUSPENDED",
                "INACTIVE"
              ],
              "type": "string"
            }
          },
          {
            "name": "businessType",
            "required": false,
            "in": "query",
            "description": "Filter by business type",
            "schema": {
              "enum": [
                "manufacturer",
                "distributor",
                "retailer",
                "wholesaler"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for merchant name, email, or tax ID",
            "schema": {
              "example": "TechParts",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchants retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantListDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all merchants",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/{id}/approve": {
      "post": {
        "description": "Approve a pending merchant application. Requires system:manage permission.",
        "operationId": "MerchantController_approveMerchant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant ID to approve",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Approval details and notes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantApprovalDto"
              },
              "examples": {
                "standard-approval": {
                  "summary": "Standard Approval",
                  "value": {
                    "approvalNotes": "All documents verified and business credentials confirmed.",
                    "conditionalApproval": false,
                    "restrictions": []
                  }
                },
                "conditional-approval": {
                  "summary": "Conditional Approval",
                  "value": {
                    "approvalNotes": "Approved with initial restrictions.",
                    "conditionalApproval": true,
                    "restrictions": [
                      "Limited to electronics category",
                      "Maximum 100 products initially"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Merchant approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - merchant not in pending status"
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve merchant application",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/{id}/reject": {
      "post": {
        "description": "Reject a pending merchant application. Requires system:manage permission.",
        "operationId": "MerchantController_rejectMerchant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant ID to reject",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Rejection reason and details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantRejectionDto"
              },
              "examples": {
                "incomplete-docs": {
                  "summary": "Incomplete Documentation",
                  "value": {
                    "reason": "incomplete_documentation",
                    "rejectionNotes": "Business license document is missing or expired. Please submit a current license.",
                    "canReapply": true,
                    "requiredForReapplication": [
                      "Current business license",
                      "Updated tax registration"
                    ]
                  }
                },
                "failed-verification": {
                  "summary": "Failed Verification",
                  "value": {
                    "reason": "failed_verification",
                    "rejectionNotes": "Unable to verify business credentials with provided information.",
                    "canReapply": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Merchant rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - merchant not in pending status"
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject merchant application",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/profile": {
      "get": {
        "description": "Get the profile of the merchant associated with the authenticated user. Requires Merchant Admin role.",
        "operationId": "MerchantController_getMerchantProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Merchant profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - user not associated with any merchant"
          },
          "404": {
            "description": "Merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get merchant profile",
        "tags": [
          "Merchant Management"
        ]
      },
      "put": {
        "description": "Update the merchant profile. Requires merchant:manage permission.",
        "operationId": "MerchantController_updateMerchantProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Updated merchant profile data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMerchantProfileDto"
              },
              "examples": {
                "profile-update": {
                  "summary": "Profile Update",
                  "value": {
                    "displayName": "TechParts Supplier Pro",
                    "description": "Premium electronic components supplier with 24/7 support",
                    "contactPhone": "+1-555-0201",
                    "website": "https://techparts-pro.com",
                    "minimumOrderValue": 150,
                    "shippingPolicy": "Free shipping on orders over $500",
                    "returnPolicy": "30-day return policy with original packaging"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Merchant profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update merchant profile",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/{id}": {
      "put": {
        "description": "Update any merchant information by ID. Requires system:manage permission.",
        "operationId": "MerchantController_updateMerchantById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant ID to update",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated merchant profile data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMerchantProfileDto"
              },
              "examples": {
                "admin-update": {
                  "summary": "Admin Update",
                  "value": {
                    "displayName": "TechParts Supplier Pro",
                    "description": "Premium electronic components supplier with 24/7 support",
                    "contactPhone": "+1-555-0201",
                    "website": "https://techparts-pro.com",
                    "minimumOrderValue": 150,
                    "shippingPolicy": "Free shipping on orders over $500",
                    "returnPolicy": "30-day return policy with original packaging"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Merchant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update merchant by ID (Admin)",
        "tags": [
          "Merchant Management"
        ]
      },
      "get": {
        "description": "Get detailed merchant information by ID. Requires System Admin role.",
        "operationId": "MerchantController_getMerchantById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get merchant by ID",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/{id}/documents": {
      "post": {
        "description": "Upload a supporting document for merchant verification (SSM, business license, etc.)",
        "operationId": "MerchantController_uploadMerchantDocument",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Document upload information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantDocumentDto"
              },
              "examples": {
                "ssm-document": {
                  "summary": "SSM Certificate",
                  "value": {
                    "fileId": "550e8400-e29b-41d4-a716-446655440000",
                    "documentType": "SSM",
                    "description": "Company registration certificate from SSM"
                  }
                },
                "business-license": {
                  "summary": "Business License",
                  "value": {
                    "fileId": "550e8400-e29b-41d4-a716-446655440001",
                    "documentType": "BUSINESS_LICENSE",
                    "description": "Valid business operating license"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDocumentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid file type or document already exists"
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Merchant or file not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload merchant document",
        "tags": [
          "Merchant Management"
        ]
      },
      "get": {
        "description": "Retrieve all documents for a specific merchant",
        "operationId": "MerchantController_getMerchantDocuments",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Merchant ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDocumentsListDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get merchant documents",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/documents/{documentId}/status": {
      "patch": {
        "description": "Update the verification status of a merchant document (Admin only)",
        "operationId": "MerchantController_updateDocumentStatus",
        "parameters": [
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "description": "Document ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Status update information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentStatusDto"
              },
              "examples": {
                "verify-document": {
                  "summary": "Verify Document",
                  "value": {
                    "status": "VERIFIED",
                    "notes": "Document verified and approved"
                  }
                },
                "reject-document": {
                  "summary": "Reject Document",
                  "value": {
                    "status": "REJECTED",
                    "notes": "Document quality is poor, please resubmit"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDocumentDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update document verification status",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/documents/{documentId}": {
      "delete": {
        "description": "Delete a merchant document",
        "operationId": "MerchantController_deleteMerchantDocument",
        "parameters": [
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "description": "Document ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Document deleted successfully"
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete merchant document",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/merchants/documents/{documentId}/download": {
      "get": {
        "description": "Get a presigned URL to download/preview a merchant document",
        "operationId": "MerchantController_getDocumentDownloadUrl",
        "parameters": [
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "description": "Document ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "Presigned download URL",
                      "example": "https://storage.example.com/files/document.pdf?signature=..."
                    },
                    "filename": {
                      "type": "string",
                      "description": "Original filename",
                      "example": "ssm-certificate.pdf"
                    },
                    "expiresIn": {
                      "type": "number",
                      "description": "URL expiration time in seconds",
                      "example": 3600
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get document download URL",
        "tags": [
          "Merchant Management"
        ]
      }
    },
    "/api/products/categories": {
      "post": {
        "description": "Create a new product category. Only system administrators can create categories.",
        "operationId": "ProductCatalogController_createCategory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Parent category not found"
          },
          "409": {
            "description": "Category with this name or slug already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new product category",
        "tags": [
          "Product Catalog"
        ]
      },
      "get": {
        "description": "Retrieve all categories in a hierarchical structure.",
        "operationId": "ProductCatalogController_getCategoryHierarchy",
        "parameters": [
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Only return active categories",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeProducts",
            "required": false,
            "in": "query",
            "description": "Include product count for each category",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category hierarchy retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryHierarchyDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get category hierarchy",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/categories/{categoryId}": {
      "get": {
        "description": "Retrieve a specific category by its ID.",
        "operationId": "ProductCatalogController_getCategoryById",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeProducts",
            "required": false,
            "in": "query",
            "description": "Include product count for the category",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get category by ID",
        "tags": [
          "Product Catalog"
        ]
      },
      "put": {
        "description": "Update an existing category. Only system administrators can update categories.",
        "operationId": "ProductCatalogController_updateCategory",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "409": {
            "description": "Category with this slug already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a category",
        "tags": [
          "Product Catalog"
        ]
      },
      "delete": {
        "description": "Delete a category. Only system administrators can delete categories. Cannot delete categories with products or subcategories.",
        "operationId": "ProductCatalogController_deleteCategory",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted successfully"
          },
          "400": {
            "description": "Cannot delete category with existing products or subcategories"
          },
          "404": {
            "description": "Category not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a category",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products": {
      "post": {
        "description": "Create a new product. Only merchant administrators can create products.",
        "operationId": "ProductCatalogController_createProduct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "409": {
            "description": "Product with this SKU or slug already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new product",
        "tags": [
          "Product Catalog"
        ]
      },
      "get": {
        "description": "Retrieve products with various filtering options.",
        "operationId": "ProductCatalogController_getProducts",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "Intel processor",
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Category ID filter",
            "schema": {
              "example": "processors-category-id",
              "type": "string"
            }
          },
          {
            "name": "merchantId",
            "required": false,
            "in": "query",
            "description": "Merchant ID filter",
            "schema": {
              "example": "merchant-uuid",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Product status filter",
            "schema": {
              "example": "PUBLISHED",
              "type": "string",
              "enum": [
                "DRAFT",
                "PENDING_REVIEW",
                "APPROVED",
                "REJECTED",
                "PUBLISHED",
                "DISCONTINUED"
              ]
            }
          },
          {
            "name": "brand",
            "required": false,
            "in": "query",
            "description": "Brand filter",
            "schema": {
              "example": "Intel",
              "type": "string"
            }
          },
          {
            "name": "minPrice",
            "required": false,
            "in": "query",
            "description": "Minimum price filter",
            "schema": {
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "maxPrice",
            "required": false,
            "in": "query",
            "description": "Maximum price filter",
            "schema": {
              "example": 500,
              "type": "number"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Tags filter (comma-separated)",
            "schema": {
              "example": "intel,desktop",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "createdAt",
              "type": "string",
              "enum": [
                "name",
                "basePrice",
                "createdAt",
                "updatedAt"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get products with filtering and search",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/attributes": {
      "get": {
        "description": "Retrieve attribute templates with optional filtering.",
        "operationId": "ProductCatalogController_getAttributeTemplates",
        "parameters": [
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Category ID to filter attributes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Attribute type filter",
            "schema": {
              "enum": [
                "TEXT",
                "NUMBER",
                "BOOLEAN",
                "SELECT",
                "MULTI_SELECT",
                "DATE",
                "URL",
                "EMAIL"
              ],
              "type": "string"
            }
          },
          {
            "name": "requiredOnly",
            "required": false,
            "in": "query",
            "description": "Filter by required attributes only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterableOnly",
            "required": false,
            "in": "query",
            "description": "Filter by filterable attributes only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "variantOnly",
            "required": false,
            "in": "query",
            "description": "Filter by variant attributes only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Filter by active attributes only",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAttributeTemplateListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get product attribute templates",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/{productId}": {
      "get": {
        "description": "Retrieve a specific product by its ID.",
        "operationId": "ProductCatalogController_getProductById",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeVariants",
            "required": false,
            "in": "query",
            "description": "Include product variants",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get product by ID",
        "tags": [
          "Product Catalog"
        ]
      },
      "put": {
        "description": "Update an existing product. Only merchant administrators can update products.",
        "operationId": "ProductCatalogController_updateProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "409": {
            "description": "Product with this slug already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a product",
        "tags": [
          "Product Catalog"
        ]
      },
      "delete": {
        "description": "Delete a product. Only merchant administrators can delete products.",
        "operationId": "ProductCatalogController_deleteProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted successfully"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a product",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/{productId}/submit-for-approval": {
      "post": {
        "description": "Submit a draft product for admin approval.",
        "operationId": "ProductCatalogController_submitProductForApproval",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product submitted for approval successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Only draft products can be submitted for approval"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit product for approval",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/{productId}/approve": {
      "post": {
        "description": "Approve a product that is pending review. Only system administrators can approve products.",
        "operationId": "ProductCatalogController_approveProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Only products pending review can be approved"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve a product",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/{productId}/reject": {
      "post": {
        "description": "Reject a product that is pending review. Only system administrators can reject products.",
        "operationId": "ProductCatalogController_rejectProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for rejection",
                    "example": "Product description is incomplete"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Only products pending review can be rejected"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject a product",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/{productId}/variants": {
      "post": {
        "description": "Create a new variant for an existing product.",
        "operationId": "ProductCatalogController_createProductVariant",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductVariantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product variant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "409": {
            "description": "Product variant with this SKU already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a product variant",
        "tags": [
          "Product Catalog"
        ]
      },
      "get": {
        "description": "Retrieve all variants for a specific product.",
        "operationId": "ProductCatalogController_getProductVariants",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product variants retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantListDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get product variants",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/variants/{variantId}": {
      "put": {
        "description": "Update an existing product variant.",
        "operationId": "ProductCatalogController_updateProductVariant",
        "parameters": [
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "description": "Variant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductVariantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product variant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariantResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Product variant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a product variant",
        "tags": [
          "Product Catalog"
        ]
      },
      "delete": {
        "description": "Delete a product variant.",
        "operationId": "ProductCatalogController_deleteProductVariant",
        "parameters": [
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "description": "Variant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product variant deleted successfully"
          },
          "404": {
            "description": "Product variant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a product variant",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/categories/{categoryId}/attributes": {
      "post": {
        "description": "Create a new attribute template for a category. Only system administrators can create attribute templates.",
        "operationId": "ProductCatalogController_createAttributeTemplate",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductAttributeTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAttributeTemplateResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "409": {
            "description": "Attribute with this name already exists for this category"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a product attribute template",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/products/attributes/{attributeId}": {
      "put": {
        "description": "Update an existing attribute template. Only system administrators can update attribute templates.",
        "operationId": "ProductCatalogController_updateAttributeTemplate",
        "parameters": [
          {
            "name": "attributeId",
            "required": true,
            "in": "path",
            "description": "Attribute template ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductAttributeTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAttributeTemplateResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Attribute template not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a product attribute template",
        "tags": [
          "Product Catalog"
        ]
      },
      "delete": {
        "description": "Delete an attribute template. Only system administrators can delete attribute templates.",
        "operationId": "ProductCatalogController_deleteAttributeTemplate",
        "parameters": [
          {
            "name": "attributeId",
            "required": true,
            "in": "path",
            "description": "Attribute template ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attribute template deleted successfully"
          },
          "404": {
            "description": "Attribute template not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a product attribute template",
        "tags": [
          "Product Catalog"
        ]
      }
    },
    "/api/inventory/warehouses": {
      "post": {
        "description": "Create a new warehouse for inventory management. Only system administrators can create warehouses.",
        "operationId": "InventoryManagementController_createWarehouse",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWarehouseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Warehouse created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid warehouse data or warehouse code already exists"
          },
          "404": {
            "description": "Parent warehouse or merchant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new warehouse",
        "tags": [
          "Inventory Management"
        ]
      },
      "get": {
        "description": "Retrieve warehouses with optional filtering and pagination. Merchants see only their warehouses.",
        "operationId": "InventoryManagementController_getWarehouses",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "New York",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Warehouse type filter",
            "schema": {
              "example": "PHYSICAL",
              "type": "string",
              "enum": [
                "PHYSICAL",
                "VIRTUAL",
                "DROPSHIP",
                "CONSIGNMENT"
              ]
            }
          },
          {
            "name": "merchantId",
            "required": false,
            "in": "query",
            "description": "Merchant ID filter",
            "schema": {
              "example": "merchant-uuid",
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Active status filter",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "includeStats",
            "required": false,
            "in": "query",
            "description": "Include inventory statistics",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "includeChildren",
            "required": false,
            "in": "query",
            "description": "Include child warehouses",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Warehouses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get warehouses",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/warehouses/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific warehouse",
        "operationId": "InventoryManagementController_getWarehouseById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Warehouse ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeStats",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Warehouse retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Warehouse not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get warehouse by ID",
        "tags": [
          "Inventory Management"
        ]
      },
      "put": {
        "description": "Update warehouse information. Only system administrators can update warehouses.",
        "operationId": "InventoryManagementController_updateWarehouse",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Warehouse ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWarehouseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Warehouse updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data or circular parent reference"
          },
          "404": {
            "description": "Warehouse not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update warehouse",
        "tags": [
          "Inventory Management"
        ]
      },
      "delete": {
        "description": "Delete a warehouse. Only possible if warehouse has no inventory items or child warehouses.",
        "operationId": "InventoryManagementController_deleteWarehouse",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Warehouse ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Warehouse deleted successfully"
          },
          "400": {
            "description": "Cannot delete warehouse with existing inventory or child warehouses"
          },
          "404": {
            "description": "Warehouse not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete warehouse",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/items": {
      "post": {
        "description": "Create a new inventory item for a product in a warehouse",
        "operationId": "InventoryManagementController_createInventoryItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid inventory item data"
          },
          "409": {
            "description": "Inventory item already exists for this product/variant/warehouse/batch combination"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create inventory item",
        "tags": [
          "Inventory Management"
        ]
      },
      "get": {
        "description": "Retrieve inventory items with filtering, search, and pagination",
        "operationId": "InventoryManagementController_getInventoryItems",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query (product name, SKU, batch)",
            "schema": {
              "example": "Intel i7",
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Product ID filter",
            "schema": {
              "example": "product-uuid",
              "type": "string"
            }
          },
          {
            "name": "warehouseId",
            "required": false,
            "in": "query",
            "description": "Warehouse ID filter",
            "schema": {
              "example": "warehouse-uuid",
              "type": "string"
            }
          },
          {
            "name": "lowStockOnly",
            "required": false,
            "in": "query",
            "description": "Show only low stock items",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "outOfStockOnly",
            "required": false,
            "in": "query",
            "description": "Show only out of stock items",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Show only active items",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "includeProduct",
            "required": false,
            "in": "query",
            "description": "Include product information",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "includeWarehouse",
            "required": false,
            "in": "query",
            "description": "Include warehouse information",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get inventory items",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/items/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific inventory item",
        "operationId": "InventoryManagementController_getInventoryItemById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Inventory item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory item retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get inventory item by ID",
        "tags": [
          "Inventory Management"
        ]
      },
      "put": {
        "description": "Update inventory item information including stock levels and settings",
        "operationId": "InventoryManagementController_updateInventoryItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Inventory item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update inventory item",
        "tags": [
          "Inventory Management"
        ]
      },
      "delete": {
        "description": "Delete an inventory item. Only possible if no stock remains.",
        "operationId": "InventoryManagementController_deleteInventoryItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Inventory item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Inventory item deleted successfully"
          },
          "400": {
            "description": "Cannot delete inventory item with remaining stock"
          },
          "404": {
            "description": "Inventory item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete inventory item",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/items/bulk-update": {
      "post": {
        "description": "Update multiple inventory items in a single operation",
        "operationId": "InventoryManagementController_bulkUpdateInventory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkInventoryUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk update completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "number"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk update inventory",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/movements": {
      "post": {
        "description": "Record a stock movement (receipt, shipment, adjustment, etc.)",
        "operationId": "InventoryManagementController_createStockMovement",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStockMovementDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stock movement created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockMovementResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid movement data or insufficient stock"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create stock movement",
        "tags": [
          "Inventory Management"
        ]
      },
      "get": {
        "description": "Retrieve stock movements with filtering and pagination",
        "operationId": "InventoryManagementController_getStockMovements",
        "parameters": [
          {
            "name": "inventoryItemId",
            "required": false,
            "in": "query",
            "description": "Inventory item ID filter",
            "schema": {
              "example": "inventory-item-uuid",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Movement type filter",
            "schema": {
              "example": "RECEIPT",
              "type": "string",
              "enum": [
                "RECEIPT",
                "SHIPMENT",
                "ADJUSTMENT",
                "TRANSFER",
                "RESERVATION",
                "RELEASE",
                "CYCLE_COUNT",
                "DAMAGE",
                "RETURN",
                "WRITE_OFF"
              ]
            }
          },
          {
            "name": "warehouseId",
            "required": false,
            "in": "query",
            "description": "Warehouse ID filter",
            "schema": {
              "example": "warehouse-uuid",
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "required": false,
            "in": "query",
            "description": "Order ID filter",
            "schema": {
              "example": "order-uuid",
              "type": "string"
            }
          },
          {
            "name": "performedBy",
            "required": false,
            "in": "query",
            "description": "User ID filter",
            "schema": {
              "example": "user-uuid",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date filter",
            "schema": {
              "example": "2024-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date filter",
            "schema": {
              "example": "2024-01-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "includeInventoryItem",
            "required": false,
            "in": "query",
            "description": "Include inventory item details",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "includeUser",
            "required": false,
            "in": "query",
            "description": "Include user details",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stock movements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockMovementListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get stock movements",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/transfers": {
      "post": {
        "description": "Transfer inventory between warehouses",
        "operationId": "InventoryManagementController_createStockTransfer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStockTransferDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stock transfer completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transferId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid transfer data or insufficient stock"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create stock transfer",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/adjustments": {
      "post": {
        "description": "Manually adjust inventory quantities (cycle counts, corrections, etc.)",
        "operationId": "InventoryManagementController_adjustStock",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockAdjustmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stock adjustment completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockMovementResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Adjust stock levels",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/pricing-rules": {
      "post": {
        "description": "Create a dynamic pricing rule for an inventory item",
        "operationId": "InventoryManagementController_createPricingRule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryPricingRuleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pricing rule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryPricingRuleResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create pricing rule",
        "tags": [
          "Inventory Management"
        ]
      },
      "get": {
        "description": "Retrieve pricing rules with filtering and pagination",
        "operationId": "InventoryManagementController_getPricingRules",
        "parameters": [
          {
            "name": "inventoryItemId",
            "required": false,
            "in": "query",
            "description": "Inventory item ID filter",
            "schema": {
              "example": "inventory-item-uuid",
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Product ID filter",
            "schema": {
              "example": "product-uuid",
              "type": "string"
            }
          },
          {
            "name": "warehouseId",
            "required": false,
            "in": "query",
            "description": "Warehouse ID filter",
            "schema": {
              "example": "warehouse-uuid",
              "type": "string"
            }
          },
          {
            "name": "adjustmentType",
            "required": false,
            "in": "query",
            "description": "Adjustment type filter",
            "schema": {
              "example": "PERCENTAGE",
              "type": "string",
              "enum": [
                "FIXED",
                "PERCENTAGE",
                "MARKUP",
                "DISCOUNT"
              ]
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Show only active rules",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "currentlyValidOnly",
            "required": false,
            "in": "query",
            "description": "Show only currently valid rules (date-based)",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "includeInventoryItem",
            "required": false,
            "in": "query",
            "description": "Include inventory item details",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing rules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryPricingRuleListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pricing rules",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/pricing-rules/{id}": {
      "put": {
        "description": "Update an existing pricing rule",
        "operationId": "InventoryManagementController_updatePricingRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Pricing rule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryPricingRuleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pricing rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryPricingRuleResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pricing rule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update pricing rule",
        "tags": [
          "Inventory Management"
        ]
      },
      "delete": {
        "description": "Delete a pricing rule",
        "operationId": "InventoryManagementController_deletePricingRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Pricing rule ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pricing rule deleted successfully"
          },
          "404": {
            "description": "Pricing rule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete pricing rule",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/pricing/calculate": {
      "post": {
        "description": "Calculate the final price for a given quantity based on pricing rules",
        "operationId": "InventoryManagementController_calculatePrice",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceCalculationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Price calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceCalculationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate price",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/reports/low-stock": {
      "get": {
        "description": "Get items that are at or below their minimum stock levels",
        "operationId": "InventoryManagementController_getLowStockReport",
        "parameters": [
          {
            "name": "warehouseId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Low stock report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get low stock report",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/reports/out-of-stock": {
      "get": {
        "description": "Get items that are completely out of stock",
        "operationId": "InventoryManagementController_getOutOfStockReport",
        "parameters": [
          {
            "name": "warehouseId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Out of stock report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItemListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get out of stock report",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/inventory/reports/inventory-value": {
      "get": {
        "description": "Get inventory value across all warehouses",
        "operationId": "InventoryManagementController_getInventoryValueReport",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Inventory valuation report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalValue": {
                      "type": "number"
                    },
                    "valueByWarehouse": {
                      "type": "object"
                    },
                    "valueByCategory": {
                      "type": "object"
                    },
                    "summary": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get inventory valuation report",
        "tags": [
          "Inventory Management"
        ]
      }
    },
    "/api/search/products": {
      "post": {
        "description": "Comprehensive product search with full-text search, filtering, sorting, and pagination capabilities",
        "operationId": "SearchDiscoveryController_searchProducts",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSearchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product search results with pagination and metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search products with advanced filtering",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/quick": {
      "get": {
        "description": "Fast search for instant results and auto-complete functionality",
        "operationId": "SearchDiscoveryController_quickSearch",
        "parameters": [
          {
            "name": "q",
            "required": true,
            "in": "query",
            "description": "Search query term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of results",
            "schema": {
              "example": 5,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quick search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickSearchResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Quick product search",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/bulk-sku": {
      "post": {
        "description": "Search multiple products by SKU for procurement and inventory management",
        "operationId": "SearchDiscoveryController_bulkSkuSearch",
        "parameters": [
          {
            "name": "warehouseId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSkuSearchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk SKU search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSkuSearchResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk SKU search",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/suggestions": {
      "post": {
        "description": "Get intelligent search suggestions for auto-complete and search assistance",
        "operationId": "SearchDiscoveryController_getSearchSuggestions",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSuggestionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get search suggestions",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/saved": {
      "get": {
        "description": "Retrieve all saved searches for the authenticated user",
        "operationId": "SearchDiscoveryController_getSavedSearches",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of saved searches",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user saved searches",
        "tags": [
          "Search & Discovery"
        ]
      },
      "post": {
        "description": "Save a search configuration for future use and alerts",
        "operationId": "SearchDiscoveryController_createSavedSearch",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSavedSearchDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Saved search created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid saved search data"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create saved search",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/saved/{searchId}": {
      "put": {
        "description": "Update an existing saved search configuration",
        "operationId": "SearchDiscoveryController_updateSavedSearch",
        "parameters": [
          {
            "name": "searchId",
            "required": true,
            "in": "path",
            "description": "Saved search ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSavedSearchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Saved search updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Saved search not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update saved search",
        "tags": [
          "Search & Discovery"
        ]
      },
      "delete": {
        "description": "Remove a saved search from the user account",
        "operationId": "SearchDiscoveryController_deleteSavedSearch",
        "parameters": [
          {
            "name": "searchId",
            "required": true,
            "in": "path",
            "description": "Saved search ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Saved search deleted successfully"
          },
          "404": {
            "description": "Saved search not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete saved search",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/saved/{searchId}/execute": {
      "post": {
        "description": "Run a saved search and get updated results",
        "operationId": "SearchDiscoveryController_executeSavedSearch",
        "parameters": [
          {
            "name": "searchId",
            "required": true,
            "in": "path",
            "description": "Saved search ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteSavedSearchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Saved search execution results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Saved search not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Execute saved search",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/analytics": {
      "get": {
        "description": "Retrieve comprehensive search analytics and insights for business intelligence",
        "operationId": "SearchDiscoveryController_getSearchAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics period (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics period (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Analytics period granularity",
            "schema": {
              "enum": [
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR"
              ],
              "type": "string"
            }
          },
          {
            "name": "merchantId",
            "required": false,
            "in": "query",
            "description": "Filter analytics by merchant",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter analytics by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit for top results",
            "schema": {
              "example": 100,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search analytics data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAnalyticsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get search analytics",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/analytics/track-click": {
      "post": {
        "description": "Record when a user clicks on a search result for analytics",
        "operationId": "SearchDiscoveryController_trackProductClick",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Click tracked successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Track product click",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/health": {
      "get": {
        "description": "Check the health and performance of the search service",
        "operationId": "SearchDiscoveryController_getSearchHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Search service health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number",
                      "example": 86400
                    },
                    "searchIndex": {
                      "type": "object",
                      "properties": {
                        "totalProducts": {
                          "type": "number",
                          "example": 50000
                        },
                        "indexedProducts": {
                          "type": "number",
                          "example": 49998
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "performance": {
                      "type": "object",
                      "properties": {
                        "avgSearchTime": {
                          "type": "number",
                          "example": 120
                        },
                        "searchesPerMinute": {
                          "type": "number",
                          "example": 45
                        },
                        "cacheHitRate": {
                          "type": "number",
                          "example": 0.85
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search service health check",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/search/popular-terms": {
      "get": {
        "description": "Retrieve the most popular search terms for the past period",
        "operationId": "SearchDiscoveryController_getPopularSearchTerms",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of popular terms to return",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Time period for popular terms",
            "schema": {
              "enum": [
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Popular search terms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "terms": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "term": {
                            "type": "string",
                            "example": "gaming laptop"
                          },
                          "count": {
                            "type": "number",
                            "example": 1250
                          },
                          "trend": {
                            "type": "string",
                            "enum": [
                              "up",
                              "down",
                              "stable"
                            ],
                            "example": "up"
                          },
                          "avgResults": {
                            "type": "number",
                            "example": 450
                          }
                        }
                      }
                    },
                    "period": {
                      "type": "string",
                      "example": "WEEK"
                    },
                    "totalSearches": {
                      "type": "number",
                      "example": 15000
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get popular search terms",
        "tags": [
          "Search & Discovery"
        ]
      }
    },
    "/api/rfq": {
      "post": {
        "description": "Create a new Request for Quote with multiple items and specifications",
        "operationId": "RFQManagementController_createRFQ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRFQDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "RFQ created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFQResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid RFQ data"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new RFQ",
        "tags": [
          "RFQ & Quote Management"
        ]
      },
      "get": {
        "description": "Get a list of RFQs with filtering and pagination",
        "operationId": "RFQManagementController_listRFQs",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by RFQ status",
            "schema": {
              "example": "SUBMITTED",
              "type": "string",
              "enum": [
                "DRAFT",
                "SUBMITTED",
                "UNDER_REVIEW",
                "QUOTES_RECEIVED",
                "QUOTES_COMPARED",
                "QUOTE_SELECTED",
                "NEGOTIATING",
                "APPROVED",
                "CONVERTED",
                "EXPIRED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "urgencyLevel",
            "required": false,
            "in": "query",
            "description": "Filter by urgency level",
            "schema": {
              "example": "HIGH",
              "type": "string",
              "enum": [
                "LOW",
                "NORMAL",
                "HIGH",
                "URGENT",
                "CRITICAL"
              ]
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Filter by company ID",
            "schema": {
              "example": "12345678-1234-1234-1234-123456789012",
              "type": "string"
            }
          },
          {
            "name": "requesterId",
            "required": false,
            "in": "query",
            "description": "Filter by requester ID",
            "schema": {
              "example": "12345678-1234-1234-1234-123456789012",
              "type": "string"
            }
          },
          {
            "name": "submittedFrom",
            "required": false,
            "in": "query",
            "description": "Filter by submitted date (from)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "submittedTo",
            "required": false,
            "in": "query",
            "description": "Filter by submitted date (to)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "deadlineFrom",
            "required": false,
            "in": "query",
            "description": "Filter by deadline (from)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "deadlineTo",
            "required": false,
            "in": "query",
            "description": "Filter by deadline (to)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and description",
            "schema": {
              "example": "network equipment",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RFQ list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFQListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List RFQs",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific RFQ",
        "operationId": "RFQManagementController_getRFQById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RFQ details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFQResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get RFQ by ID",
        "tags": [
          "RFQ & Quote Management"
        ]
      },
      "put": {
        "description": "Update an existing RFQ (only available for draft RFQs)",
        "operationId": "RFQManagementController_updateRFQ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRFQDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RFQ updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFQResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied or RFQ cannot be updated"
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update RFQ",
        "tags": [
          "RFQ & Quote Management"
        ]
      },
      "delete": {
        "description": "Delete an RFQ (only available for draft RFQs)",
        "operationId": "RFQManagementController_deleteRFQ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "RFQ deleted successfully"
          },
          "403": {
            "description": "Access denied or RFQ cannot be deleted"
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete RFQ",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/{id}/submit": {
      "post": {
        "description": "Submit an RFQ for merchant quotes",
        "operationId": "RFQManagementController_submitRFQ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitRFQDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RFQ submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFQResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "RFQ cannot be submitted"
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit RFQ",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/{rfqId}/quotes": {
      "get": {
        "description": "Retrieve all quotes submitted for a specific RFQ",
        "operationId": "RFQManagementController_getQuotesForRFQ",
        "parameters": [
          {
            "name": "rfqId",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by quote status",
            "schema": {
              "enum": [
                "DRAFT",
                "SUBMITTED",
                "UNDER_REVIEW",
                "APPROVED",
                "REJECTED",
                "EXPIRED",
                "ACCEPTED",
                "COUNTER_OFFERED",
                "WITHDRAWN"
              ],
              "type": "string"
            }
          },
          {
            "name": "merchantId",
            "required": false,
            "in": "query",
            "description": "Filter by merchant ID",
            "schema": {
              "example": "12345678-1234-1234-1234-123456789012",
              "type": "string"
            }
          },
          {
            "name": "submittedFrom",
            "required": false,
            "in": "query",
            "description": "Filter by submitted date (from)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "submittedTo",
            "required": false,
            "in": "query",
            "description": "Filter by submitted date (to)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "validFrom",
            "required": false,
            "in": "query",
            "description": "Filter by valid until date (from)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "validTo",
            "required": false,
            "in": "query",
            "description": "Filter by valid until date (to)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "minAmount",
            "required": false,
            "in": "query",
            "description": "Filter by minimum total amount",
            "schema": {
              "example": "1000.00",
              "type": "string"
            }
          },
          {
            "name": "maxAmount",
            "required": false,
            "in": "query",
            "description": "Filter by maximum total amount",
            "schema": {
              "example": "50000.00",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quotes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteListDto"
                }
              }
            }
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get quotes for RFQ",
        "tags": [
          "RFQ & Quote Management"
        ]
      },
      "post": {
        "description": "Submit a quote in response to an RFQ",
        "operationId": "RFQManagementController_createQuote",
        "parameters": [
          {
            "name": "rfqId",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuoteDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid quote data or RFQ not available for quoting"
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create quote for RFQ",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/quotes/{quoteId}": {
      "get": {
        "description": "Retrieve detailed information about a specific quote",
        "operationId": "RFQManagementController_getQuoteById",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get quote by ID",
        "tags": [
          "RFQ & Quote Management"
        ]
      },
      "put": {
        "description": "Update an existing quote (only available for draft quotes)",
        "operationId": "RFQManagementController_updateQuote",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuoteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied or quote cannot be updated"
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update quote",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/quotes/{quoteId}/submit": {
      "post": {
        "description": "Submit a quote to the RFQ requester",
        "operationId": "RFQManagementController_submitQuote",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Quote cannot be submitted"
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit quote",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/quotes/{quoteId}/accept": {
      "post": {
        "description": "Accept a submitted quote",
        "operationId": "RFQManagementController_acceptQuote",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptQuoteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote accepted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Quote cannot be accepted"
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Accept quote",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/quotes/{quoteId}/reject": {
      "post": {
        "description": "Reject a submitted quote with reason",
        "operationId": "RFQManagementController_rejectQuote",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectQuoteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Quote cannot be rejected"
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject quote",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/quotes/{quoteId}/counter-offer": {
      "post": {
        "description": "Submit a counter offer for a quote",
        "operationId": "RFQManagementController_submitCounterOffer",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterOfferDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Counter offer submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Counter offer cannot be submitted"
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit counter offer",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/quotes/{quoteId}/revise": {
      "post": {
        "description": "Create a revised version of an existing quote",
        "operationId": "RFQManagementController_createQuoteRevision",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRevisionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote revision created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create quote revision",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/{id}/comments": {
      "get": {
        "description": "Retrieve all comments for a specific RFQ",
        "operationId": "RFQManagementController_getRFQComments",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInternal",
            "required": false,
            "in": "query",
            "description": "Include internal comments (admin/merchant only)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RFQ comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFQCommentListDto"
                }
              }
            }
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get RFQ comments",
        "tags": [
          "RFQ & Quote Management"
        ]
      },
      "post": {
        "description": "Add a comment to an RFQ",
        "operationId": "RFQManagementController_addRFQComment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RFQ ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRFQCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFQCommentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "RFQ not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add RFQ comment",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/quotes/{quoteId}/comments": {
      "get": {
        "description": "Retrieve all comments for a specific quote",
        "operationId": "RFQManagementController_getQuoteComments",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInternal",
            "required": false,
            "in": "query",
            "description": "Include internal comments (admin/merchant only)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCommentListDto"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get quote comments",
        "tags": [
          "RFQ & Quote Management"
        ]
      },
      "post": {
        "description": "Add a comment to a quote",
        "operationId": "RFQManagementController_addQuoteComment",
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "description": "Quote ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuoteCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCommentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add quote comment",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/analytics/overview": {
      "get": {
        "description": "Get overview analytics for RFQs and quotes",
        "operationId": "RFQManagementController_getAnalyticsOverview",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Analytics overview retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRFQs": {
                      "type": "number",
                      "example": 150
                    },
                    "activeRFQs": {
                      "type": "number",
                      "example": 25
                    },
                    "totalQuotes": {
                      "type": "number",
                      "example": 380
                    },
                    "averageQuotesPerRFQ": {
                      "type": "number",
                      "example": 2.5
                    },
                    "acceptanceRate": {
                      "type": "number",
                      "example": 0.65
                    },
                    "averageResponseTime": {
                      "type": "number",
                      "example": 24
                    },
                    "topMerchants": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "merchantId": {
                            "type": "string"
                          },
                          "merchantName": {
                            "type": "string"
                          },
                          "quotesSubmitted": {
                            "type": "number"
                          },
                          "acceptanceRate": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get RFQ analytics overview",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/rfq/health": {
      "get": {
        "description": "Check the health and status of the RFQ management service",
        "operationId": "RFQManagementController_getRFQServiceHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "activeRFQs": {
                      "type": "number",
                      "example": 25
                    },
                    "pendingQuotes": {
                      "type": "number",
                      "example": 15
                    },
                    "systemLoad": {
                      "type": "object",
                      "properties": {
                        "rfqProcessing": {
                          "type": "number",
                          "example": 0.15
                        },
                        "quoteGeneration": {
                          "type": "number",
                          "example": 0.22
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "RFQ service health check",
        "tags": [
          "RFQ & Quote Management"
        ]
      }
    },
    "/api/cart-checkout/cart": {
      "post": {
        "operationId": "CartCheckoutController_createCart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cart created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new cart",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "get": {
        "operationId": "CartCheckoutController_getUserCart",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Company ID for B2B context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/{cartId}": {
      "get": {
        "operationId": "CartCheckoutController_getCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get cart by ID",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "put": {
        "operationId": "CartCheckoutController_updateCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update cart details",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/{cartId}/clear": {
      "delete": {
        "operationId": "CartCheckoutController_clearCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cart cleared successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clear all items from cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/{userCartId}/merge/{guestCartId}": {
      "post": {
        "operationId": "CartCheckoutController_mergeCart",
        "parameters": [
          {
            "name": "guestCartId",
            "required": true,
            "in": "path",
            "description": "Guest Cart ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userCartId",
            "required": true,
            "in": "path",
            "description": "User Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeCartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Carts merged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Merge guest cart with user cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/{cartId}/validate": {
      "post": {
        "operationId": "CartCheckoutController_validateCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart validation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartValidationDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Validate cart items availability and pricing",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/{cartId}/items": {
      "post": {
        "operationId": "CartCheckoutController_addItemToCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item added to cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add item to cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/items/{itemId}": {
      "put": {
        "operationId": "CartCheckoutController_updateCartItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Cart Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update cart item",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "delete": {
        "operationId": "CartCheckoutController_removeCartItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Cart Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Item removed from cart successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove item from cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/{cartId}/items/bulk": {
      "post": {
        "operationId": "CartCheckoutController_bulkAddToCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAddToCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Items added to cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartItemResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add multiple items to cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/cart/{cartId}/from-quote": {
      "post": {
        "operationId": "CartCheckoutController_addQuoteToCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteToCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote items added to cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartItemResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add quote items to cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/addresses": {
      "post": {
        "operationId": "CartCheckoutController_createAddress",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new address",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "get": {
        "operationId": "CartCheckoutController_getAddresses",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Company ID filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user addresses",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/addresses/{addressId}": {
      "put": {
        "operationId": "CartCheckoutController_updateAddress",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "description": "Address ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update address",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "delete": {
        "operationId": "CartCheckoutController_deleteAddress",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "description": "Address ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Address deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete address",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/addresses/{addressId}/set-default": {
      "post": {
        "operationId": "CartCheckoutController_setDefaultAddress",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "description": "Address ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDefaultAddressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Set address as default",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout": {
      "post": {
        "operationId": "CartCheckoutController_initiateCheckout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateCheckoutDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Initiate checkout process",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}": {
      "get": {
        "operationId": "CartCheckoutController_getCheckout",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get checkout details",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/shipping": {
      "put": {
        "operationId": "CartCheckoutController_updateCheckoutShipping",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckoutShippingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shipping information updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update checkout shipping information",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/billing": {
      "put": {
        "operationId": "CartCheckoutController_updateCheckoutBilling",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckoutBillingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Billing information updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update checkout billing information",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/payment": {
      "put": {
        "operationId": "CartCheckoutController_updateCheckoutPayment",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckoutPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment method updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update checkout payment method",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/notes": {
      "put": {
        "operationId": "CartCheckoutController_updateCheckoutNotes",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckoutNotesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notes updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update checkout notes",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/submit": {
      "post": {
        "operationId": "CartCheckoutController_submitCheckout",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitCheckoutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit checkout for processing or approval",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/approve": {
      "post": {
        "operationId": "CartCheckoutController_approveCheckout",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveCheckoutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout approval decision processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve or reject checkout",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/complete": {
      "post": {
        "operationId": "CartCheckoutController_completeCheckout",
        "parameters": [
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Complete checkout and create order",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkouts": {
      "get": {
        "operationId": "CartCheckoutController_listCheckouts",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "example": "PENDING_APPROVAL",
              "type": "string",
              "enum": [
                "PENDING",
                "PENDING_APPROVAL",
                "APPROVED",
                "REJECTED",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "approvalStatus",
            "required": false,
            "in": "query",
            "description": "Filter by approval status",
            "schema": {
              "example": "PENDING",
              "type": "string",
              "enum": [
                "NONE",
                "PENDING",
                "APPROVED",
                "REJECTED",
                "ESCALATED"
              ]
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Filter by company ID",
            "schema": {
              "example": "clh1234567890",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "clh1234567890",
              "type": "string"
            }
          },
          {
            "name": "minAmount",
            "required": false,
            "in": "query",
            "description": "Filter by minimum total amount",
            "schema": {
              "example": 1000,
              "type": "number"
            }
          },
          {
            "name": "maxAmount",
            "required": false,
            "in": "query",
            "description": "Filter by maximum total amount",
            "schema": {
              "example": 5000,
              "type": "number"
            }
          },
          {
            "name": "createdFrom",
            "required": false,
            "in": "query",
            "description": "Filter by creation date from",
            "schema": {
              "example": "2024-08-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "createdTo",
            "required": false,
            "in": "query",
            "description": "Filter by creation date to",
            "schema": {
              "example": "2024-08-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkouts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List checkouts with filters",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/checkout/{checkoutId}/approval-requirement": {
      "get": {
        "operationId": "CartCheckoutController_getApprovalRequirement",
        "parameters": [
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "Amount to check",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkoutId",
            "required": true,
            "in": "path",
            "description": "Checkout ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Approval requirement checked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequirementDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check approval requirement for amount",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/saved-items": {
      "post": {
        "operationId": "CartCheckoutController_createSavedItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSavedItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Save item for later",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "get": {
        "operationId": "CartCheckoutController_listSavedItems",
        "parameters": [
          {
            "name": "listName",
            "required": false,
            "in": "query",
            "description": "Filter by list name",
            "schema": {
              "example": "Q4 Equipment Needs",
              "type": "string"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Filter by tags",
            "schema": {
              "example": [
                "motors",
                "high-priority"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Filter by product name or SKU",
            "schema": {
              "example": "motor",
              "type": "string"
            }
          },
          {
            "name": "isAvailable",
            "required": false,
            "in": "query",
            "description": "Filter by availability",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "hasPriceChange",
            "required": false,
            "in": "query",
            "description": "Filter by price changes (true = items with price changes)",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saved items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedItemsListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get saved items with filters",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/saved-items/{itemId}": {
      "get": {
        "operationId": "CartCheckoutController_getSavedItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Saved Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saved item retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get saved item details",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "put": {
        "operationId": "CartCheckoutController_updateSavedItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Saved Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSavedItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Saved item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update saved item",
        "tags": [
          "Cart & Checkout"
        ]
      },
      "delete": {
        "operationId": "CartCheckoutController_deleteSavedItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Saved Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Saved item deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete saved item",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/saved-items/{itemId}/add-to-cart/{cartId}": {
      "post": {
        "operationId": "CartCheckoutController_addSavedItemToCart",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Saved Item ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSavedItemToCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Saved item added to cart successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add saved item to cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/saved-items/bulk-add-to-cart/{cartId}": {
      "post": {
        "operationId": "CartCheckoutController_bulkAddSavedItemsToCart",
        "parameters": [
          {
            "name": "cartId",
            "required": true,
            "in": "path",
            "description": "Cart ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAddSavedItemsToCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Saved items added to cart successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add multiple saved items to cart",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/cart-checkout/health": {
      "get": {
        "operationId": "CartCheckoutController_healthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service health status"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Health check for cart and checkout services",
        "tags": [
          "Cart & Checkout"
        ]
      }
    },
    "/api/order-fulfillment/orders": {
      "post": {
        "description": "Create a new order from checkout, quote, or manual input",
        "operationId": "OrderFulfillmentController_createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid order data"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new order",
        "tags": [
          "Order Management & Fulfillment"
        ]
      },
      "get": {
        "description": "Get a paginated list of orders with filtering options",
        "operationId": "OrderFulfillmentController_listOrders",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "example": "PROCESSING",
              "type": "string",
              "enum": [
                "PENDING",
                "CONFIRMED",
                "PROCESSING",
                "PARTIALLY_SHIPPED",
                "SHIPPED",
                "DELIVERED",
                "CANCELLED",
                "RETURNED",
                "REFUNDED"
              ]
            }
          },
          {
            "name": "fulfillmentStatus",
            "required": false,
            "in": "query",
            "description": "Filter by fulfillment status",
            "schema": {
              "example": "PICKING",
              "type": "string",
              "enum": [
                "PENDING",
                "ALLOCATED",
                "PICKING",
                "PICKED",
                "PACKING",
                "PACKED",
                "SHIPPED",
                "COMPLETED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "paymentStatus",
            "required": false,
            "in": "query",
            "description": "Filter by payment status",
            "schema": {
              "example": "CAPTURED",
              "type": "string",
              "enum": [
                "PENDING",
                "AUTHORIZED",
                "CAPTURED",
                "FAILED",
                "REFUNDED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Filter by company ID",
            "schema": {
              "example": "uuid-company-id",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "uuid-user-id",
              "type": "string"
            }
          },
          {
            "name": "orderNumber",
            "required": false,
            "in": "query",
            "description": "Filter by order number",
            "schema": {
              "example": "HW-2024-000001",
              "type": "string"
            }
          },
          {
            "name": "purchaseOrderNumber",
            "required": false,
            "in": "query",
            "description": "Filter by purchase order number",
            "schema": {
              "example": "PO-2024-001",
              "type": "string"
            }
          },
          {
            "name": "createdAfter",
            "required": false,
            "in": "query",
            "description": "Filter orders created after date",
            "schema": {
              "example": "2024-08-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "createdBefore",
            "required": false,
            "in": "query",
            "description": "Filter orders created before date",
            "schema": {
              "example": "2024-08-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "rushOrder",
            "required": false,
            "in": "query",
            "description": "Filter rush orders",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "createdAt",
              "type": "string",
              "enum": [
                "createdAt",
                "orderNumber",
                "totalAmount",
                "status"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderListResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List orders",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/orders/{id}": {
      "get": {
        "description": "Retrieve detailed order information including items, fulfillments, and shipments",
        "operationId": "OrderFulfillmentController_getOrderById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get order by ID",
        "tags": [
          "Order Management & Fulfillment"
        ]
      },
      "put": {
        "description": "Update order details (limited to certain statuses)",
        "operationId": "OrderFulfillmentController_updateOrder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Order cannot be modified in current status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update order",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/orders/{id}/confirm": {
      "patch": {
        "description": "Confirm a pending order and make it ready for fulfillment",
        "operationId": "OrderFulfillmentController_confirmOrder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Order is not in pending status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Confirm order",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/orders/{id}/cancel": {
      "patch": {
        "description": "Cancel an order with a reason",
        "operationId": "OrderFulfillmentController_cancelOrder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Order cannot be cancelled in current status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel order",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/fulfillments": {
      "post": {
        "description": "Create a new fulfillment for confirmed orders",
        "operationId": "OrderFulfillmentController_createFulfillment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFulfillmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Fulfillment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Order must be confirmed before fulfillment"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create fulfillment",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/fulfillments/{id}/assign": {
      "patch": {
        "description": "Assign a fulfillment to a warehouse worker",
        "operationId": "OrderFulfillmentController_assignFulfillment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignFulfillmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fulfillment assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Fulfillment is not available for assignment"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Fulfillment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assign fulfillment",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/fulfillments/{id}/start": {
      "patch": {
        "description": "Start the picking process for an assigned fulfillment",
        "operationId": "OrderFulfillmentController_startFulfillment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fulfillment started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Fulfillment is not ready to start"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Fulfillment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Start fulfillment",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/shipments": {
      "post": {
        "description": "Create a new shipment for order items",
        "operationId": "OrderFulfillmentController_createShipment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShipmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shipment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order or fulfillment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create shipment",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/shipments/{id}/ship": {
      "patch": {
        "description": "Mark a shipment as shipped with tracking information",
        "operationId": "OrderFulfillmentController_markShipmentShipped",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shipment marked as shipped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Shipment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark shipment as shipped",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/invoices": {
      "post": {
        "description": "Generate an invoice for an order",
        "operationId": "OrderFulfillmentController_createInvoice",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create invoice",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/order-fulfillment/health": {
      "get": {
        "operationId": "OrderFulfillmentController_healthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module is healthy"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Health check for Order Management & Fulfillment module",
        "tags": [
          "Order Management & Fulfillment"
        ]
      }
    },
    "/api/analytics/overview": {
      "get": {
        "operationId": "AnalyticsController_getAnalyticsOverview",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics overview retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsOverviewDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get analytics overview",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/sessions": {
      "post": {
        "operationId": "AnalyticsController_createSession",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalyticsSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create analytics session",
        "tags": [
          "Analytics"
        ]
      },
      "get": {
        "operationId": "AnalyticsController_getSessions",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "required": false,
            "in": "query",
            "description": "Time granularity",
            "schema": {
              "type": "string",
              "enum": [
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sessions retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get analytics sessions",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/sessions/{sessionId}": {
      "put": {
        "operationId": "AnalyticsController_updateSession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnalyticsSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update analytics session",
        "tags": [
          "Analytics"
        ]
      },
      "get": {
        "operationId": "AnalyticsController_getSession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get analytics session",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/events": {
      "post": {
        "operationId": "AnalyticsController_createEvent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnalyticsEventDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsEventResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create analytics event",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/events/session/{sessionId}": {
      "get": {
        "operationId": "AnalyticsController_getEventsBySession",
        "parameters": [
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticsEventResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get events for session",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/events/type/{eventType}": {
      "get": {
        "operationId": "AnalyticsController_getEventsByType",
        "parameters": [
          {
            "name": "eventType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "required": false,
            "in": "query",
            "description": "Time granularity",
            "schema": {
              "type": "string",
              "enum": [
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get events by type",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/business-metrics": {
      "get": {
        "operationId": "AnalyticsController_getBusinessMetrics",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "required": false,
            "in": "query",
            "description": "Time granularity",
            "schema": {
              "type": "string",
              "enum": [
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Metric category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchantId",
            "required": false,
            "in": "query",
            "description": "Merchant ID filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Product ID filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "User ID filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business metrics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessMetricResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get business metrics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/business-metrics/calculate": {
      "post": {
        "operationId": "AnalyticsController_calculateBusinessMetrics",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics calculation started"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate business metrics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/metrics": {
      "post": {
        "operationId": "AnalyticsController_createMetric",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMetricDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metric created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create metric",
        "tags": [
          "Analytics"
        ]
      },
      "get": {
        "operationId": "AnalyticsController_getMetrics",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by metric type",
            "schema": {
              "type": "string",
              "enum": [
                "SALES_REVENUE",
                "ORDER_COUNT",
                "USER_REGISTRATIONS",
                "PRODUCT_VIEWS",
                "SEARCH_QUERIES",
                "CONVERSION_RATE",
                "CART_ABANDONMENT",
                "MERCHANT_PERFORMANCE",
                "INVENTORY_TURNOVER",
                "CUSTOMER_LIFETIME_VALUE",
                "AVERAGE_ORDER_VALUE",
                "FULFILLMENT_TIME",
                "SHIPPING_COST",
                "REFUND_RATE",
                "CUSTOMER_SATISFACTION"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isRealTime",
            "required": false,
            "in": "query",
            "description": "Filter by real-time status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "Filter by tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get metrics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/metrics/{metricId}": {
      "get": {
        "operationId": "AnalyticsController_getMetric",
        "parameters": [
          {
            "name": "metricId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metric retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get metric by ID",
        "tags": [
          "Analytics"
        ]
      },
      "put": {
        "operationId": "AnalyticsController_updateMetric",
        "parameters": [
          {
            "name": "metricId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMetricDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metric updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update metric",
        "tags": [
          "Analytics"
        ]
      },
      "delete": {
        "operationId": "AnalyticsController_deleteMetric",
        "parameters": [
          {
            "name": "metricId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metric deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete metric",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/metrics/{metricId}/data": {
      "get": {
        "operationId": "AnalyticsController_getMetricData",
        "parameters": [
          {
            "name": "metricId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "description": "Start date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "description": "End date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "required": false,
            "in": "query",
            "description": "Data granularity",
            "schema": {
              "type": "string",
              "enum": [
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR"
              ]
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "description": "Filter dimensions",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group by dimensions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metric data retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDataResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get metric data",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/metrics/data-points": {
      "post": {
        "operationId": "AnalyticsController_createDataPoint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataPointDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Data point created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPointResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create data point",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/metrics/calculate/{metricId}": {
      "post": {
        "operationId": "AnalyticsController_calculateMetric",
        "parameters": [
          {
            "name": "metricId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metric calculation started"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate metric",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/metrics/calculate-all": {
      "post": {
        "operationId": "AnalyticsController_calculateAllMetrics",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All metrics calculation started"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate all metrics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/dashboards": {
      "post": {
        "operationId": "AnalyticsController_createDashboard",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDashboardDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dashboard created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create dashboard",
        "tags": [
          "Analytics"
        ]
      },
      "get": {
        "operationId": "AnalyticsController_getDashboards",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by dashboard type",
            "schema": {
              "type": "string",
              "enum": [
                "EXECUTIVE",
                "SALES",
                "OPERATIONS",
                "MARKETING",
                "FINANCE",
                "MERCHANT",
                "CUSTOMER_SERVICE",
                "INVENTORY",
                "FULFILLMENT",
                "CUSTOM"
              ]
            }
          },
          {
            "name": "isPublic",
            "required": false,
            "in": "query",
            "description": "Filter by public status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTemplate",
            "required": false,
            "in": "query",
            "description": "Filter by template status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "Filter by tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownerId",
            "required": false,
            "in": "query",
            "description": "Filter by owner ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboards retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get dashboards",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/dashboards/templates": {
      "get": {
        "operationId": "AnalyticsController_getDashboardTemplates",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by dashboard type",
            "schema": {
              "type": "string",
              "enum": [
                "EXECUTIVE",
                "SALES",
                "OPERATIONS",
                "MARKETING",
                "FINANCE",
                "MERCHANT",
                "CUSTOMER_SERVICE",
                "INVENTORY",
                "FULFILLMENT",
                "CUSTOM"
              ]
            }
          },
          {
            "name": "isPublic",
            "required": false,
            "in": "query",
            "description": "Filter by public status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTemplate",
            "required": false,
            "in": "query",
            "description": "Filter by template status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "Filter by tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownerId",
            "required": false,
            "in": "query",
            "description": "Filter by owner ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Templates retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get dashboard templates",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/dashboards/{dashboardId}": {
      "get": {
        "operationId": "AnalyticsController_getDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardWithWidgetsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get dashboard by ID",
        "tags": [
          "Analytics"
        ]
      },
      "put": {
        "operationId": "AnalyticsController_updateDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dashboard updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update dashboard",
        "tags": [
          "Analytics"
        ]
      },
      "delete": {
        "operationId": "AnalyticsController_deleteDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete dashboard",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/dashboards/{dashboardId}/duplicate": {
      "post": {
        "operationId": "AnalyticsController_duplicateDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dashboard duplicated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Duplicate dashboard",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/dashboards/{dashboardId}/data": {
      "get": {
        "operationId": "AnalyticsController_getDashboardData",
        "parameters": [
          {
            "name": "dashboardId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WidgetDataDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get dashboard data",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/widgets": {
      "post": {
        "operationId": "AnalyticsController_createWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWidgetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Widget created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create widget",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/widgets/{widgetId}": {
      "put": {
        "operationId": "AnalyticsController_updateWidget",
        "parameters": [
          {
            "name": "widgetId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWidgetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Widget updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update widget",
        "tags": [
          "Analytics"
        ]
      },
      "delete": {
        "operationId": "AnalyticsController_deleteWidget",
        "parameters": [
          {
            "name": "widgetId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Widget deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete widget",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/widgets/{widgetId}/data": {
      "get": {
        "operationId": "AnalyticsController_getWidgetData",
        "parameters": [
          {
            "name": "widgetId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Widget data retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDataDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get widget data",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/reports": {
      "post": {
        "operationId": "AnalyticsController_createReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create report",
        "tags": [
          "Analytics"
        ]
      },
      "get": {
        "operationId": "AnalyticsController_getReports",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by report type",
            "schema": {
              "type": "string",
              "enum": [
                "SALES_REPORT",
                "INVENTORY_REPORT",
                "CUSTOMER_REPORT",
                "MERCHANT_REPORT",
                "PRODUCT_PERFORMANCE",
                "FINANCIAL_REPORT",
                "OPERATIONAL_REPORT",
                "MARKETING_REPORT",
                "EXECUTIVE_SUMMARY",
                "CUSTOM_REPORT"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "isScheduled",
            "required": false,
            "in": "query",
            "description": "Filter by scheduled status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdBy",
            "required": false,
            "in": "query",
            "description": "Filter by creator ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reports retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get reports",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/reports/{reportId}": {
      "get": {
        "operationId": "AnalyticsController_getReport",
        "parameters": [
          {
            "name": "reportId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get report by ID",
        "tags": [
          "Analytics"
        ]
      },
      "put": {
        "operationId": "AnalyticsController_updateReport",
        "parameters": [
          {
            "name": "reportId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReportDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update report",
        "tags": [
          "Analytics"
        ]
      },
      "delete": {
        "operationId": "AnalyticsController_deleteReport",
        "parameters": [
          {
            "name": "reportId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete report",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/reports/generate": {
      "post": {
        "operationId": "AnalyticsController_generateReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Report generation started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGenerationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate report",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/reports/schedules": {
      "post": {
        "operationId": "AnalyticsController_createSchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Schedule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create report schedule",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/reports/schedules/{scheduleId}": {
      "put": {
        "operationId": "AnalyticsController_updateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update report schedule",
        "tags": [
          "Analytics"
        ]
      },
      "delete": {
        "operationId": "AnalyticsController_deleteSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete report schedule",
        "tags": [
          "Analytics"
        ]
      }
    }
  },
  "info": {
    "title": "HardwareWorld API",
    "description": "Modern NestJS API with comprehensive features",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "users",
      "description": "User management endpoints"
    },
    {
      "name": "files",
      "description": "File management endpoints"
    },
    {
      "name": "websockets",
      "description": "WebSocket communication"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local Development"
    },
    {
      "url": "https://hardwareworld.tvxlabs.com",
      "description": "Production"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "Authorization",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "displayName": {
            "type": "object",
            "description": "User display name",
            "example": "John Doe"
          },
          "firstName": {
            "type": "object",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "object",
            "description": "User last name",
            "example": "Doe"
          },
          "phoneNumber": {
            "type": "object",
            "description": "User phone number",
            "example": "+1-555-0123"
          },
          "avatar": {
            "type": "object",
            "description": "URL to user avatar image",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether user account is active",
            "default": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether user email is verified",
            "default": false
          },
          "provider": {
            "type": "object",
            "description": "Authentication provider (local, google, github)",
            "example": "local"
          },
          "providerId": {
            "type": "object",
            "description": "ID from auth provider",
            "example": "123456789"
          },
          "jobTitle": {
            "type": "object",
            "description": "User job title",
            "example": "Procurement Manager"
          },
          "department": {
            "type": "object",
            "description": "Department user works in",
            "example": "Operations"
          },
          "approvalLimit": {
            "type": "object",
            "description": "Maximum order amount user can approve",
            "example": 50000
          },
          "idType": {
            "type": "string",
            "description": "Type of identification document",
            "enum": [
              "NRIC",
              "BRN",
              "PASSPORT",
              "ARMY"
            ],
            "example": "NRIC"
          },
          "idValue": {
            "type": "object",
            "description": "Identification document number",
            "example": "800101141234"
          },
          "roles": {
            "description": "User roles",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "companies": {
            "description": "Companies this user belongs to",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "merchants": {
            "description": "Merchants this user belongs to",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account last updated date"
          }
        },
        "required": [
          "id",
          "email",
          "isActive",
          "emailVerified",
          "roles",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "User display name",
            "example": "John Doe"
          },
          "avatar": {
            "type": "string",
            "description": "URL to avatar image",
            "example": "https://example.com/avatar.jpg"
          },
          "idType": {
            "type": "string",
            "description": "Type of identification document",
            "enum": [
              "NRIC",
              "BRN",
              "PASSPORT",
              "ARMY"
            ],
            "example": "NRIC"
          },
          "idValue": {
            "type": "string",
            "description": "Identification document number",
            "example": "800101141234"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "userId"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "description": "URL to avatar image"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RegisterResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "displayName": {
            "type": "object",
            "description": "User display name",
            "example": "John Doe"
          },
          "firstName": {
            "type": "object",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "object",
            "description": "User last name",
            "example": "Doe"
          },
          "phoneNumber": {
            "type": "object",
            "description": "User phone number",
            "example": "+1-555-0123"
          },
          "avatar": {
            "type": "object",
            "description": "URL to user avatar image",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether user account is active",
            "default": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether user email is verified",
            "default": false
          },
          "provider": {
            "type": "object",
            "description": "Authentication provider (local, google, github)",
            "example": "local"
          },
          "providerId": {
            "type": "object",
            "description": "ID from auth provider",
            "example": "123456789"
          },
          "jobTitle": {
            "type": "object",
            "description": "User job title",
            "example": "Procurement Manager"
          },
          "department": {
            "type": "object",
            "description": "Department user works in",
            "example": "Operations"
          },
          "approvalLimit": {
            "type": "object",
            "description": "Maximum order amount user can approve",
            "example": 50000
          },
          "idType": {
            "type": "string",
            "description": "Type of identification document",
            "enum": [
              "NRIC",
              "BRN",
              "PASSPORT",
              "ARMY"
            ],
            "example": "NRIC"
          },
          "idValue": {
            "type": "object",
            "description": "Identification document number",
            "example": "800101141234"
          },
          "roles": {
            "description": "User roles",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "companies": {
            "description": "Companies this user belongs to",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "merchants": {
            "description": "Merchants this user belongs to",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account last updated date"
          }
        },
        "required": [
          "id",
          "email",
          "isActive",
          "emailVerified",
          "roles",
          "createdAt",
          "updatedAt"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "refreshToken"
        ]
      },
      "RefreshTokenResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "SuccessResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "ProfileResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "displayName": {
            "type": "object",
            "description": "User display name",
            "example": "John Doe"
          },
          "firstName": {
            "type": "object",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "object",
            "description": "User last name",
            "example": "Doe"
          },
          "phoneNumber": {
            "type": "object",
            "description": "User phone number",
            "example": "+1-555-0123"
          },
          "avatar": {
            "type": "object",
            "description": "URL to user avatar image",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether user account is active",
            "default": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether user email is verified",
            "default": false
          },
          "provider": {
            "type": "object",
            "description": "Authentication provider (local, google, github)",
            "example": "local"
          },
          "providerId": {
            "type": "object",
            "description": "ID from auth provider",
            "example": "123456789"
          },
          "jobTitle": {
            "type": "object",
            "description": "User job title",
            "example": "Procurement Manager"
          },
          "department": {
            "type": "object",
            "description": "Department user works in",
            "example": "Operations"
          },
          "approvalLimit": {
            "type": "object",
            "description": "Maximum order amount user can approve",
            "example": 50000
          },
          "idType": {
            "type": "string",
            "description": "Type of identification document",
            "enum": [
              "NRIC",
              "BRN",
              "PASSPORT",
              "ARMY"
            ],
            "example": "NRIC"
          },
          "idValue": {
            "type": "object",
            "description": "Identification document number",
            "example": "800101141234"
          },
          "roles": {
            "description": "User roles",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "companies": {
            "description": "Companies this user belongs to",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "merchants": {
            "description": "Merchants this user belongs to",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account last updated date"
          }
        },
        "required": [
          "id",
          "email",
          "isActive",
          "emailVerified",
          "roles",
          "createdAt",
          "updatedAt"
        ]
      },
      "VerifyEmailResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ForgotPasswordResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "token",
          "password"
        ]
      },
      "ResetPasswordResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success"
        ]
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Notification title"
          },
          "message": {
            "type": "string",
            "description": "Notification message"
          },
          "data": {
            "type": "object",
            "description": "Additional data payload"
          },
          "channel": {
            "type": "string",
            "enum": [
              "EMAIL",
              "IN_APP",
              "SMS",
              "PUSH",
              "WEBHOOK"
            ],
            "description": "Notification channel"
          },
          "category": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ORDER",
              "INVENTORY",
              "MERCHANT",
              "USER",
              "SECURITY",
              "PROMOTION",
              "REMINDER",
              "ALERT"
            ],
            "description": "Notification category"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT"
            ],
            "description": "Notification priority"
          },
          "recipientId": {
            "type": "string",
            "description": "Recipient user ID"
          },
          "recipientEmail": {
            "type": "string",
            "description": "Recipient email (for external notifications)"
          },
          "recipientPhone": {
            "type": "string",
            "description": "Recipient phone (for SMS notifications)"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID to use"
          },
          "eventId": {
            "type": "string",
            "description": "Associated event ID"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "USER_REGISTERED",
              "USER_LOGIN",
              "USER_LOGOUT",
              "ORDER_CREATED",
              "ORDER_CONFIRMED",
              "ORDER_SHIPPED",
              "ORDER_DELIVERED",
              "ORDER_CANCELLED",
              "PAYMENT_PROCESSED",
              "PAYMENT_FAILED",
              "INVENTORY_LOW",
              "INVENTORY_OUT",
              "PRODUCT_CREATED",
              "PRODUCT_UPDATED",
              "PRODUCT_APPROVED",
              "PRODUCT_REJECTED",
              "MERCHANT_APPLIED",
              "MERCHANT_APPROVED",
              "MERCHANT_REJECTED",
              "QUOTE_REQUESTED",
              "QUOTE_SUBMITTED",
              "RFQ_CREATED",
              "RFQ_RESPONDED",
              "CART_ABANDONED",
              "PRICE_CHANGED",
              "SYSTEM_ERROR",
              "SECURITY_BREACH"
            ],
            "description": "Event type"
          },
          "scheduledFor": {
            "type": "string",
            "description": "Schedule notification for later"
          },
          "expiresAt": {
            "type": "string",
            "description": "Notification expiration time"
          },
          "groupId": {
            "type": "string",
            "description": "Group ID for related notifications"
          }
        },
        "required": [
          "title",
          "message",
          "channel",
          "category"
        ]
      },
      "NotificationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Notification ID"
          },
          "title": {
            "type": "string",
            "description": "Notification title"
          },
          "message": {
            "type": "string",
            "description": "Notification message"
          },
          "data": {
            "type": "object",
            "description": "Additional data payload"
          },
          "channel": {
            "type": "string",
            "enum": [
              "EMAIL",
              "IN_APP",
              "SMS",
              "PUSH",
              "WEBHOOK"
            ],
            "description": "Notification channel"
          },
          "category": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ORDER",
              "INVENTORY",
              "MERCHANT",
              "USER",
              "SECURITY",
              "PROMOTION",
              "REMINDER",
              "ALERT"
            ],
            "description": "Notification category"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT"
            ],
            "description": "Notification priority"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SENT",
              "DELIVERED",
              "READ",
              "FAILED",
              "CANCELLED"
            ],
            "description": "Notification status"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "When notification was sent"
          },
          "deliveredAt": {
            "format": "date-time",
            "type": "string",
            "description": "When notification was delivered"
          },
          "readAt": {
            "format": "date-time",
            "type": "string",
            "description": "When notification was read"
          },
          "failureReason": {
            "type": "string",
            "description": "Failure reason if failed"
          },
          "retryCount": {
            "type": "number",
            "description": "Retry count"
          },
          "recipientId": {
            "type": "string",
            "description": "Recipient user ID"
          },
          "recipientEmail": {
            "type": "string",
            "description": "Recipient email"
          },
          "recipientPhone": {
            "type": "string",
            "description": "Recipient phone"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID"
          },
          "eventId": {
            "type": "string",
            "description": "Event ID"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "USER_REGISTERED",
              "USER_LOGIN",
              "USER_LOGOUT",
              "ORDER_CREATED",
              "ORDER_CONFIRMED",
              "ORDER_SHIPPED",
              "ORDER_DELIVERED",
              "ORDER_CANCELLED",
              "PAYMENT_PROCESSED",
              "PAYMENT_FAILED",
              "INVENTORY_LOW",
              "INVENTORY_OUT",
              "PRODUCT_CREATED",
              "PRODUCT_UPDATED",
              "PRODUCT_APPROVED",
              "PRODUCT_REJECTED",
              "MERCHANT_APPLIED",
              "MERCHANT_APPROVED",
              "MERCHANT_REJECTED",
              "QUOTE_REQUESTED",
              "QUOTE_SUBMITTED",
              "RFQ_CREATED",
              "RFQ_RESPONDED",
              "CART_ABANDONED",
              "PRICE_CHANGED",
              "SYSTEM_ERROR",
              "SECURITY_BREACH"
            ],
            "description": "Event type"
          },
          "scheduledFor": {
            "format": "date-time",
            "type": "string",
            "description": "Scheduled time"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration time"
          },
          "groupId": {
            "type": "string",
            "description": "Group ID"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "title",
          "message",
          "channel",
          "category",
          "priority",
          "status",
          "retryCount",
          "createdAt",
          "updatedAt"
        ]
      },
      "NotificationListResponseDto": {
        "type": "object",
        "properties": {
          "notifications": {
            "description": "List of notifications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Page size"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "notifications",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "UpdateNotificationDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SENT",
              "DELIVERED",
              "READ",
              "FAILED",
              "CANCELLED"
            ],
            "description": "Update notification status"
          },
          "markAsRead": {
            "type": "boolean",
            "description": "Mark as read"
          }
        }
      },
      "BulkNotificationDto": {
        "type": "object",
        "properties": {
          "recipientIds": {
            "description": "Recipient IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "description": "Notification title"
          },
          "message": {
            "type": "string",
            "description": "Notification message"
          },
          "data": {
            "type": "object",
            "description": "Additional data payload"
          },
          "channel": {
            "type": "string",
            "enum": [
              "EMAIL",
              "IN_APP",
              "SMS",
              "PUSH",
              "WEBHOOK"
            ],
            "description": "Notification channel"
          },
          "category": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ORDER",
              "INVENTORY",
              "MERCHANT",
              "USER",
              "SECURITY",
              "PROMOTION",
              "REMINDER",
              "ALERT"
            ],
            "description": "Notification category"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT"
            ],
            "description": "Notification priority"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID to use"
          }
        },
        "required": [
          "recipientIds",
          "title",
          "message",
          "channel",
          "category"
        ]
      },
      "CreateTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name/identifier"
          },
          "type": {
            "type": "string",
            "enum": [
              "WELCOME",
              "VERIFICATION",
              "PASSWORD_RESET",
              "ORDER_CONFIRMATION",
              "ORDER_SHIPPED",
              "ORDER_DELIVERED",
              "ORDER_CANCELLED",
              "INVOICE_READY",
              "PAYMENT_RECEIVED",
              "PAYMENT_FAILED",
              "MERCHANT_APPROVED",
              "MERCHANT_REJECTED",
              "PRODUCT_APPROVED",
              "PRODUCT_REJECTED",
              "LOW_STOCK_ALERT",
              "PRICE_CHANGE",
              "QUOTE_REQUEST",
              "QUOTE_RECEIVED",
              "RFQ_SUBMITTED",
              "RFQ_RESPONSE",
              "CART_ABANDONED",
              "BULK_ORDER_READY",
              "SHIPMENT_DELAYED",
              "APPROVAL_REQUIRED",
              "APPROVAL_GRANTED",
              "APPROVAL_DENIED",
              "SYSTEM_MAINTENANCE",
              "SECURITY_ALERT"
            ],
            "description": "Template type"
          },
          "category": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ORDER",
              "INVENTORY",
              "MERCHANT",
              "USER",
              "SECURITY",
              "PROMOTION",
              "REMINDER",
              "ALERT"
            ],
            "description": "Template category"
          },
          "subject": {
            "type": "string",
            "description": "Email subject template"
          },
          "bodyText": {
            "type": "string",
            "description": "Plain text body template"
          },
          "bodyHtml": {
            "type": "string",
            "description": "HTML body template"
          },
          "variables": {
            "type": "object",
            "description": "Available template variables"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "isActive": {
            "type": "boolean",
            "description": "Template active status"
          }
        },
        "required": [
          "name",
          "type",
          "category",
          "subject",
          "bodyText",
          "bodyHtml"
        ]
      },
      "TemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Template ID"
          },
          "name": {
            "type": "string",
            "description": "Template name/identifier"
          },
          "type": {
            "type": "string",
            "enum": [
              "WELCOME",
              "VERIFICATION",
              "PASSWORD_RESET",
              "ORDER_CONFIRMATION",
              "ORDER_SHIPPED",
              "ORDER_DELIVERED",
              "ORDER_CANCELLED",
              "INVOICE_READY",
              "PAYMENT_RECEIVED",
              "PAYMENT_FAILED",
              "MERCHANT_APPROVED",
              "MERCHANT_REJECTED",
              "PRODUCT_APPROVED",
              "PRODUCT_REJECTED",
              "LOW_STOCK_ALERT",
              "PRICE_CHANGE",
              "QUOTE_REQUEST",
              "QUOTE_RECEIVED",
              "RFQ_SUBMITTED",
              "RFQ_RESPONSE",
              "CART_ABANDONED",
              "BULK_ORDER_READY",
              "SHIPMENT_DELAYED",
              "APPROVAL_REQUIRED",
              "APPROVAL_GRANTED",
              "APPROVAL_DENIED",
              "SYSTEM_MAINTENANCE",
              "SECURITY_ALERT"
            ],
            "description": "Template type"
          },
          "category": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ORDER",
              "INVENTORY",
              "MERCHANT",
              "USER",
              "SECURITY",
              "PROMOTION",
              "REMINDER",
              "ALERT"
            ],
            "description": "Template category"
          },
          "subject": {
            "type": "string",
            "description": "Email subject template"
          },
          "bodyText": {
            "type": "string",
            "description": "Plain text body template"
          },
          "bodyHtml": {
            "type": "string",
            "description": "HTML body template"
          },
          "variables": {
            "type": "object",
            "description": "Available template variables"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "isActive": {
            "type": "boolean",
            "description": "Template active status"
          },
          "version": {
            "type": "number",
            "description": "Template version"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "category",
          "subject",
          "bodyText",
          "bodyHtml",
          "isActive",
          "version",
          "createdAt",
          "updatedAt"
        ]
      },
      "TemplateListResponseDto": {
        "type": "object",
        "properties": {
          "templates": {
            "description": "List of templates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Page size"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "templates",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "UpdateTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name/identifier"
          },
          "subject": {
            "type": "string",
            "description": "Email subject template"
          },
          "bodyText": {
            "type": "string",
            "description": "Plain text body template"
          },
          "bodyHtml": {
            "type": "string",
            "description": "HTML body template"
          },
          "variables": {
            "type": "object",
            "description": "Available template variables"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "isActive": {
            "type": "boolean",
            "description": "Template active status"
          }
        }
      },
      "RenderTemplateDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Template data/variables"
          }
        },
        "required": [
          "data"
        ]
      },
      "RenderedTemplateDto": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Rendered subject"
          },
          "bodyText": {
            "type": "string",
            "description": "Rendered plain text body"
          },
          "bodyHtml": {
            "type": "string",
            "description": "Rendered HTML body"
          }
        },
        "required": [
          "subject",
          "bodyText",
          "bodyHtml"
        ]
      },
      "PreferenceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Preference ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "category": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ORDER",
              "INVENTORY",
              "MERCHANT",
              "USER",
              "SECURITY",
              "PROMOTION",
              "REMINDER",
              "ALERT"
            ],
            "description": "Notification category"
          },
          "channels": {
            "type": "array",
            "description": "Preferred channels",
            "items": {
              "type": "string",
              "enum": [
                "EMAIL",
                "IN_APP",
                "SMS",
                "PUSH",
                "WEBHOOK"
              ]
            }
          },
          "emailEnabled": {
            "type": "boolean",
            "description": "Email notifications enabled"
          },
          "smsEnabled": {
            "type": "boolean",
            "description": "SMS notifications enabled"
          },
          "pushEnabled": {
            "type": "boolean",
            "description": "Push notifications enabled"
          },
          "inAppEnabled": {
            "type": "boolean",
            "description": "In-app notifications enabled"
          },
          "quietHoursStart": {
            "type": "string",
            "description": "Quiet hours start time"
          },
          "quietHoursEnd": {
            "type": "string",
            "description": "Quiet hours end time"
          },
          "timezone": {
            "type": "string",
            "description": "User timezone"
          },
          "emailDigest": {
            "type": "boolean",
            "description": "Email digest enabled"
          },
          "digestFrequency": {
            "type": "string",
            "description": "Digest frequency"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "userId",
          "category",
          "channels",
          "emailEnabled",
          "smsEnabled",
          "pushEnabled",
          "inAppEnabled",
          "emailDigest",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreatePreferenceDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ORDER",
              "INVENTORY",
              "MERCHANT",
              "USER",
              "SECURITY",
              "PROMOTION",
              "REMINDER",
              "ALERT"
            ],
            "description": "Notification category"
          },
          "channels": {
            "type": "array",
            "description": "Preferred channels",
            "items": {
              "type": "string",
              "enum": [
                "EMAIL",
                "IN_APP",
                "SMS",
                "PUSH",
                "WEBHOOK"
              ]
            }
          },
          "emailEnabled": {
            "type": "boolean",
            "description": "Enable email notifications"
          },
          "smsEnabled": {
            "type": "boolean",
            "description": "Enable SMS notifications"
          },
          "pushEnabled": {
            "type": "boolean",
            "description": "Enable push notifications"
          },
          "inAppEnabled": {
            "type": "boolean",
            "description": "Enable in-app notifications"
          },
          "quietHoursStart": {
            "type": "string",
            "description": "Quiet hours start time (HH:mm format)"
          },
          "quietHoursEnd": {
            "type": "string",
            "description": "Quiet hours end time (HH:mm format)"
          },
          "timezone": {
            "type": "string",
            "description": "User timezone"
          },
          "emailDigest": {
            "type": "boolean",
            "description": "Receive email digest instead of individual emails"
          },
          "digestFrequency": {
            "type": "string",
            "description": "Digest frequency (daily, weekly)"
          }
        },
        "required": [
          "category",
          "channels"
        ]
      },
      "UpdatePreferenceDto": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "description": "Preferred channels",
            "items": {
              "type": "string",
              "enum": [
                "EMAIL",
                "IN_APP",
                "SMS",
                "PUSH",
                "WEBHOOK"
              ]
            }
          },
          "emailEnabled": {
            "type": "boolean",
            "description": "Enable email notifications"
          },
          "smsEnabled": {
            "type": "boolean",
            "description": "Enable SMS notifications"
          },
          "pushEnabled": {
            "type": "boolean",
            "description": "Enable push notifications"
          },
          "inAppEnabled": {
            "type": "boolean",
            "description": "Enable in-app notifications"
          },
          "quietHoursStart": {
            "type": "string",
            "description": "Quiet hours start time (HH:mm format)"
          },
          "quietHoursEnd": {
            "type": "string",
            "description": "Quiet hours end time (HH:mm format)"
          },
          "timezone": {
            "type": "string",
            "description": "User timezone"
          },
          "emailDigest": {
            "type": "boolean",
            "description": "Receive email digest instead of individual emails"
          },
          "digestFrequency": {
            "type": "string",
            "description": "Digest frequency (daily, weekly)"
          }
        }
      },
      "BulkPreferenceUpdateDto": {
        "type": "object",
        "properties": {
          "preferences": {
            "description": "Array of preference updates by category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdatePreferenceDto"
            }
          }
        },
        "required": [
          "preferences"
        ]
      },
      "CreateEventDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "USER_REGISTERED",
              "USER_LOGIN",
              "USER_LOGOUT",
              "ORDER_CREATED",
              "ORDER_CONFIRMED",
              "ORDER_SHIPPED",
              "ORDER_DELIVERED",
              "ORDER_CANCELLED",
              "PAYMENT_PROCESSED",
              "PAYMENT_FAILED",
              "INVENTORY_LOW",
              "INVENTORY_OUT",
              "PRODUCT_CREATED",
              "PRODUCT_UPDATED",
              "PRODUCT_APPROVED",
              "PRODUCT_REJECTED",
              "MERCHANT_APPLIED",
              "MERCHANT_APPROVED",
              "MERCHANT_REJECTED",
              "QUOTE_REQUESTED",
              "QUOTE_SUBMITTED",
              "RFQ_CREATED",
              "RFQ_RESPONDED",
              "CART_ABANDONED",
              "PRICE_CHANGED",
              "SYSTEM_ERROR",
              "SECURITY_BREACH"
            ],
            "description": "Event type"
          },
          "title": {
            "type": "string",
            "description": "Event title"
          },
          "description": {
            "type": "string",
            "description": "Event description"
          },
          "data": {
            "type": "object",
            "description": "Event-specific data"
          },
          "userId": {
            "type": "string",
            "description": "User who triggered the event"
          },
          "merchantId": {
            "type": "string",
            "description": "Related merchant ID"
          },
          "orderId": {
            "type": "string",
            "description": "Related order ID"
          },
          "productId": {
            "type": "string",
            "description": "Related product ID"
          },
          "severity": {
            "type": "string",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT"
            ],
            "description": "Event severity"
          },
          "source": {
            "type": "string",
            "description": "System component that generated the event"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          },
          "userAgent": {
            "type": "string",
            "description": "User agent"
          }
        },
        "required": [
          "type",
          "title"
        ]
      },
      "EventResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Event ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "USER_REGISTERED",
              "USER_LOGIN",
              "USER_LOGOUT",
              "ORDER_CREATED",
              "ORDER_CONFIRMED",
              "ORDER_SHIPPED",
              "ORDER_DELIVERED",
              "ORDER_CANCELLED",
              "PAYMENT_PROCESSED",
              "PAYMENT_FAILED",
              "INVENTORY_LOW",
              "INVENTORY_OUT",
              "PRODUCT_CREATED",
              "PRODUCT_UPDATED",
              "PRODUCT_APPROVED",
              "PRODUCT_REJECTED",
              "MERCHANT_APPLIED",
              "MERCHANT_APPROVED",
              "MERCHANT_REJECTED",
              "QUOTE_REQUESTED",
              "QUOTE_SUBMITTED",
              "RFQ_CREATED",
              "RFQ_RESPONDED",
              "CART_ABANDONED",
              "PRICE_CHANGED",
              "SYSTEM_ERROR",
              "SECURITY_BREACH"
            ],
            "description": "Event type"
          },
          "title": {
            "type": "string",
            "description": "Event title"
          },
          "description": {
            "type": "string",
            "description": "Event description"
          },
          "data": {
            "type": "object",
            "description": "Event-specific data"
          },
          "userId": {
            "type": "string",
            "description": "User who triggered the event"
          },
          "merchantId": {
            "type": "string",
            "description": "Related merchant ID"
          },
          "orderId": {
            "type": "string",
            "description": "Related order ID"
          },
          "productId": {
            "type": "string",
            "description": "Related product ID"
          },
          "severity": {
            "type": "string",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT"
            ],
            "description": "Event severity"
          },
          "source": {
            "type": "string",
            "description": "System component that generated the event"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          },
          "userAgent": {
            "type": "string",
            "description": "User agent"
          },
          "processed": {
            "type": "boolean",
            "description": "Event processed status"
          },
          "processedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When event was processed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "type",
          "title",
          "severity",
          "processed",
          "createdAt"
        ]
      },
      "EventListResponseDto": {
        "type": "object",
        "properties": {
          "events": {
            "description": "List of events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Page size"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "events",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "EventStatsDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total events"
          },
          "byType": {
            "type": "object",
            "description": "Events by type"
          },
          "bySeverity": {
            "type": "object",
            "description": "Events by severity"
          },
          "processed": {
            "type": "number",
            "description": "Processed events"
          },
          "unprocessed": {
            "type": "number",
            "description": "Unprocessed events"
          },
          "last24Hours": {
            "type": "number",
            "description": "Events in last 24 hours"
          },
          "last7Days": {
            "type": "number",
            "description": "Events in last 7 days"
          },
          "last30Days": {
            "type": "number",
            "description": "Events in last 30 days"
          }
        },
        "required": [
          "total",
          "byType",
          "bySeverity",
          "processed",
          "unprocessed",
          "last24Hours",
          "last7Days",
          "last30Days"
        ]
      },
      "QueueEmailDto": {
        "type": "object",
        "properties": {
          "fromEmail": {
            "type": "string",
            "description": "From email address"
          },
          "fromName": {
            "type": "string",
            "description": "From name"
          },
          "toEmail": {
            "type": "string",
            "description": "To email address"
          },
          "toName": {
            "type": "string",
            "description": "To name"
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "bodyText": {
            "type": "string",
            "description": "Plain text body"
          },
          "bodyHtml": {
            "type": "string",
            "description": "HTML body"
          },
          "ccEmails": {
            "description": "CC email addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bccEmails": {
            "description": "BCC email addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attachments": {
            "description": "Email attachments",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "notificationId": {
            "type": "string",
            "description": "Related notification ID"
          },
          "scheduledFor": {
            "type": "string",
            "description": "Schedule email for later"
          },
          "expiresAt": {
            "type": "string",
            "description": "Email expiration time"
          }
        },
        "required": [
          "fromEmail",
          "toEmail",
          "subject",
          "bodyText"
        ]
      },
      "EmailQueueResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Email queue ID"
          },
          "fromEmail": {
            "type": "string",
            "description": "From email address"
          },
          "fromName": {
            "type": "string",
            "description": "From name"
          },
          "toEmail": {
            "type": "string",
            "description": "To email address"
          },
          "toName": {
            "type": "string",
            "description": "To name"
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "bodyText": {
            "type": "string",
            "description": "Plain text body"
          },
          "bodyHtml": {
            "type": "string",
            "description": "HTML body"
          },
          "ccEmails": {
            "description": "CC email addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bccEmails": {
            "description": "BCC email addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attachments": {
            "description": "Email attachments",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SENT",
              "DELIVERED",
              "READ",
              "FAILED",
              "CANCELLED"
            ],
            "description": "Email status"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "When email was sent"
          },
          "deliveredAt": {
            "format": "date-time",
            "type": "string",
            "description": "When email was delivered"
          },
          "openedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When email was opened"
          },
          "clickedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When email was clicked"
          },
          "bouncedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When email bounced"
          },
          "failureReason": {
            "type": "string",
            "description": "Failure reason if failed"
          },
          "retryCount": {
            "type": "number",
            "description": "Retry count"
          },
          "maxRetries": {
            "type": "number",
            "description": "Maximum retries"
          },
          "notificationId": {
            "type": "string",
            "description": "Related notification ID"
          },
          "scheduledFor": {
            "format": "date-time",
            "type": "string",
            "description": "Scheduled time"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration time"
          },
          "provider": {
            "type": "string",
            "description": "Email provider"
          },
          "providerId": {
            "type": "string",
            "description": "Provider message ID"
          },
          "providerData": {
            "type": "object",
            "description": "Provider-specific data"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "fromEmail",
          "toEmail",
          "subject",
          "bodyText",
          "status",
          "retryCount",
          "maxRetries",
          "createdAt",
          "updatedAt"
        ]
      },
      "EmailQueueListResponseDto": {
        "type": "object",
        "properties": {
          "emails": {
            "description": "List of queued emails",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailQueueResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Page size"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "emails",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "EmailStatsDto": {
        "type": "object",
        "properties": {
          "totalSent": {
            "type": "number",
            "description": "Total emails sent"
          },
          "delivered": {
            "type": "number",
            "description": "Emails delivered"
          },
          "opened": {
            "type": "number",
            "description": "Emails opened"
          },
          "clicked": {
            "type": "number",
            "description": "Emails clicked"
          },
          "bounced": {
            "type": "number",
            "description": "Emails bounced"
          },
          "failed": {
            "type": "number",
            "description": "Emails failed"
          },
          "deliveryRate": {
            "type": "number",
            "description": "Delivery rate (%)"
          },
          "openRate": {
            "type": "number",
            "description": "Open rate (%)"
          },
          "clickRate": {
            "type": "number",
            "description": "Click rate (%)"
          },
          "bounceRate": {
            "type": "number",
            "description": "Bounce rate (%)"
          }
        },
        "required": [
          "totalSent",
          "delivered",
          "opened",
          "clicked",
          "bounced",
          "failed",
          "deliveryRate",
          "openRate",
          "clickRate",
          "bounceRate"
        ]
      },
      "CreatePresignedUrlDto": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          }
        },
        "required": [
          "filename",
          "mimetype"
        ]
      },
      "PresignedUrlResponseDto": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "presignedUrl": {
            "type": "string"
          },
          "expiresIn": {
            "type": "number"
          }
        },
        "required": [
          "fileId",
          "key",
          "presignedUrl",
          "expiresIn"
        ]
      },
      "ConfirmUploadDto": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string"
          }
        },
        "required": [
          "fileId"
        ]
      },
      "MerchantApplicationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Merchant business name",
            "example": "TechParts Supplier Inc."
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the merchant",
            "example": "TechParts Supplier"
          },
          "description": {
            "type": "string",
            "description": "Business description",
            "example": "Premium electronic components supplier"
          },
          "businessType": {
            "type": "string",
            "description": "Type of business",
            "example": "distributor"
          },
          "contactEmail": {
            "type": "string",
            "description": "Business contact email",
            "example": "admin@techparts.com"
          },
          "contactPhone": {
            "type": "string",
            "description": "Business contact phone",
            "example": "+1-555-0200"
          },
          "website": {
            "type": "string",
            "description": "Business website",
            "example": "https://techparts.com"
          },
          "addressLine1": {
            "type": "string",
            "description": "Primary business address line 1",
            "example": "456 Supplier Blvd"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 200"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "San Francisco"
          },
          "state": {
            "type": "string",
            "description": "State/Province",
            "example": "CA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal/ZIP code",
            "example": "94105"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "USA"
          },
          "taxId": {
            "type": "string",
            "description": "Tax identification number",
            "example": "TECH789123456"
          },
          "registrationNumber": {
            "type": "string",
            "description": "Business registration number",
            "example": "REG123456789"
          },
          "minimumOrderValue": {
            "type": "number",
            "description": "Minimum order value",
            "example": 100
          },
          "shippingPolicy": {
            "type": "string",
            "description": "Shipping policy summary"
          },
          "returnPolicy": {
            "type": "string",
            "description": "Return policy summary"
          },
          "tin": {
            "type": "string",
            "description": "Tax Identification Number for e-invoicing",
            "example": "TIN123456789"
          },
          "idType": {
            "type": "string",
            "description": "Type of identification document",
            "enum": [
              "NRIC",
              "BRN",
              "PASSPORT",
              "ARMY"
            ],
            "example": "BRN"
          },
          "idValue": {
            "type": "string",
            "description": "Identification document number",
            "example": "201501012345"
          },
          "eInvoiceOptIn": {
            "type": "boolean",
            "description": "Opt-in for e-invoice submission",
            "default": false
          }
        },
        "required": [
          "name",
          "businessType",
          "contactEmail",
          "addressLine1",
          "city",
          "state",
          "postalCode",
          "country",
          "taxId"
        ]
      },
      "MerchantApplicationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Application ID"
          },
          "status": {
            "type": "string",
            "description": "Application status"
          },
          "submittedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Application submission date"
          },
          "message": {
            "type": "string",
            "description": "Next steps message"
          },
          "requiredDocuments": {
            "description": "Required documents list",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "status",
          "submittedAt",
          "message",
          "requiredDocuments"
        ]
      },
      "CheckApplicationStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Application ID"
          },
          "businessName": {
            "type": "string",
            "description": "Business name"
          },
          "status": {
            "type": "string",
            "description": "Current status"
          },
          "statusMessage": {
            "type": "string",
            "description": "Status description"
          },
          "submittedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Submitted date"
          },
          "lastUpdated": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated date"
          },
          "processedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Approval/rejection date"
          },
          "estimatedCompletion": {
            "type": "string",
            "description": "Estimated completion date"
          },
          "notes": {
            "type": "string",
            "description": "Admin notes or rejection reason"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Rejection reason"
          },
          "nextSteps": {
            "description": "Next steps for the applicant",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "description": "Required documents checklist",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "applicationData": {
            "type": "object",
            "description": "Complete application data for editing"
          },
          "canEdit": {
            "type": "boolean",
            "description": "Whether application can be edited"
          }
        },
        "required": [
          "id",
          "businessName",
          "status",
          "statusMessage",
          "submittedAt",
          "lastUpdated",
          "nextSteps",
          "documents",
          "applicationData",
          "canEdit"
        ]
      },
      "MerchantDocumentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID this document belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "file": {
            "type": "object",
            "description": "File information",
            "example": {
              "id": "550e8400-e29b-41d4-a716-446655440000",
              "filename": "ssm-certificate.pdf",
              "mimetype": "application/pdf",
              "size": 1024000,
              "url": "https://storage.example.com/files/ssm-certificate.pdf"
            }
          },
          "documentType": {
            "type": "string",
            "description": "Type of document",
            "enum": [
              "SSM",
              "BUSINESS_LICENSE",
              "TAX_CERTIFICATE",
              "BANK_STATEMENT",
              "INSURANCE_CERTIFICATE",
              "MEMORANDUM_ARTICLES",
              "FORM_24",
              "FORM_44",
              "OTHER"
            ]
          },
          "description": {
            "type": "string",
            "description": "Document description"
          },
          "status": {
            "type": "string",
            "description": "Document verification status",
            "enum": [
              "PENDING",
              "VERIFIED",
              "REJECTED",
              "EXPIRED",
              "RESUBMISSION"
            ]
          },
          "verifiedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the document was verified"
          },
          "verifiedBy": {
            "type": "string",
            "description": "User ID who verified the document"
          },
          "notes": {
            "type": "string",
            "description": "Admin notes about the document"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the document was uploaded"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the document was last updated"
          }
        },
        "required": [
          "id",
          "merchantId",
          "file",
          "documentType",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "MerchantDocumentsListDto": {
        "type": "object",
        "properties": {
          "documents": {
            "description": "List of merchant documents",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantDocumentDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of documents",
            "example": 5
          }
        },
        "required": [
          "documents",
          "total"
        ]
      },
      "CreateMerchantDocumentDto": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "ID of the uploaded file",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "documentType": {
            "type": "string",
            "description": "Type of document being uploaded",
            "enum": [
              "SSM",
              "BUSINESS_LICENSE",
              "TAX_CERTIFICATE",
              "BANK_STATEMENT",
              "INSURANCE_CERTIFICATE",
              "MEMORANDUM_ARTICLES",
              "FORM_24",
              "FORM_44",
              "OTHER"
            ],
            "example": "SSM"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the document",
            "example": "Company registration certificate from SSM"
          }
        },
        "required": [
          "fileId",
          "documentType"
        ]
      },
      "MerchantListDto": {
        "type": "object",
        "properties": {
          "merchants": {
            "description": "List of merchants",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "type": "object",
            "description": "Pagination info"
          }
        },
        "required": [
          "merchants",
          "pagination"
        ]
      },
      "MerchantApprovalDto": {
        "type": "object",
        "properties": {
          "approvalNotes": {
            "type": "string",
            "description": "Approval notes from admin",
            "example": "All documents verified and business credentials confirmed.",
            "minLength": 10,
            "maxLength": 1000
          },
          "conditionalApproval": {
            "type": "boolean",
            "description": "Whether this is a conditional approval with restrictions",
            "example": false,
            "default": false
          },
          "restrictions": {
            "description": "List of restrictions or conditions for approval",
            "example": [
              "Limited to electronics category",
              "Maximum 100 products initially"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "approvalDate": {
            "format": "date-time",
            "type": "string",
            "description": "Approval effective date (defaults to now)",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "approvalNotes"
        ]
      },
      "MerchantProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Merchant ID"
          },
          "name": {
            "type": "string",
            "description": "Merchant business name"
          },
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "type": "string",
            "description": "Business description"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo URL"
          },
          "businessType": {
            "type": "string",
            "description": "Business type"
          },
          "taxId": {
            "type": "string",
            "description": "Tax ID"
          },
          "registrationNumber": {
            "type": "string",
            "description": "Registration number"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone"
          },
          "website": {
            "type": "string",
            "description": "Website"
          },
          "address": {
            "type": "object",
            "description": "Full address"
          },
          "settings": {
            "type": "object",
            "description": "Business settings"
          },
          "tin": {
            "type": "string",
            "description": "Tax Identification Number for e-invoicing",
            "example": "TIN123456789"
          },
          "idType": {
            "type": "string",
            "description": "Type of identification document",
            "enum": [
              "NRIC",
              "BRN",
              "PASSPORT",
              "ARMY"
            ],
            "example": "BRN"
          },
          "idValue": {
            "type": "string",
            "description": "Identification document number",
            "example": "201501012345"
          },
          "eInvoiceOptIn": {
            "type": "boolean",
            "description": "E-invoice submission opt-in status",
            "default": false
          },
          "status": {
            "type": "string",
            "description": "Account status"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is account active"
          },
          "approvedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Approval date"
          },
          "approvedBy": {
            "type": "string",
            "description": "Approved by user ID"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Rejection reason"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date"
          },
          "userCount": {
            "type": "number",
            "description": "Merchant users count"
          },
          "metrics": {
            "type": "object",
            "description": "Performance metrics"
          }
        },
        "required": [
          "id",
          "name",
          "businessType",
          "address",
          "eInvoiceOptIn",
          "status",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "MerchantRejectionDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Primary reason for rejection",
            "example": "incomplete_documentation",
            "enum": [
              "incomplete_documentation",
              "invalid_business_license",
              "failed_verification",
              "duplicate_application",
              "business_type_not_supported",
              "geographic_restrictions",
              "other"
            ]
          },
          "rejectionNotes": {
            "type": "string",
            "description": "Detailed explanation for rejection",
            "example": "Business license document is expired. Please submit a current license.",
            "minLength": 20,
            "maxLength": 1000
          },
          "canReapply": {
            "type": "boolean",
            "description": "Whether merchant can reapply after addressing issues",
            "example": true,
            "default": true
          },
          "requiredForReapplication": {
            "description": "Specific documents or information needed for reapplication",
            "example": [
              "Current business license",
              "Updated tax registration"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "reason",
          "rejectionNotes"
        ]
      },
      "UpdateMerchantProfileDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "type": "string",
            "description": "Business description"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo URL"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone"
          },
          "website": {
            "type": "string",
            "description": "Website"
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "state": {
            "type": "string",
            "description": "State"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "minimumOrderValue": {
            "type": "number",
            "description": "Minimum order value"
          },
          "shippingPolicy": {
            "type": "string",
            "description": "Shipping policy"
          },
          "returnPolicy": {
            "type": "string",
            "description": "Return policy"
          },
          "tin": {
            "type": "string",
            "description": "Tax Identification Number for e-invoicing",
            "example": "TIN123456789"
          },
          "idType": {
            "type": "string",
            "description": "Type of identification document",
            "enum": [
              "NRIC",
              "BRN",
              "PASSPORT",
              "ARMY"
            ],
            "example": "BRN"
          },
          "idValue": {
            "type": "string",
            "description": "Identification document number",
            "example": "201501012345"
          },
          "eInvoiceOptIn": {
            "type": "boolean",
            "description": "E-invoice submission opt-in status",
            "default": false
          }
        }
      },
      "UpdateDocumentStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "New status for the document",
            "enum": [
              "PENDING",
              "VERIFIED",
              "REJECTED",
              "EXPIRED",
              "RESUBMISSION"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Admin notes about the status change"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name (internal identifier)",
            "example": "processors",
            "minLength": 2,
            "maxLength": 100
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the category",
            "example": "Computer Processors",
            "maxLength": 150
          },
          "description": {
            "type": "string",
            "description": "Category description",
            "example": "Central Processing Units for computers and servers",
            "maxLength": 1000
          },
          "parentId": {
            "type": "string",
            "description": "Parent category ID for hierarchical structure",
            "example": "electronics-category-id"
          },
          "slug": {
            "type": "string",
            "description": "URL slug for SEO-friendly URLs",
            "example": "processors",
            "minLength": 2,
            "maxLength": 100
          },
          "imageUrl": {
            "type": "string",
            "description": "Category image URL",
            "example": "https://example.com/categories/processors.jpg"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for category display",
            "example": 1,
            "minimum": 0
          },
          "metaTitle": {
            "type": "string",
            "description": "SEO meta title",
            "example": "Computer Processors | Hardware World",
            "maxLength": 200
          },
          "metaDescription": {
            "type": "string",
            "description": "SEO meta description",
            "example": "High-performance computer processors from top brands like Intel and AMD",
            "maxLength": 300
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "CategoryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Category ID",
            "example": "category-uuid"
          },
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "processors"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the category",
            "example": "Computer Processors"
          },
          "description": {
            "type": "string",
            "description": "Category description",
            "example": "Central Processing Units for computers and servers"
          },
          "imageUrl": {
            "type": "string",
            "description": "Category image URL",
            "example": "https://example.com/categories/processors.jpg"
          },
          "parentId": {
            "type": "string",
            "description": "Parent category ID",
            "example": "electronics-category-id"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the category is active",
            "example": true
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for category display",
            "example": 1
          },
          "slug": {
            "type": "string",
            "description": "URL slug for SEO-friendly URLs",
            "example": "processors"
          },
          "metaTitle": {
            "type": "string",
            "description": "SEO meta title",
            "example": "Computer Processors | Hardware World"
          },
          "metaDescription": {
            "type": "string",
            "description": "SEO meta description",
            "example": "High-performance computer processors from top brands"
          },
          "children": {
            "description": "Child categories (if requested)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryResponseDto"
            }
          },
          "productCount": {
            "type": "number",
            "description": "Product count in this category (if requested)",
            "example": 25
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID",
            "example": "admin-user-id"
          },
          "updatedBy": {
            "type": "string",
            "description": "Updated by user ID",
            "example": "admin-user-id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "isActive",
          "sortOrder",
          "slug",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "CategoryHierarchyDto": {
        "type": "object",
        "properties": {
          "categories": {
            "description": "Root categories with nested children",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryResponseDto"
            }
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of categories",
            "example": 150
          },
          "activeCount": {
            "type": "number",
            "description": "Number of active categories",
            "example": 142
          }
        },
        "required": [
          "categories",
          "totalCount",
          "activeCount"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name for the category",
            "example": "Computer Processors",
            "maxLength": 150
          },
          "description": {
            "type": "string",
            "description": "Category description",
            "example": "Central Processing Units for computers and servers",
            "maxLength": 1000
          },
          "parentId": {
            "type": "string",
            "description": "Parent category ID for hierarchical structure",
            "example": "electronics-category-id"
          },
          "slug": {
            "type": "string",
            "description": "URL slug for SEO-friendly URLs",
            "example": "processors",
            "minLength": 2,
            "maxLength": 100
          },
          "imageUrl": {
            "type": "string",
            "description": "Category image URL",
            "example": "https://example.com/categories/processors.jpg"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for category display",
            "example": 1,
            "minimum": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the category is active",
            "example": true
          },
          "metaTitle": {
            "type": "string",
            "description": "SEO meta title",
            "example": "Computer Processors | Hardware World",
            "maxLength": 200
          },
          "metaDescription": {
            "type": "string",
            "description": "SEO meta description",
            "example": "High-performance computer processors from top brands like Intel and AMD",
            "maxLength": 300
          }
        }
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Intel Core i7-12700K",
            "minLength": 2,
            "maxLength": 200
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the product",
            "example": "Intel Core i7-12700K Desktop Processor",
            "maxLength": 250
          },
          "description": {
            "type": "string",
            "description": "Detailed product description",
            "example": "12th Gen Intel Core i7-12700K desktop processor with 12 cores and 20 threads...",
            "maxLength": 5000
          },
          "shortDescription": {
            "type": "string",
            "description": "Short product description for listings",
            "example": "High-performance 12-core desktop processor",
            "maxLength": 500
          },
          "sku": {
            "type": "string",
            "description": "Product SKU (Stock Keeping Unit)",
            "example": "INTEL-i7-12700K",
            "minLength": 2,
            "maxLength": 100
          },
          "barcode": {
            "type": "string",
            "description": "Product barcode",
            "example": "5032037234051",
            "maxLength": 50
          },
          "mpn": {
            "type": "string",
            "description": "Manufacturer Part Number",
            "example": "BX8071512700K",
            "maxLength": 100
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID",
            "example": "processors-category-id"
          },
          "brand": {
            "type": "string",
            "description": "Product brand",
            "example": "Intel",
            "maxLength": 100
          },
          "model": {
            "type": "string",
            "description": "Product model",
            "example": "Core i7-12700K",
            "maxLength": 100
          },
          "weight": {
            "type": "number",
            "description": "Product weight in kg",
            "example": 0.2
          },
          "dimensions": {
            "type": "string",
            "description": "Product dimensions as JSON string",
            "example": "{\"length\": 3.75, \"width\": 3.75, \"height\": 0.3, \"unit\": \"cm\"}"
          },
          "basePrice": {
            "type": "number",
            "description": "Base product price",
            "example": 299.99,
            "minimum": 0
          },
          "msrp": {
            "type": "number",
            "description": "Manufacturer Suggested Retail Price",
            "example": 349.99,
            "minimum": 0
          },
          "costPrice": {
            "type": "number",
            "description": "Merchant cost price",
            "example": 250,
            "minimum": 0
          },
          "images": {
            "description": "Product images URLs",
            "example": [
              "https://example.com/intel-i7-front.jpg",
              "https://example.com/intel-i7-back.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "videos": {
            "description": "Product videos URLs",
            "example": [
              "https://example.com/intel-i7-demo.mp4"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "description": "Product documents URLs",
            "example": [
              "https://example.com/intel-i7-specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isDigital": {
            "type": "boolean",
            "description": "Whether the product is digital",
            "example": false
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Whether to track inventory for this product",
            "example": true
          },
          "minimumOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity",
            "example": 1,
            "minimum": 1
          },
          "orderMultiple": {
            "type": "number",
            "description": "Order multiple (must order in multiples of this number)",
            "example": 1,
            "minimum": 1
          },
          "slug": {
            "type": "string",
            "description": "Product URL slug",
            "example": "intel-core-i7-12700k",
            "minLength": 2,
            "maxLength": 200
          },
          "tags": {
            "description": "Product tags for search",
            "example": [
              "intel",
              "processor",
              "desktop",
              "12th-gen"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metaTitle": {
            "type": "string",
            "description": "SEO meta title",
            "example": "Intel Core i7-12700K Desktop Processor | Hardware World",
            "maxLength": 200
          },
          "metaDescription": {
            "type": "string",
            "description": "SEO meta description",
            "example": "Buy Intel Core i7-12700K 12-core desktop processor online at Hardware World",
            "maxLength": 300
          }
        },
        "required": [
          "name",
          "sku",
          "categoryId",
          "basePrice",
          "slug"
        ]
      },
      "ProductResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID",
            "example": "product-uuid"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Intel Core i7-12700K"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the product",
            "example": "Intel Core i7-12700K Desktop Processor"
          },
          "description": {
            "type": "string",
            "description": "Detailed product description",
            "example": "12th Gen Intel Core i7-12700K desktop processor..."
          },
          "shortDescription": {
            "type": "string",
            "description": "Short product description for listings",
            "example": "High-performance 12-core desktop processor"
          },
          "sku": {
            "type": "string",
            "description": "Product SKU",
            "example": "INTEL-i7-12700K"
          },
          "barcode": {
            "type": "string",
            "description": "Product barcode",
            "example": "5032037234051"
          },
          "mpn": {
            "type": "string",
            "description": "Manufacturer Part Number",
            "example": "BX8071512700K"
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID",
            "example": "processors-category-id"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID",
            "example": "merchant-uuid"
          },
          "brand": {
            "type": "string",
            "description": "Product brand",
            "example": "Intel"
          },
          "model": {
            "type": "string",
            "description": "Product model",
            "example": "Core i7-12700K"
          },
          "weight": {
            "type": "number",
            "description": "Product weight in kg",
            "example": 0.2
          },
          "dimensions": {
            "type": "string",
            "description": "Product dimensions as JSON string",
            "example": "{\"length\": 3.75, \"width\": 3.75, \"height\": 0.3, \"unit\": \"cm\"}"
          },
          "basePrice": {
            "type": "number",
            "description": "Base product price",
            "example": 299.99
          },
          "msrp": {
            "type": "number",
            "description": "Manufacturer Suggested Retail Price",
            "example": 349.99
          },
          "costPrice": {
            "type": "number",
            "description": "Merchant cost price",
            "example": 250
          },
          "images": {
            "description": "Product images URLs",
            "example": [
              "https://example.com/intel-i7-front.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "videos": {
            "description": "Product videos URLs",
            "example": [
              "https://example.com/intel-i7-demo.mp4"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "description": "Product documents URLs",
            "example": [
              "https://example.com/intel-i7-specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Product status",
            "example": "PUBLISHED",
            "enum": [
              "DRAFT",
              "PENDING_REVIEW",
              "APPROVED",
              "REJECTED",
              "PUBLISHED",
              "DISCONTINUED"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the product is active",
            "example": true
          },
          "isDigital": {
            "type": "boolean",
            "description": "Whether the product is digital",
            "example": false
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Whether to track inventory for this product",
            "example": true
          },
          "minimumOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity",
            "example": 1
          },
          "orderMultiple": {
            "type": "number",
            "description": "Order multiple",
            "example": 1
          },
          "slug": {
            "type": "string",
            "description": "Product URL slug",
            "example": "intel-core-i7-12700k"
          },
          "tags": {
            "description": "Product tags for search",
            "example": [
              "intel",
              "processor",
              "desktop",
              "12th-gen"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metaTitle": {
            "type": "string",
            "description": "SEO meta title",
            "example": "Intel Core i7-12700K Desktop Processor | Hardware World"
          },
          "metaDescription": {
            "type": "string",
            "description": "SEO meta description",
            "example": "Buy Intel Core i7-12700K 12-core desktop processor online"
          },
          "category": {
            "type": "object",
            "description": "Category information (if requested)"
          },
          "merchant": {
            "type": "object",
            "description": "Merchant information (if requested)"
          },
          "variants": {
            "description": "Product variants (if requested)",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID",
            "example": "merchant-user-id"
          },
          "updatedBy": {
            "type": "string",
            "description": "Updated by user ID",
            "example": "merchant-user-id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "sku",
          "categoryId",
          "merchantId",
          "basePrice",
          "images",
          "videos",
          "documents",
          "status",
          "isActive",
          "isDigital",
          "trackInventory",
          "minimumOrderQuantity",
          "orderMultiple",
          "slug",
          "tags",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProductListDto": {
        "type": "object",
        "properties": {
          "products": {
            "description": "List of products",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductResponseDto"
            }
          },
          "pagination": {
            "type": "object",
            "description": "Pagination information"
          }
        },
        "required": [
          "products",
          "pagination"
        ]
      },
      "ProductAttributeTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Attribute template ID",
            "example": "attribute-uuid"
          },
          "name": {
            "type": "string",
            "description": "Attribute name",
            "example": "processor_cores"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the attribute",
            "example": "Number of Cores"
          },
          "description": {
            "type": "string",
            "description": "Attribute description",
            "example": "Total number of processor cores"
          },
          "type": {
            "type": "string",
            "description": "Attribute type",
            "example": "NUMBER",
            "enum": [
              "TEXT",
              "NUMBER",
              "BOOLEAN",
              "SELECT",
              "MULTI_SELECT",
              "DATE",
              "URL",
              "EMAIL"
            ]
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether this attribute is required",
            "example": true
          },
          "isFilterable": {
            "type": "boolean",
            "description": "Whether this attribute can be used for filtering",
            "example": true
          },
          "isVariant": {
            "type": "boolean",
            "description": "Whether this attribute can be used for product variants",
            "example": false
          },
          "options": {
            "description": "Possible options for SELECT/MULTI_SELECT types",
            "example": [
              "2",
              "4",
              "6",
              "8",
              "12",
              "16"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validation": {
            "type": "object",
            "description": "Validation rules as JSON object",
            "example": {
              "min": 1,
              "max": 128
            }
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID this attribute template belongs to",
            "example": "processors-category-id"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for display",
            "example": 1
          },
          "unit": {
            "type": "string",
            "description": "Measurement unit for the attribute",
            "example": "cores"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the attribute template is active",
            "example": true
          },
          "category": {
            "type": "object",
            "description": "Category information (if requested)"
          },
          "inheritedFrom": {
            "type": "string",
            "description": "Name of parent category this attribute was inherited from (if applicable)",
            "example": "Electronics"
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID",
            "example": "admin-user-id"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "isRequired",
          "isFilterable",
          "isVariant",
          "options",
          "sortOrder",
          "isActive",
          "createdBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProductAttributeTemplateListDto": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "List of attribute templates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAttributeTemplateResponseDto"
            }
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of attribute templates",
            "example": 15
          },
          "activeCount": {
            "type": "number",
            "description": "Number of active attribute templates",
            "example": 12
          }
        },
        "required": [
          "attributes",
          "totalCount",
          "activeCount"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Intel Core i7-12700K",
            "minLength": 2,
            "maxLength": 200
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the product",
            "example": "Intel Core i7-12700K Desktop Processor",
            "maxLength": 250
          },
          "description": {
            "type": "string",
            "description": "Detailed product description",
            "example": "12th Gen Intel Core i7-12700K desktop processor with 12 cores and 20 threads...",
            "maxLength": 5000
          },
          "shortDescription": {
            "type": "string",
            "description": "Short product description for listings",
            "example": "High-performance 12-core desktop processor",
            "maxLength": 500
          },
          "barcode": {
            "type": "string",
            "description": "Product barcode",
            "example": "5032037234051",
            "maxLength": 50
          },
          "mpn": {
            "type": "string",
            "description": "Manufacturer Part Number",
            "example": "BX8071512700K",
            "maxLength": 100
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID",
            "example": "processors-category-id"
          },
          "brand": {
            "type": "string",
            "description": "Product brand",
            "example": "Intel",
            "maxLength": 100
          },
          "model": {
            "type": "string",
            "description": "Product model",
            "example": "Core i7-12700K",
            "maxLength": 100
          },
          "weight": {
            "type": "number",
            "description": "Product weight in kg",
            "example": 0.2
          },
          "dimensions": {
            "type": "string",
            "description": "Product dimensions as JSON string",
            "example": "{\"length\": 3.75, \"width\": 3.75, \"height\": 0.3, \"unit\": \"cm\"}"
          },
          "basePrice": {
            "type": "number",
            "description": "Base product price",
            "example": 299.99,
            "minimum": 0
          },
          "msrp": {
            "type": "number",
            "description": "Manufacturer Suggested Retail Price",
            "example": 349.99,
            "minimum": 0
          },
          "costPrice": {
            "type": "number",
            "description": "Merchant cost price",
            "example": 250,
            "minimum": 0
          },
          "images": {
            "description": "Product images URLs",
            "example": [
              "https://example.com/intel-i7-front.jpg",
              "https://example.com/intel-i7-back.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "videos": {
            "description": "Product videos URLs",
            "example": [
              "https://example.com/intel-i7-demo.mp4"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "description": "Product documents URLs",
            "example": [
              "https://example.com/intel-i7-specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Product status",
            "example": "PUBLISHED",
            "enum": [
              "DRAFT",
              "PENDING_REVIEW",
              "APPROVED",
              "REJECTED",
              "PUBLISHED",
              "DISCONTINUED"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the product is active",
            "example": true
          },
          "isDigital": {
            "type": "boolean",
            "description": "Whether the product is digital",
            "example": false
          },
          "trackInventory": {
            "type": "boolean",
            "description": "Whether to track inventory for this product",
            "example": true
          },
          "minimumOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity",
            "example": 1,
            "minimum": 1
          },
          "orderMultiple": {
            "type": "number",
            "description": "Order multiple (must order in multiples of this number)",
            "example": 1,
            "minimum": 1
          },
          "slug": {
            "type": "string",
            "description": "Product URL slug",
            "example": "intel-core-i7-12700k",
            "minLength": 2,
            "maxLength": 200
          },
          "tags": {
            "description": "Product tags for search",
            "example": [
              "intel",
              "processor",
              "desktop",
              "12th-gen"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metaTitle": {
            "type": "string",
            "description": "SEO meta title",
            "example": "Intel Core i7-12700K Desktop Processor | Hardware World",
            "maxLength": 200
          },
          "metaDescription": {
            "type": "string",
            "description": "SEO meta description",
            "example": "Buy Intel Core i7-12700K 12-core desktop processor online at Hardware World",
            "maxLength": 300
          }
        }
      },
      "CreateProductVariantDto": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string",
            "description": "Variant SKU (must be unique)",
            "example": "INTEL-i7-12700K-TRAY",
            "minLength": 2,
            "maxLength": 100
          },
          "name": {
            "type": "string",
            "description": "Variant name",
            "example": "Tray Version",
            "minLength": 2,
            "maxLength": 200
          },
          "attributes": {
            "type": "string",
            "description": "Variant attributes as JSON string",
            "example": "{\"packaging\": \"tray\", \"warranty\": \"1-year\"}"
          },
          "price": {
            "type": "number",
            "description": "Variant-specific price (overrides product base price)",
            "example": 279.99,
            "minimum": 0
          },
          "costPrice": {
            "type": "number",
            "description": "Variant-specific cost price",
            "example": 230,
            "minimum": 0
          },
          "weight": {
            "type": "number",
            "description": "Variant weight in kg",
            "example": 0.15
          },
          "barcode": {
            "type": "string",
            "description": "Variant barcode",
            "example": "5032037234068",
            "maxLength": 50
          },
          "mpn": {
            "type": "string",
            "description": "Variant Manufacturer Part Number",
            "example": "CM8071504553828",
            "maxLength": 100
          },
          "images": {
            "description": "Variant-specific images URLs",
            "example": [
              "https://example.com/intel-i7-tray.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minimumOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity for this variant",
            "example": 1,
            "minimum": 1
          },
          "orderMultiple": {
            "type": "number",
            "description": "Order multiple for this variant",
            "example": 1,
            "minimum": 1
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default variant",
            "example": false
          }
        },
        "required": [
          "sku",
          "name",
          "attributes"
        ]
      },
      "ProductVariantResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Variant ID",
            "example": "variant-uuid"
          },
          "productId": {
            "type": "string",
            "description": "Product ID this variant belongs to",
            "example": "product-uuid"
          },
          "sku": {
            "type": "string",
            "description": "Variant SKU",
            "example": "INTEL-i7-12700K-TRAY"
          },
          "name": {
            "type": "string",
            "description": "Variant name",
            "example": "Tray Version"
          },
          "attributes": {
            "type": "object",
            "description": "Variant attributes as JSON object",
            "example": {
              "packaging": "tray",
              "warranty": "1-year"
            }
          },
          "price": {
            "type": "number",
            "description": "Variant-specific price",
            "example": 279.99
          },
          "costPrice": {
            "type": "number",
            "description": "Variant-specific cost price",
            "example": 230
          },
          "weight": {
            "type": "number",
            "description": "Variant weight in kg",
            "example": 0.15
          },
          "barcode": {
            "type": "string",
            "description": "Variant barcode",
            "example": "5032037234068"
          },
          "mpn": {
            "type": "string",
            "description": "Variant Manufacturer Part Number",
            "example": "CM8071504553828"
          },
          "images": {
            "description": "Variant-specific images URLs",
            "example": [
              "https://example.com/intel-i7-tray.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minimumOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity for this variant",
            "example": 1
          },
          "orderMultiple": {
            "type": "number",
            "description": "Order multiple for this variant",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the variant is active",
            "example": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default variant",
            "example": false
          },
          "product": {
            "type": "object",
            "description": "Product information (if requested)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "productId",
          "sku",
          "name",
          "attributes",
          "images",
          "minimumOrderQuantity",
          "orderMultiple",
          "isActive",
          "isDefault",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProductVariantListDto": {
        "type": "object",
        "properties": {
          "variants": {
            "description": "List of product variants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantResponseDto"
            }
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of variants for the product",
            "example": 3
          }
        },
        "required": [
          "variants",
          "totalCount"
        ]
      },
      "UpdateProductVariantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Variant name",
            "example": "Tray Version",
            "minLength": 2,
            "maxLength": 200
          },
          "attributes": {
            "type": "string",
            "description": "Variant attributes as JSON string",
            "example": "{\"packaging\": \"tray\", \"warranty\": \"2-year\"}"
          },
          "price": {
            "type": "number",
            "description": "Variant-specific price (overrides product base price)",
            "example": 279.99,
            "minimum": 0
          },
          "costPrice": {
            "type": "number",
            "description": "Variant-specific cost price",
            "example": 230,
            "minimum": 0
          },
          "weight": {
            "type": "number",
            "description": "Variant weight in kg",
            "example": 0.15
          },
          "barcode": {
            "type": "string",
            "description": "Variant barcode",
            "example": "5032037234068",
            "maxLength": 50
          },
          "mpn": {
            "type": "string",
            "description": "Variant Manufacturer Part Number",
            "example": "CM8071504553828",
            "maxLength": 100
          },
          "images": {
            "description": "Variant-specific images URLs",
            "example": [
              "https://example.com/intel-i7-tray.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minimumOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity for this variant",
            "example": 1,
            "minimum": 1
          },
          "orderMultiple": {
            "type": "number",
            "description": "Order multiple for this variant",
            "example": 1,
            "minimum": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the variant is active",
            "example": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default variant",
            "example": false
          }
        }
      },
      "CreateProductAttributeTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Attribute name (internal identifier)",
            "example": "processor_cores",
            "minLength": 2,
            "maxLength": 100
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the attribute",
            "example": "Number of Cores",
            "maxLength": 150
          },
          "description": {
            "type": "string",
            "description": "Attribute description",
            "example": "Total number of processor cores",
            "maxLength": 500
          },
          "type": {
            "type": "string",
            "description": "Attribute type",
            "example": "NUMBER",
            "enum": [
              "TEXT",
              "NUMBER",
              "BOOLEAN",
              "SELECT",
              "MULTI_SELECT",
              "DATE",
              "URL",
              "EMAIL"
            ]
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether this attribute is required",
            "example": true
          },
          "isFilterable": {
            "type": "boolean",
            "description": "Whether this attribute can be used for filtering",
            "example": true
          },
          "isVariant": {
            "type": "boolean",
            "description": "Whether this attribute can be used for product variants",
            "example": false
          },
          "options": {
            "description": "Possible options for SELECT/MULTI_SELECT types",
            "example": [
              "2",
              "4",
              "6",
              "8",
              "12",
              "16"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validation": {
            "type": "string",
            "description": "Validation rules as JSON string",
            "example": "{\"min\": 1, \"max\": 128}"
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID this attribute template belongs to",
            "example": "processors-category-id"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for display",
            "example": 1,
            "minimum": 0
          },
          "unit": {
            "type": "string",
            "description": "Measurement unit for the attribute",
            "example": "cores",
            "maxLength": 20
          }
        },
        "required": [
          "name",
          "type",
          "categoryId"
        ]
      },
      "UpdateProductAttributeTemplateDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name for the attribute",
            "example": "Number of Cores",
            "maxLength": 150
          },
          "description": {
            "type": "string",
            "description": "Attribute description",
            "example": "Total number of processor cores",
            "maxLength": 500
          },
          "type": {
            "type": "string",
            "description": "Attribute type",
            "example": "NUMBER",
            "enum": [
              "TEXT",
              "NUMBER",
              "BOOLEAN",
              "SELECT",
              "MULTI_SELECT",
              "DATE",
              "URL",
              "EMAIL"
            ]
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether this attribute is required",
            "example": true
          },
          "isFilterable": {
            "type": "boolean",
            "description": "Whether this attribute can be used for filtering",
            "example": true
          },
          "isVariant": {
            "type": "boolean",
            "description": "Whether this attribute can be used for product variants",
            "example": false
          },
          "options": {
            "description": "Possible options for SELECT/MULTI_SELECT types",
            "example": [
              "2",
              "4",
              "6",
              "8",
              "12",
              "16"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validation": {
            "type": "string",
            "description": "Validation rules as JSON string",
            "example": "{\"min\": 1, \"max\": 128}"
          },
          "sortOrder": {
            "type": "number",
            "description": "Sort order for display",
            "example": 1,
            "minimum": 0
          },
          "unit": {
            "type": "string",
            "description": "Measurement unit for the attribute",
            "example": "cores",
            "maxLength": 20
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the attribute template is active",
            "example": true
          }
        }
      },
      "CreateWarehouseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Warehouse name",
            "example": "New York Distribution Center",
            "minLength": 2,
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "description": "Warehouse code (unique identifier)",
            "example": "WH-NYC-01",
            "minLength": 2,
            "maxLength": 20
          },
          "description": {
            "type": "string",
            "description": "Warehouse description",
            "example": "Primary East Coast distribution center",
            "maxLength": 500
          },
          "type": {
            "type": "string",
            "description": "Warehouse type",
            "example": "PHYSICAL",
            "enum": [
              "PHYSICAL",
              "VIRTUAL",
              "DROPSHIP",
              "CONSIGNMENT"
            ]
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1",
            "example": "123 Industrial Blvd",
            "maxLength": 200
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 100",
            "maxLength": 200
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Brooklyn",
            "maxLength": 100
          },
          "state": {
            "type": "string",
            "description": "State/Province",
            "example": "NY",
            "maxLength": 100
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "11201",
            "maxLength": 20
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "USA",
            "maxLength": 100
          },
          "capacity": {
            "type": "number",
            "description": "Warehouse capacity in units",
            "example": 100000,
            "minimum": 1
          },
          "parentId": {
            "type": "string",
            "description": "Parent warehouse ID for hierarchy",
            "example": "parent-warehouse-uuid"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID (null for system warehouses)",
            "example": "merchant-uuid"
          }
        },
        "required": [
          "name",
          "code",
          "type",
          "addressLine1",
          "city",
          "state",
          "postalCode",
          "country"
        ]
      },
      "WarehouseResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Warehouse ID",
            "example": "warehouse-uuid"
          },
          "name": {
            "type": "string",
            "description": "Warehouse name",
            "example": "New York Distribution Center"
          },
          "code": {
            "type": "string",
            "description": "Warehouse code",
            "example": "WH-NYC-01"
          },
          "description": {
            "type": "string",
            "description": "Warehouse description",
            "example": "Primary East Coast distribution center"
          },
          "type": {
            "type": "string",
            "description": "Warehouse type",
            "example": "PHYSICAL",
            "enum": [
              "PHYSICAL",
              "VIRTUAL",
              "DROPSHIP",
              "CONSIGNMENT"
            ]
          },
          "fullAddress": {
            "type": "string",
            "description": "Full address",
            "example": "123 Industrial Blvd, Brooklyn, NY 11201, USA"
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1",
            "example": "123 Industrial Blvd"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 100"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Brooklyn"
          },
          "state": {
            "type": "string",
            "description": "State/Province",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "11201"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "USA"
          },
          "capacity": {
            "type": "number",
            "description": "Warehouse capacity in units",
            "example": 100000
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the warehouse is active",
            "example": true
          },
          "parentId": {
            "type": "string",
            "description": "Parent warehouse ID",
            "example": "parent-warehouse-uuid"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID",
            "example": "merchant-uuid"
          },
          "children": {
            "description": "Child warehouses (if requested)",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "inventoryStats": {
            "type": "object",
            "description": "Inventory statistics (if requested)"
          },
          "merchant": {
            "type": "object",
            "description": "Merchant information (if requested)"
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID",
            "example": "user-uuid"
          },
          "updatedBy": {
            "type": "string",
            "description": "Updated by user ID",
            "example": "user-uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "type",
          "fullAddress",
          "addressLine1",
          "city",
          "state",
          "postalCode",
          "country",
          "isActive",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "WarehouseListDto": {
        "type": "object",
        "properties": {
          "warehouses": {
            "description": "List of warehouses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseResponseDto"
            }
          },
          "pagination": {
            "type": "object",
            "description": "Pagination information"
          }
        },
        "required": [
          "warehouses",
          "pagination"
        ]
      },
      "UpdateWarehouseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Warehouse name",
            "example": "New York Distribution Center",
            "minLength": 2,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Warehouse description",
            "example": "Primary East Coast distribution center",
            "maxLength": 500
          },
          "type": {
            "type": "string",
            "description": "Warehouse type",
            "example": "PHYSICAL",
            "enum": [
              "PHYSICAL",
              "VIRTUAL",
              "DROPSHIP",
              "CONSIGNMENT"
            ]
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1",
            "example": "123 Industrial Blvd",
            "maxLength": 200
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 100",
            "maxLength": 200
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Brooklyn",
            "maxLength": 100
          },
          "state": {
            "type": "string",
            "description": "State/Province",
            "example": "NY",
            "maxLength": 100
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "11201",
            "maxLength": 20
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "USA",
            "maxLength": 100
          },
          "capacity": {
            "type": "number",
            "description": "Warehouse capacity in units",
            "example": 100000,
            "minimum": 1
          },
          "parentId": {
            "type": "string",
            "description": "Parent warehouse ID for hierarchy",
            "example": "parent-warehouse-uuid"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the warehouse is active",
            "example": true
          }
        }
      },
      "CreateInventoryItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "product-uuid"
          },
          "productVariantId": {
            "type": "string",
            "description": "Product variant ID (optional)",
            "example": "variant-uuid"
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse ID",
            "example": "warehouse-uuid"
          },
          "quantityOnHand": {
            "type": "number",
            "description": "Initial quantity on hand",
            "example": 100,
            "minimum": 0
          },
          "minimumStock": {
            "type": "number",
            "description": "Minimum stock level (reorder point)",
            "example": 10,
            "minimum": 0
          },
          "maximumStock": {
            "type": "number",
            "description": "Maximum stock level",
            "example": 500,
            "minimum": 0
          },
          "reorderQuantity": {
            "type": "number",
            "description": "Reorder quantity",
            "example": 100,
            "minimum": 1
          },
          "leadTimeDays": {
            "type": "number",
            "description": "Lead time in days",
            "example": 14,
            "minimum": 0
          },
          "averageCost": {
            "type": "number",
            "description": "Average cost per unit",
            "example": 299.99,
            "minimum": 0
          },
          "lastPurchaseCost": {
            "type": "number",
            "description": "Last purchase cost per unit",
            "example": 295,
            "minimum": 0
          },
          "lastPurchaseDate": {
            "type": "string",
            "description": "Last purchase date",
            "example": "2024-01-15T10:30:00Z"
          },
          "batchNumber": {
            "type": "string",
            "description": "Batch number for lot tracking",
            "example": "BATCH-2024-001"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date for perishable items",
            "example": "2025-01-15T10:30:00Z"
          },
          "manufacturingDate": {
            "type": "string",
            "description": "Manufacturing date",
            "example": "2024-01-01T10:30:00Z"
          }
        },
        "required": [
          "productId",
          "warehouseId"
        ]
      },
      "InventoryItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Inventory item ID",
            "example": "inventory-item-uuid"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "product-uuid"
          },
          "productVariantId": {
            "type": "string",
            "description": "Product variant ID",
            "example": "variant-uuid"
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse ID",
            "example": "warehouse-uuid"
          },
          "quantityOnHand": {
            "type": "number",
            "description": "Quantity on hand",
            "example": 150
          },
          "quantityReserved": {
            "type": "number",
            "description": "Quantity reserved",
            "example": 20
          },
          "quantityAvailable": {
            "type": "number",
            "description": "Quantity available (calculated)",
            "example": 130
          },
          "quantityCommitted": {
            "type": "number",
            "description": "Quantity committed",
            "example": 10
          },
          "minimumStock": {
            "type": "number",
            "description": "Minimum stock level",
            "example": 15
          },
          "maximumStock": {
            "type": "number",
            "description": "Maximum stock level",
            "example": 600
          },
          "reorderQuantity": {
            "type": "number",
            "description": "Reorder quantity",
            "example": 120
          },
          "leadTimeDays": {
            "type": "number",
            "description": "Lead time in days",
            "example": 12
          },
          "averageCost": {
            "type": "number",
            "description": "Average cost per unit",
            "example": 305.99
          },
          "lastPurchaseCost": {
            "type": "number",
            "description": "Last purchase cost per unit",
            "example": 300
          },
          "lastPurchaseDate": {
            "format": "date-time",
            "type": "string",
            "description": "Last purchase date",
            "example": "2024-01-20T10:30:00Z"
          },
          "batchNumber": {
            "type": "string",
            "description": "Batch number",
            "example": "BATCH-2024-001"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date",
            "example": "2025-01-15T10:30:00Z"
          },
          "manufacturingDate": {
            "format": "date-time",
            "type": "string",
            "description": "Manufacturing date",
            "example": "2024-01-01T10:30:00Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the item is active",
            "example": true
          },
          "isLowStock": {
            "type": "boolean",
            "description": "Whether stock is below minimum threshold",
            "example": false
          },
          "isOutOfStock": {
            "type": "boolean",
            "description": "Whether item is out of stock",
            "example": false
          },
          "product": {
            "type": "object",
            "description": "Product information (if requested)"
          },
          "productVariant": {
            "type": "object",
            "description": "Product variant information (if requested)"
          },
          "warehouse": {
            "type": "object",
            "description": "Warehouse information (if requested)"
          },
          "lastCountDate": {
            "format": "date-time",
            "type": "string",
            "description": "Last count date",
            "example": "2024-01-10T10:30:00Z"
          },
          "lastCountBy": {
            "type": "string",
            "description": "Last count performed by user ID",
            "example": "user-uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "productId",
          "warehouseId",
          "quantityOnHand",
          "quantityReserved",
          "quantityAvailable",
          "quantityCommitted",
          "minimumStock",
          "averageCost",
          "isActive",
          "isLowStock",
          "isOutOfStock",
          "createdAt",
          "updatedAt"
        ]
      },
      "InventoryItemListDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "List of inventory items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItemResponseDto"
            }
          },
          "pagination": {
            "type": "object",
            "description": "Pagination information"
          },
          "summary": {
            "type": "object",
            "description": "Summary statistics"
          }
        },
        "required": [
          "items",
          "pagination"
        ]
      },
      "UpdateInventoryItemDto": {
        "type": "object",
        "properties": {
          "quantityOnHand": {
            "type": "number",
            "description": "Quantity on hand",
            "example": 150,
            "minimum": 0
          },
          "quantityReserved": {
            "type": "number",
            "description": "Quantity reserved",
            "example": 20,
            "minimum": 0
          },
          "quantityCommitted": {
            "type": "number",
            "description": "Quantity committed",
            "example": 10,
            "minimum": 0
          },
          "minimumStock": {
            "type": "number",
            "description": "Minimum stock level",
            "example": 15,
            "minimum": 0
          },
          "maximumStock": {
            "type": "number",
            "description": "Maximum stock level",
            "example": 600,
            "minimum": 0
          },
          "reorderQuantity": {
            "type": "number",
            "description": "Reorder quantity",
            "example": 120,
            "minimum": 1
          },
          "leadTimeDays": {
            "type": "number",
            "description": "Lead time in days",
            "example": 12,
            "minimum": 0
          },
          "averageCost": {
            "type": "number",
            "description": "Average cost per unit",
            "example": 305.99,
            "minimum": 0
          },
          "lastPurchaseCost": {
            "type": "number",
            "description": "Last purchase cost per unit",
            "example": 300,
            "minimum": 0
          },
          "lastPurchaseDate": {
            "type": "string",
            "description": "Last purchase date",
            "example": "2024-01-20T10:30:00Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the inventory item is active",
            "example": true
          }
        }
      },
      "BulkInventoryUpdateDto": {
        "type": "object",
        "properties": {
          "updates": {
            "description": "Array of inventory updates",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "reason": {
            "type": "string",
            "description": "Reason for bulk update",
            "example": "Weekly inventory sync"
          },
          "reasonCode": {
            "type": "string",
            "description": "Reason code",
            "example": "BULK_SYNC"
          }
        },
        "required": [
          "updates",
          "reason"
        ]
      },
      "CreateStockMovementDto": {
        "type": "object",
        "properties": {
          "inventoryItemId": {
            "type": "string",
            "description": "Inventory item ID",
            "example": "inventory-item-uuid"
          },
          "type": {
            "type": "string",
            "description": "Type of stock movement",
            "example": "RECEIPT",
            "enum": [
              "RECEIPT",
              "SHIPMENT",
              "ADJUSTMENT",
              "TRANSFER",
              "RESERVATION",
              "RELEASE",
              "CYCLE_COUNT",
              "DAMAGE",
              "RETURN",
              "WRITE_OFF"
            ]
          },
          "quantityChange": {
            "type": "number",
            "description": "Quantity change (positive for increases, negative for decreases)",
            "example": 100
          },
          "reason": {
            "type": "string",
            "description": "Reason for the movement",
            "example": "Goods received from supplier"
          },
          "reasonCode": {
            "type": "string",
            "description": "Standardized reason code",
            "example": "SUPPLIER_RECEIPT"
          },
          "reference": {
            "type": "string",
            "description": "Reference number (PO, order, transfer)",
            "example": "PO-2024-001"
          },
          "unitCost": {
            "type": "number",
            "description": "Unit cost for this movement",
            "example": 299.99,
            "minimum": 0
          },
          "sourceWarehouseId": {
            "type": "string",
            "description": "Source warehouse ID for transfers",
            "example": "source-warehouse-uuid"
          },
          "destinationWarehouseId": {
            "type": "string",
            "description": "Destination warehouse ID for transfers",
            "example": "destination-warehouse-uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Related order ID",
            "example": "order-uuid"
          },
          "transferId": {
            "type": "string",
            "description": "Related transfer ID",
            "example": "transfer-uuid"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Damaged items found during receipt"
          }
        },
        "required": [
          "inventoryItemId",
          "type",
          "quantityChange"
        ]
      },
      "StockMovementResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Stock movement ID",
            "example": "movement-uuid"
          },
          "inventoryItemId": {
            "type": "string",
            "description": "Inventory item ID",
            "example": "inventory-item-uuid"
          },
          "type": {
            "type": "string",
            "description": "Type of stock movement",
            "example": "RECEIPT",
            "enum": [
              "RECEIPT",
              "SHIPMENT",
              "ADJUSTMENT",
              "TRANSFER",
              "RESERVATION",
              "RELEASE",
              "CYCLE_COUNT",
              "DAMAGE",
              "RETURN",
              "WRITE_OFF"
            ]
          },
          "reason": {
            "type": "string",
            "description": "Reason for the movement",
            "example": "Goods received from supplier"
          },
          "reasonCode": {
            "type": "string",
            "description": "Standardized reason code",
            "example": "SUPPLIER_RECEIPT"
          },
          "reference": {
            "type": "string",
            "description": "Reference number",
            "example": "PO-2024-001"
          },
          "quantityBefore": {
            "type": "number",
            "description": "Quantity before movement",
            "example": 50
          },
          "quantityChange": {
            "type": "number",
            "description": "Quantity change",
            "example": 100
          },
          "quantityAfter": {
            "type": "number",
            "description": "Quantity after movement",
            "example": 150
          },
          "unitCost": {
            "type": "number",
            "description": "Unit cost for this movement",
            "example": 299.99
          },
          "totalCost": {
            "type": "number",
            "description": "Total cost for this movement",
            "example": 29999
          },
          "sourceWarehouseId": {
            "type": "string",
            "description": "Source warehouse ID",
            "example": "source-warehouse-uuid"
          },
          "destinationWarehouseId": {
            "type": "string",
            "description": "Destination warehouse ID",
            "example": "destination-warehouse-uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Related order ID",
            "example": "order-uuid"
          },
          "transferId": {
            "type": "string",
            "description": "Related transfer ID",
            "example": "transfer-uuid"
          },
          "performedBy": {
            "type": "string",
            "description": "User who performed the movement",
            "example": "user-uuid"
          },
          "performedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the movement was performed",
            "example": "2024-01-15T10:30:00Z"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Damaged items found during receipt"
          },
          "inventoryItem": {
            "type": "object",
            "description": "Inventory item information (if requested)"
          },
          "sourceWarehouse": {
            "type": "object",
            "description": "Source warehouse information (if requested)"
          },
          "destinationWarehouse": {
            "type": "object",
            "description": "Destination warehouse information (if requested)"
          },
          "performedByUser": {
            "type": "object",
            "description": "User who performed the movement (if requested)"
          }
        },
        "required": [
          "id",
          "inventoryItemId",
          "type",
          "quantityBefore",
          "quantityChange",
          "quantityAfter",
          "performedBy",
          "performedAt"
        ]
      },
      "StockMovementListDto": {
        "type": "object",
        "properties": {
          "movements": {
            "description": "List of stock movements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockMovementResponseDto"
            }
          },
          "pagination": {
            "type": "object",
            "description": "Pagination information"
          },
          "summary": {
            "type": "object",
            "description": "Summary statistics"
          }
        },
        "required": [
          "movements",
          "pagination"
        ]
      },
      "CreateStockTransferDto": {
        "type": "object",
        "properties": {
          "sourceWarehouseId": {
            "type": "string",
            "description": "Source warehouse ID",
            "example": "source-warehouse-uuid"
          },
          "destinationWarehouseId": {
            "type": "string",
            "description": "Destination warehouse ID",
            "example": "destination-warehouse-uuid"
          },
          "items": {
            "description": "Items to transfer",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "reference": {
            "type": "string",
            "description": "Transfer reference number",
            "example": "TRANSFER-2024-001"
          },
          "notes": {
            "type": "string",
            "description": "Transfer notes",
            "example": "Quarterly stock rebalancing"
          }
        },
        "required": [
          "sourceWarehouseId",
          "destinationWarehouseId",
          "items"
        ]
      },
      "StockAdjustmentDto": {
        "type": "object",
        "properties": {
          "inventoryItemId": {
            "type": "string",
            "description": "Inventory item ID",
            "example": "inventory-item-uuid"
          },
          "newQuantity": {
            "type": "number",
            "description": "New quantity on hand",
            "example": 85,
            "minimum": 0
          },
          "reason": {
            "type": "string",
            "description": "Reason for adjustment",
            "example": "Cycle count adjustment"
          },
          "reasonCode": {
            "type": "string",
            "description": "Reason code",
            "example": "CYCLE_COUNT"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Physical count completed on 2024-01-15"
          }
        },
        "required": [
          "inventoryItemId",
          "newQuantity",
          "reason"
        ]
      },
      "CreateInventoryPricingRuleDto": {
        "type": "object",
        "properties": {
          "inventoryItemId": {
            "type": "string",
            "description": "Inventory item ID",
            "example": "inventory-item-uuid"
          },
          "name": {
            "type": "string",
            "description": "Rule name",
            "example": "Bulk Discount 100+",
            "minLength": 2,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Rule description",
            "example": "10% discount for orders of 100 or more units",
            "maxLength": 500
          },
          "priority": {
            "type": "number",
            "description": "Rule priority (higher = applied first)",
            "example": 1,
            "minimum": 0
          },
          "minimumQuantity": {
            "type": "number",
            "description": "Minimum quantity for rule to apply",
            "example": 100,
            "minimum": 1
          },
          "maximumQuantity": {
            "type": "number",
            "description": "Maximum quantity for rule to apply",
            "example": 500,
            "minimum": 1
          },
          "priceAdjustment": {
            "type": "number",
            "description": "Price adjustment amount",
            "example": -10
          },
          "adjustmentType": {
            "type": "string",
            "description": "Type of price adjustment",
            "example": "PERCENTAGE",
            "enum": [
              "FIXED",
              "PERCENTAGE",
              "MARKUP",
              "DISCOUNT"
            ]
          },
          "minimumStockLevel": {
            "type": "number",
            "description": "Minimum stock level required for rule to apply",
            "example": 50,
            "minimum": 0
          },
          "maximumStockLevel": {
            "type": "number",
            "description": "Maximum stock level for rule to apply",
            "example": 1000,
            "minimum": 0
          },
          "validFrom": {
            "type": "string",
            "description": "Rule valid from date",
            "example": "2024-01-01T00:00:00Z"
          },
          "validTo": {
            "type": "string",
            "description": "Rule valid to date",
            "example": "2024-12-31T23:59:59Z"
          }
        },
        "required": [
          "inventoryItemId",
          "name",
          "minimumQuantity",
          "priceAdjustment",
          "adjustmentType"
        ]
      },
      "InventoryPricingRuleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pricing rule ID",
            "example": "pricing-rule-uuid"
          },
          "inventoryItemId": {
            "type": "string",
            "description": "Inventory item ID",
            "example": "inventory-item-uuid"
          },
          "name": {
            "type": "string",
            "description": "Rule name",
            "example": "Bulk Discount 100+"
          },
          "description": {
            "type": "string",
            "description": "Rule description",
            "example": "10% discount for orders of 100 or more units"
          },
          "priority": {
            "type": "number",
            "description": "Rule priority",
            "example": 1
          },
          "minimumQuantity": {
            "type": "number",
            "description": "Minimum quantity for rule to apply",
            "example": 100
          },
          "maximumQuantity": {
            "type": "number",
            "description": "Maximum quantity for rule to apply",
            "example": 500
          },
          "priceAdjustment": {
            "type": "number",
            "description": "Price adjustment amount",
            "example": -10
          },
          "adjustmentType": {
            "type": "string",
            "description": "Type of price adjustment",
            "example": "PERCENTAGE",
            "enum": [
              "FIXED",
              "PERCENTAGE",
              "MARKUP",
              "DISCOUNT"
            ]
          },
          "minimumStockLevel": {
            "type": "number",
            "description": "Minimum stock level required",
            "example": 50
          },
          "maximumStockLevel": {
            "type": "number",
            "description": "Maximum stock level for rule to apply",
            "example": 1000
          },
          "validFrom": {
            "format": "date-time",
            "type": "string",
            "description": "Rule valid from date",
            "example": "2024-01-01T00:00:00Z"
          },
          "validTo": {
            "format": "date-time",
            "type": "string",
            "description": "Rule valid to date",
            "example": "2024-12-31T23:59:59Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the rule is active",
            "example": true
          },
          "isCurrentlyValid": {
            "type": "boolean",
            "description": "Whether the rule is currently valid (date-based)",
            "example": true
          },
          "inventoryItem": {
            "type": "object",
            "description": "Inventory item information (if requested)"
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID",
            "example": "user-uuid"
          },
          "updatedBy": {
            "type": "string",
            "description": "Updated by user ID",
            "example": "user-uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "inventoryItemId",
          "name",
          "priority",
          "minimumQuantity",
          "priceAdjustment",
          "adjustmentType",
          "isActive",
          "isCurrentlyValid",
          "createdBy",
          "updatedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "InventoryPricingRuleListDto": {
        "type": "object",
        "properties": {
          "rules": {
            "description": "List of pricing rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryPricingRuleResponseDto"
            }
          },
          "pagination": {
            "type": "object",
            "description": "Pagination information"
          },
          "summary": {
            "type": "object",
            "description": "Summary statistics"
          }
        },
        "required": [
          "rules",
          "pagination"
        ]
      },
      "UpdateInventoryPricingRuleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Rule name",
            "example": "Updated Bulk Discount 100+",
            "minLength": 2,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Rule description",
            "example": "15% discount for orders of 100 or more units",
            "maxLength": 500
          },
          "priority": {
            "type": "number",
            "description": "Rule priority",
            "example": 2,
            "minimum": 0
          },
          "minimumQuantity": {
            "type": "number",
            "description": "Minimum quantity for rule to apply",
            "example": 80,
            "minimum": 1
          },
          "maximumQuantity": {
            "type": "number",
            "description": "Maximum quantity for rule to apply",
            "example": 600,
            "minimum": 1
          },
          "priceAdjustment": {
            "type": "number",
            "description": "Price adjustment amount",
            "example": -15
          },
          "adjustmentType": {
            "type": "string",
            "description": "Type of price adjustment",
            "example": "PERCENTAGE",
            "enum": [
              "FIXED",
              "PERCENTAGE",
              "MARKUP",
              "DISCOUNT"
            ]
          },
          "minimumStockLevel": {
            "type": "number",
            "description": "Minimum stock level required",
            "example": 40,
            "minimum": 0
          },
          "maximumStockLevel": {
            "type": "number",
            "description": "Maximum stock level for rule to apply",
            "example": 1200,
            "minimum": 0
          },
          "validFrom": {
            "type": "string",
            "description": "Rule valid from date",
            "example": "2024-02-01T00:00:00Z"
          },
          "validTo": {
            "type": "string",
            "description": "Rule valid to date",
            "example": "2024-12-31T23:59:59Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the rule is active",
            "example": true
          }
        }
      },
      "PriceCalculationDto": {
        "type": "object",
        "properties": {
          "inventoryItemId": {
            "type": "string",
            "description": "Inventory item ID",
            "example": "inventory-item-uuid"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity for price calculation",
            "example": 150,
            "minimum": 1
          }
        },
        "required": [
          "inventoryItemId",
          "quantity"
        ]
      },
      "PriceCalculationResponseDto": {
        "type": "object",
        "properties": {
          "basePrice": {
            "type": "number",
            "description": "Base price per unit",
            "example": 299.99
          },
          "finalPrice": {
            "type": "number",
            "description": "Final price per unit after rules",
            "example": 269.99
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price for quantity",
            "example": 40498.5
          },
          "totalDiscount": {
            "type": "number",
            "description": "Total discount amount",
            "example": 4500
          },
          "discountPercentage": {
            "type": "number",
            "description": "Discount percentage",
            "example": 10
          },
          "appliedRules": {
            "description": "Applied pricing rules",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "quantity": {
            "type": "number",
            "description": "Quantity for calculation",
            "example": 150
          },
          "stockAvailable": {
            "type": "boolean",
            "description": "Whether stock is available for this quantity",
            "example": true
          }
        },
        "required": [
          "basePrice",
          "finalPrice",
          "totalPrice",
          "totalDiscount",
          "discountPercentage",
          "appliedRules",
          "quantity",
          "stockAvailable"
        ]
      },
      "PriceRangeDto": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "description": "Minimum price",
            "example": 100,
            "minimum": 0
          },
          "max": {
            "type": "number",
            "description": "Maximum price",
            "example": 1000,
            "minimum": 0
          }
        }
      },
      "SpecificationFilterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Specification name",
            "example": "cores"
          },
          "values": {
            "description": "Specification values to filter by",
            "example": [
              "4",
              "6",
              "8"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "values"
        ]
      },
      "SearchFiltersDto": {
        "type": "object",
        "properties": {
          "priceRange": {
            "description": "Price range filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceRangeDto"
              }
            ]
          },
          "brands": {
            "description": "Brand names to filter by",
            "example": [
              "Intel",
              "AMD"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "description": "Category IDs to filter by",
            "example": [
              "category-1-uuid",
              "category-2-uuid"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "merchants": {
            "description": "Merchant IDs to filter by",
            "example": [
              "merchant-1-uuid"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statuses": {
            "type": "array",
            "description": "Product statuses to filter by",
            "example": [
              "PUBLISHED"
            ],
            "items": {
              "type": "string",
              "enum": [
                "DRAFT",
                "PENDING_REVIEW",
                "APPROVED",
                "REJECTED",
                "PUBLISHED",
                "DISCONTINUED"
              ]
            }
          },
          "specifications": {
            "description": "Specification filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecificationFilterDto"
            }
          },
          "inStockOnly": {
            "type": "boolean",
            "description": "Show only products in stock",
            "example": true
          },
          "withImagesOnly": {
            "type": "boolean",
            "description": "Show only products with images",
            "example": false
          },
          "onSaleOnly": {
            "type": "boolean",
            "description": "Show only products on sale",
            "example": false
          }
        }
      },
      "SearchSortDto": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field to sort by",
            "example": "price",
            "enum": [
              "relevance",
              "name",
              "price",
              "createdAt",
              "updatedAt",
              "popularity",
              "rating"
            ]
          },
          "order": {
            "type": "string",
            "description": "Sort order",
            "example": "asc",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "ProductSearchDto": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "description": "Search query term",
            "example": "intel processor",
            "maxLength": 200
          },
          "type": {
            "type": "string",
            "description": "Search type",
            "example": "FULL_TEXT",
            "enum": [
              "FULL_TEXT",
              "SKU",
              "CATEGORY",
              "SPECIFICATION",
              "FILTERED",
              "COMPARISON"
            ]
          },
          "filters": {
            "description": "Search filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchFiltersDto"
              }
            ]
          },
          "sort": {
            "description": "Sort configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchSortDto"
              }
            ]
          },
          "page": {
            "type": "number",
            "description": "Page number",
            "example": 1,
            "minimum": 1
          },
          "limit": {
            "type": "number",
            "description": "Items per page",
            "example": 20,
            "minimum": 1,
            "maximum": 100
          },
          "includeVariants": {
            "type": "boolean",
            "description": "Include product variants in results",
            "example": false
          },
          "includeInventory": {
            "type": "boolean",
            "description": "Include inventory information",
            "example": true
          },
          "includeCategory": {
            "type": "boolean",
            "description": "Include category information",
            "example": true
          },
          "includeMerchant": {
            "type": "boolean",
            "description": "Include merchant information",
            "example": false
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse ID for availability filtering",
            "example": "warehouse-uuid"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity for pricing calculations",
            "example": 1,
            "minimum": 1
          }
        }
      },
      "ProductAvailabilityDto": {
        "type": "object",
        "properties": {
          "inStock": {
            "type": "boolean",
            "description": "Whether product is in stock",
            "example": true
          },
          "quantity": {
            "type": "number",
            "description": "Available quantity",
            "example": 150
          },
          "warehouse": {
            "type": "object",
            "description": "Warehouse information"
          },
          "leadTimeDays": {
            "type": "number",
            "description": "Estimated lead time in days",
            "example": 3
          },
          "restockDate": {
            "format": "date-time",
            "type": "string",
            "description": "Restock date if out of stock",
            "example": "2024-01-20T00:00:00Z"
          }
        },
        "required": [
          "inStock",
          "quantity",
          "warehouse"
        ]
      },
      "ProductPricingDto": {
        "type": "object",
        "properties": {
          "basePrice": {
            "type": "number",
            "description": "Base price per unit",
            "example": 299.99
          },
          "finalPrice": {
            "type": "number",
            "description": "Final price after quantity discounts",
            "example": 279.99
          },
          "quantity": {
            "type": "number",
            "description": "Quantity for pricing calculation",
            "example": 1
          },
          "discount": {
            "type": "number",
            "description": "Discount amount",
            "example": 20
          },
          "discountPercentage": {
            "type": "number",
            "description": "Discount percentage",
            "example": 6.67
          },
          "minimumOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity",
            "example": 1
          },
          "priceBreaks": {
            "description": "Price breaks for different quantities",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "basePrice",
          "finalPrice",
          "quantity"
        ]
      },
      "SearchProductDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID",
            "example": "product-uuid"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Intel Core i7-12700K"
          },
          "displayName": {
            "type": "string",
            "description": "Product display name",
            "example": "Intel Core i7-12700K Desktop Processor"
          },
          "sku": {
            "type": "string",
            "description": "Product SKU",
            "example": "INTEL-i7-12700K"
          },
          "brand": {
            "type": "string",
            "description": "Product brand",
            "example": "Intel"
          },
          "model": {
            "type": "string",
            "description": "Product model",
            "example": "i7-12700K"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short product description",
            "example": "High-performance desktop processor with 12 cores"
          },
          "images": {
            "description": "Product images",
            "example": [
              "https://example.com/image1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availability": {
            "description": "Product availability information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductAvailabilityDto"
              }
            ]
          },
          "pricing": {
            "description": "Product pricing information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductPricingDto"
              }
            ]
          },
          "category": {
            "type": "object",
            "description": "Product category information"
          },
          "merchant": {
            "type": "object",
            "description": "Merchant information"
          },
          "specifications": {
            "type": "object",
            "description": "Product specifications",
            "example": {
              "cores": 12,
              "threads": 20,
              "baseFrequency": "3.6 GHz"
            }
          },
          "relevanceScore": {
            "type": "number",
            "description": "Search relevance score",
            "example": 0.95
          },
          "variants": {
            "description": "Product variants (if requested)",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "status": {
            "type": "string",
            "description": "Product status",
            "example": "PUBLISHED",
            "enum": [
              "DRAFT",
              "PENDING_REVIEW",
              "APPROVED",
              "REJECTED",
              "PUBLISHED",
              "DISCONTINUED"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated date",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "sku",
          "images",
          "specifications",
          "relevanceScore",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "SearchPaginationDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Items per page",
            "example": 20
          },
          "total": {
            "type": "number",
            "description": "Total number of items",
            "example": 156
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 8
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there is a next page",
            "example": true
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there is a previous page",
            "example": false
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "totalPages",
          "hasNext",
          "hasPrev"
        ]
      },
      "SearchMetadataDto": {
        "type": "object",
        "properties": {
          "executionTime": {
            "type": "number",
            "description": "Search execution time in milliseconds",
            "example": 45
          },
          "appliedFilters": {
            "description": "Applied filters summary",
            "example": [
              "category:processors",
              "brand:Intel"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedTerms": {
            "description": "Suggested search terms",
            "example": [
              "intel core",
              "intel processors"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "didYouMean": {
            "description": "Did you mean suggestions",
            "example": [
              "intel core i7"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalFound": {
            "type": "number",
            "description": "Total products found before pagination",
            "example": 156
          },
          "searchQuery": {
            "type": "string",
            "description": "Search query that was executed",
            "example": "intel processor"
          },
          "searchType": {
            "type": "string",
            "description": "Search type used",
            "example": "FULL_TEXT"
          }
        },
        "required": [
          "executionTime",
          "appliedFilters",
          "totalFound"
        ]
      },
      "PriceRangeFilterDto": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "description": "Minimum price in the range",
            "example": 89.99
          },
          "max": {
            "type": "number",
            "description": "Maximum price in the range",
            "example": 899.99
          },
          "step": {
            "type": "number",
            "description": "Suggested price step for sliders",
            "example": 10
          },
          "selectedMin": {
            "type": "number",
            "description": "Currently selected minimum",
            "example": 200
          },
          "selectedMax": {
            "type": "number",
            "description": "Currently selected maximum",
            "example": 500
          }
        },
        "required": [
          "min",
          "max",
          "step"
        ]
      },
      "FilterOptionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Filter option value",
            "example": "Intel"
          },
          "label": {
            "type": "string",
            "description": "Display label for the option",
            "example": "Intel Corporation"
          },
          "count": {
            "type": "number",
            "description": "Number of products matching this filter",
            "example": 45
          },
          "selected": {
            "type": "boolean",
            "description": "Whether this filter is currently selected",
            "example": false
          }
        },
        "required": [
          "value",
          "label",
          "count"
        ]
      },
      "AvailableSpecificationFilterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Specification name",
            "example": "cores"
          },
          "label": {
            "type": "string",
            "description": "Display label",
            "example": "Number of Cores"
          },
          "options": {
            "description": "Available specification values",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOptionDto"
            }
          },
          "type": {
            "type": "string",
            "description": "Filter type",
            "example": "multiselect",
            "enum": [
              "select",
              "multiselect",
              "range",
              "boolean"
            ]
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement",
            "example": "cores"
          }
        },
        "required": [
          "name",
          "label",
          "options",
          "type"
        ]
      },
      "AvailableFiltersDto": {
        "type": "object",
        "properties": {
          "priceRange": {
            "description": "Price range filter",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceRangeFilterDto"
              }
            ]
          },
          "brands": {
            "description": "Brand filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOptionDto"
            }
          },
          "categories": {
            "description": "Category filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOptionDto"
            }
          },
          "merchants": {
            "description": "Merchant filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOptionDto"
            }
          },
          "specifications": {
            "description": "Specification filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSpecificationFilterDto"
            }
          },
          "availability": {
            "description": "Availability filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOptionDto"
            }
          },
          "other": {
            "type": "object",
            "description": "Other dynamic filters"
          }
        }
      },
      "ProductSearchResponseDto": {
        "type": "object",
        "properties": {
          "products": {
            "description": "Search results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchProductDto"
            }
          },
          "pagination": {
            "description": "Pagination information",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchPaginationDto"
              }
            ]
          },
          "metadata": {
            "description": "Search metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchMetadataDto"
              }
            ]
          },
          "availableFilters": {
            "description": "Available filters for current search",
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableFiltersDto"
              }
            ]
          },
          "facets": {
            "type": "object",
            "description": "Search facets and aggregations"
          }
        },
        "required": [
          "products",
          "pagination",
          "metadata"
        ]
      },
      "QuickSearchResponseDto": {
        "type": "object",
        "properties": {
          "products": {
            "description": "Quick search results (limited)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchProductDto"
            }
          },
          "totalMatches": {
            "type": "number",
            "description": "Total matches found",
            "example": 156
          },
          "hasMore": {
            "type": "boolean",
            "description": "Whether more results are available",
            "example": true
          },
          "suggestions": {
            "description": "Search suggestions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "executionTime": {
            "type": "number",
            "description": "Search execution time",
            "example": 23
          }
        },
        "required": [
          "products",
          "totalMatches",
          "hasMore",
          "suggestions",
          "executionTime"
        ]
      },
      "BulkSkuSearchDto": {
        "type": "object",
        "properties": {
          "skus": {
            "description": "List of SKUs to search for",
            "example": [
              "INTEL-i7-12700K",
              "AMD-RYZEN-5600X",
              "NVIDIA-RTX-4070"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeInventory": {
            "type": "boolean",
            "description": "Include inventory information",
            "example": true
          },
          "includePricing": {
            "type": "boolean",
            "description": "Include pricing information",
            "example": true
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse ID for availability filtering",
            "example": "warehouse-uuid"
          }
        },
        "required": [
          "skus"
        ]
      },
      "BulkSkuSearchResponseDto": {
        "type": "object",
        "properties": {
          "found": {
            "type": "object",
            "description": "Found products mapped by SKU"
          },
          "notFound": {
            "description": "SKUs that were not found",
            "example": [
              "INVALID-SKU-1",
              "OUT-OF-STOCK-SKU"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalSearched": {
            "type": "number",
            "description": "Total number of SKUs searched",
            "example": 15
          },
          "totalFound": {
            "type": "number",
            "description": "Number of SKUs found",
            "example": 13
          },
          "executionTime": {
            "type": "number",
            "description": "Search execution time in milliseconds",
            "example": 125
          }
        },
        "required": [
          "found",
          "notFound",
          "totalSearched",
          "totalFound",
          "executionTime"
        ]
      },
      "SearchSuggestionDto": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "Partial search term for suggestions",
            "example": "intel",
            "minLength": 2,
            "maxLength": 50
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of suggestions",
            "example": 10,
            "minimum": 1,
            "maximum": 20
          },
          "categoryId": {
            "type": "string",
            "description": "Category to limit suggestions to",
            "example": "category-uuid"
          }
        },
        "required": [
          "term"
        ]
      },
      "SearchSuggestionResponseDto": {
        "type": "object",
        "properties": {
          "products": {
            "description": "Product name suggestions",
            "example": [
              "Intel Core i7",
              "Intel Core i9",
              "Intel Xeon"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "description": "Category suggestions",
            "example": [
              "Processors",
              "Graphics Cards"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "brands": {
            "description": "Brand suggestions",
            "example": [
              "Intel",
              "AMD"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "popular": {
            "description": "Popular search suggestions",
            "example": [
              "intel processor",
              "graphics card"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of suggestions",
            "example": 8
          },
          "searchTerm": {
            "type": "string",
            "description": "Search term used for suggestions",
            "example": "intel"
          }
        },
        "required": [
          "products",
          "categories",
          "brands",
          "popular",
          "total",
          "searchTerm"
        ]
      },
      "SavedSearchResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Saved search ID",
            "example": "saved-search-uuid"
          },
          "userId": {
            "type": "string",
            "description": "User ID who owns this search",
            "example": "user-uuid"
          },
          "name": {
            "type": "string",
            "description": "Search name",
            "example": "High-end Graphics Cards"
          },
          "searchTerm": {
            "type": "string",
            "description": "Search term",
            "example": "graphics card"
          },
          "filters": {
            "type": "object",
            "description": "Search filters"
          },
          "alerts": {
            "type": "object",
            "description": "Alert settings"
          },
          "statistics": {
            "type": "object",
            "description": "Search statistics"
          },
          "description": {
            "type": "string",
            "description": "Description or notes",
            "example": "Monitor high-end graphics cards"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the search is active",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "userId",
          "name",
          "filters",
          "alerts",
          "statistics",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "SavedSearchListDto": {
        "type": "object",
        "properties": {
          "searches": {
            "description": "List of saved searches",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavedSearchResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count of saved searches",
            "example": 15
          },
          "activeCount": {
            "type": "number",
            "description": "Active searches count",
            "example": 12
          },
          "alertEnabledCount": {
            "type": "number",
            "description": "Searches with alerts enabled",
            "example": 8
          }
        },
        "required": [
          "searches",
          "total",
          "activeCount",
          "alertEnabledCount"
        ]
      },
      "CreateSavedSearchDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the saved search",
            "example": "High-end Graphics Cards",
            "minLength": 1,
            "maxLength": 100
          },
          "searchTerm": {
            "type": "string",
            "description": "Search term",
            "example": "graphics card"
          },
          "filters": {
            "type": "object",
            "description": "Search filters configuration"
          },
          "alertOnNewResults": {
            "type": "boolean",
            "description": "Alert when new products match this search",
            "example": true
          },
          "alertOnPriceChange": {
            "type": "boolean",
            "description": "Alert when prices change for matching products",
            "example": true
          },
          "alertFrequency": {
            "type": "string",
            "description": "Alert frequency",
            "example": "DAILY",
            "enum": [
              "IMMEDIATE",
              "DAILY",
              "WEEKLY",
              "MONTHLY"
            ]
          },
          "priceChangeThreshold": {
            "type": "number",
            "description": "Price change threshold percentage for alerts",
            "example": 5,
            "minimum": 1,
            "maximum": 50
          },
          "description": {
            "type": "string",
            "description": "Description or notes for this saved search",
            "example": "Monitor high-end graphics cards for upcoming project",
            "maxLength": 500
          }
        },
        "required": [
          "name",
          "filters"
        ]
      },
      "UpdateSavedSearchDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the saved search",
            "example": "Updated High-end Graphics Cards",
            "minLength": 1,
            "maxLength": 100
          },
          "searchTerm": {
            "type": "string",
            "description": "Search term",
            "example": "high-end graphics card"
          },
          "filters": {
            "type": "object",
            "description": "Search filters configuration"
          },
          "alertOnNewResults": {
            "type": "boolean",
            "description": "Alert when new products match this search",
            "example": false
          },
          "alertOnPriceChange": {
            "type": "boolean",
            "description": "Alert when prices change for matching products",
            "example": false
          },
          "alertFrequency": {
            "type": "string",
            "description": "Alert frequency",
            "example": "WEEKLY",
            "enum": [
              "IMMEDIATE",
              "DAILY",
              "WEEKLY",
              "MONTHLY"
            ]
          },
          "priceChangeThreshold": {
            "type": "number",
            "description": "Price change threshold percentage for alerts",
            "example": 10,
            "minimum": 1,
            "maximum": 50
          },
          "description": {
            "type": "string",
            "description": "Description or notes for this saved search",
            "example": "Updated description",
            "maxLength": 500
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the saved search is active",
            "example": true
          }
        }
      },
      "ExecuteSavedSearchDto": {
        "type": "object",
        "properties": {
          "searchId": {
            "type": "string",
            "description": "Saved search ID to execute",
            "example": "saved-search-uuid"
          },
          "page": {
            "type": "number",
            "description": "Override pagination - page number",
            "example": 1,
            "minimum": 1
          },
          "limit": {
            "type": "number",
            "description": "Override pagination - items per page",
            "example": 20,
            "minimum": 1,
            "maximum": 100
          },
          "includeAvailability": {
            "type": "boolean",
            "description": "Include availability information",
            "example": true
          },
          "includePricing": {
            "type": "boolean",
            "description": "Include pricing information",
            "example": true
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse ID for availability filtering",
            "example": "warehouse-uuid"
          }
        },
        "required": [
          "searchId"
        ]
      },
      "SearchVolumeDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date/time period",
            "example": "2024-01-15"
          },
          "searchCount": {
            "type": "number",
            "description": "Number of searches in this period",
            "example": 1250
          },
          "uniqueUsers": {
            "type": "number",
            "description": "Number of unique users searching",
            "example": 350
          },
          "avgExecutionTime": {
            "type": "number",
            "description": "Average search execution time in ms",
            "example": 125
          },
          "successRate": {
            "type": "number",
            "description": "Success rate (searches with results)",
            "example": 0.92
          }
        },
        "required": [
          "date",
          "searchCount",
          "uniqueUsers",
          "avgExecutionTime",
          "successRate"
        ]
      },
      "PopularSearchTermDto": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "Search term",
            "example": "graphics card"
          },
          "count": {
            "type": "number",
            "description": "Number of searches",
            "example": 1250
          },
          "percentage": {
            "type": "number",
            "description": "Percentage of total searches",
            "example": 8.5
          },
          "avgResults": {
            "type": "number",
            "description": "Average number of results",
            "example": 45
          },
          "clickThroughRate": {
            "type": "number",
            "description": "Click-through rate",
            "example": 0.15
          },
          "trend": {
            "type": "string",
            "description": "Trend direction compared to previous period",
            "example": "up",
            "enum": [
              "up",
              "down",
              "stable"
            ]
          },
          "changePercentage": {
            "type": "number",
            "description": "Change percentage from previous period",
            "example": 15.5
          }
        },
        "required": [
          "term",
          "count",
          "percentage",
          "avgResults",
          "clickThroughRate"
        ]
      },
      "ZeroResultSearchDto": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "Search term that returned no results",
            "example": "rtx 5090"
          },
          "count": {
            "type": "number",
            "description": "Number of times this search returned zero results",
            "example": 45
          },
          "lastSearched": {
            "format": "date-time",
            "type": "string",
            "description": "Last occurrence of this search",
            "example": "2024-01-15T10:30:00Z"
          },
          "suggestions": {
            "description": "Suggested alternatives",
            "example": [
              "rtx 4090",
              "rtx 4080"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "similarProductsCount": {
            "type": "number",
            "description": "Similar products found for this term",
            "example": 3
          }
        },
        "required": [
          "term",
          "count",
          "lastSearched"
        ]
      },
      "CategoryAnalyticsDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category name",
            "example": "Graphics Cards"
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID",
            "example": "category-uuid"
          },
          "searchCount": {
            "type": "number",
            "description": "Number of searches in this category",
            "example": 2100
          },
          "percentage": {
            "type": "number",
            "description": "Percentage of total searches",
            "example": 15.2
          },
          "avgProductsPerSearch": {
            "type": "number",
            "description": "Average products per search",
            "example": 35
          },
          "clickThroughRate": {
            "type": "number",
            "description": "Click-through rate for this category",
            "example": 0.18
          },
          "topTerms": {
            "description": "Most popular search terms in this category",
            "example": [
              "rtx 4080",
              "nvidia graphics",
              "gaming gpu"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "category",
          "categoryId",
          "searchCount",
          "percentage",
          "avgProductsPerSearch",
          "clickThroughRate",
          "topTerms"
        ]
      },
      "SearchPerformanceDto": {
        "type": "object",
        "properties": {
          "avgExecutionTime": {
            "type": "number",
            "description": "Average search execution time in milliseconds",
            "example": 125
          },
          "p95ExecutionTime": {
            "type": "number",
            "description": "95th percentile execution time",
            "example": 250
          },
          "successRate": {
            "type": "number",
            "description": "Search success rate",
            "example": 0.92
          },
          "avgResultsPerSearch": {
            "type": "number",
            "description": "Average number of results per search",
            "example": 35
          },
          "clickThroughRate": {
            "type": "number",
            "description": "Click-through rate",
            "example": 0.15
          },
          "conversionRate": {
            "type": "number",
            "description": "Search-to-conversion rate",
            "example": 0.05
          },
          "trends": {
            "description": "Performance trends over time",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "avgExecutionTime",
          "p95ExecutionTime",
          "successRate",
          "avgResultsPerSearch",
          "clickThroughRate",
          "conversionRate",
          "trends"
        ]
      },
      "SearchAnalyticsResponseDto": {
        "type": "object",
        "properties": {
          "volume": {
            "description": "Search volume over time",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchVolumeDto"
            }
          },
          "topTerms": {
            "description": "Popular search terms",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PopularSearchTermDto"
            }
          },
          "zeroResults": {
            "description": "Searches with zero results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZeroResultSearchDto"
            }
          },
          "categories": {
            "description": "Category-wise search analytics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryAnalyticsDto"
            }
          },
          "performance": {
            "description": "Search performance metrics",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchPerformanceDto"
              }
            ]
          },
          "summary": {
            "type": "object",
            "description": "Summary statistics"
          },
          "period": {
            "type": "object",
            "description": "Analysis period"
          }
        },
        "required": [
          "volume",
          "topTerms",
          "zeroResults",
          "categories",
          "performance",
          "summary",
          "period"
        ]
      },
      "RFQRequirementsDto": {
        "type": "object",
        "properties": {
          "deliveryRequirements": {
            "type": "string",
            "description": "Special delivery requirements",
            "example": "Delivery to loading dock, business hours only"
          },
          "qualityRequirements": {
            "type": "string",
            "description": "Quality or certification requirements",
            "example": "ISO 9001 certified, RoHS compliant"
          },
          "paymentPreferences": {
            "type": "string",
            "description": "Payment preferences",
            "example": "NET30, credit card accepted"
          },
          "additionalTerms": {
            "type": "string",
            "description": "Additional terms and conditions",
            "example": "Warranty must be minimum 2 years"
          }
        }
      },
      "RFQItemSpecificationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Specification name",
            "example": "Operating Temperature"
          },
          "value": {
            "type": "string",
            "description": "Specification value",
            "example": "-20°C to +60°C"
          },
          "unit": {
            "type": "string",
            "description": "Specification unit",
            "example": "°C"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether this specification is required or preferred",
            "example": true
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "i": {
        "type": "object",
        "properties": {}
      },
      "CreateRFQItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Existing product ID if requesting quote for catalog product",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "customProductName": {
            "type": "string",
            "description": "Custom product name for non-catalog items",
            "example": "High-Performance Industrial Router"
          },
          "customSku": {
            "type": "string",
            "description": "Custom SKU or part number",
            "example": "HPR-2024-001"
          },
          "category": {
            "type": "string",
            "description": "Product category",
            "example": "Network Equipment"
          },
          "brand": {
            "type": "string",
            "description": "Preferred brand",
            "example": "Cisco"
          },
          "model": {
            "type": "string",
            "description": "Product model",
            "example": "ISR4321"
          },
          "specifications": {
            "description": "Detailed specifications for the product",
            "example": [
              {
                "name": "Throughput",
                "value": "100 Mbps",
                "unit": "Mbps",
                "isRequired": true
              },
              {
                "name": "Ports",
                "value": "4x Gigabit Ethernet",
                "isRequired": true
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RFQItemSpecificationDto"
            }
          },
          "technicalDrawing": {
            "type": "string",
            "description": "URL to technical drawing or datasheet",
            "example": "https://storage.example.com/technical-drawings/router-specs.pdf"
          },
          "quantities": {
            "description": "Quantity tiers for pricing",
            "example": [
              10,
              50,
              100
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "targetPrice": {
            "description": "Target unit price",
            "example": "1500.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "budgetRange": {
            "type": "string",
            "description": "Budget range description",
            "example": "$10,000 - $15,000"
          },
          "deliveryDate": {
            "type": "string",
            "description": "Required delivery date",
            "example": "2024-12-01"
          },
          "qualityStandards": {
            "type": "string",
            "description": "Quality standards or certifications required",
            "example": "UL Listed, FCC certified"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for this item",
            "example": "Must be compatible with existing network infrastructure"
          },
          "priority": {
            "type": "number",
            "description": "Priority of this item within the RFQ (1 = highest)",
            "example": 1,
            "minimum": 1,
            "maximum": 10
          }
        },
        "required": [
          "specifications",
          "quantities"
        ]
      },
      "CreateRFQDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the RFQ",
            "example": "Network Infrastructure Equipment RFQ"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the RFQ",
            "example": "We are seeking quotes for network equipment to upgrade our corporate infrastructure."
          },
          "companyId": {
            "type": "string",
            "description": "Company ID making the request",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "urgencyLevel": {
            "type": "string",
            "description": "Urgency level of the request",
            "example": "NORMAL",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT",
              "CRITICAL"
            ]
          },
          "expectedDelivery": {
            "type": "string",
            "description": "Expected delivery date",
            "example": "2024-12-01"
          },
          "deliveryLocation": {
            "type": "string",
            "description": "Delivery location address",
            "example": "123 Business Park Dr, Technology City, TC 12345"
          },
          "deadline": {
            "type": "string",
            "description": "Deadline for quote submissions",
            "example": "2024-11-15"
          },
          "requirements": {
            "description": "Additional requirements and terms",
            "allOf": [
              {
                "$ref": "#/components/schemas/RFQRequirementsDto"
              }
            ]
          },
          "attachments": {
            "description": "File attachment URLs",
            "example": [
              "https://storage.example.com/rfq-attachments/technical-spec.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "items": {
            "description": "Items being requested for quote",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRFQItemDto"
            }
          }
        },
        "required": [
          "title",
          "urgencyLevel",
          "items"
        ]
      },
      "RFQItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "RFQ item ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "rfqId": {
            "type": "string",
            "description": "RFQ ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "productId": {
            "type": "string",
            "description": "Product ID if referencing catalog product",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "product": {
            "type": "object",
            "description": "Product details if available"
          },
          "customProductName": {
            "type": "string",
            "description": "Custom product name for non-catalog items",
            "example": "High-Performance Industrial Router"
          },
          "customSku": {
            "type": "string",
            "description": "Custom SKU or part number",
            "example": "HPR-2024-001"
          },
          "category": {
            "type": "string",
            "description": "Product category",
            "example": "Network Equipment"
          },
          "brand": {
            "type": "string",
            "description": "Preferred brand",
            "example": "Cisco"
          },
          "model": {
            "type": "string",
            "description": "Product model",
            "example": "ISR4321"
          },
          "specifications": {
            "description": "Product specifications",
            "example": [
              {
                "name": "Throughput",
                "value": "100 Mbps",
                "unit": "Mbps",
                "isRequired": true
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "technicalDrawing": {
            "type": "string",
            "description": "URL to technical drawing",
            "example": "https://storage.example.com/technical-drawings/router-specs.pdf"
          },
          "quantities": {
            "description": "Quantity tiers for pricing",
            "example": [
              10,
              50,
              100
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "targetPrice": {
            "type": "string",
            "description": "Target unit price",
            "example": "1500.00"
          },
          "budgetRange": {
            "type": "string",
            "description": "Budget range description",
            "example": "$10,000 - $15,000"
          },
          "deliveryDate": {
            "type": "string",
            "description": "Required delivery date",
            "example": "2024-12-01T00:00:00Z"
          },
          "qualityStandards": {
            "type": "string",
            "description": "Quality standards required",
            "example": "UL Listed, FCC certified"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Must be compatible with existing infrastructure"
          },
          "priority": {
            "type": "number",
            "description": "Item priority",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "rfqId",
          "specifications",
          "quantities",
          "priority",
          "createdAt",
          "updatedAt"
        ]
      },
      "RFQResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "RFQ ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "rfqNumber": {
            "type": "string",
            "description": "Auto-generated RFQ number",
            "example": "RFQ-2024-001"
          },
          "title": {
            "type": "string",
            "description": "RFQ title",
            "example": "Network Infrastructure Equipment RFQ"
          },
          "description": {
            "type": "string",
            "description": "RFQ description",
            "example": "Seeking quotes for network equipment upgrade"
          },
          "requester": {
            "type": "object",
            "description": "Requester information"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          },
          "urgencyLevel": {
            "type": "string",
            "description": "Urgency level",
            "example": "NORMAL",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT",
              "CRITICAL"
            ]
          },
          "expectedDelivery": {
            "type": "string",
            "description": "Expected delivery date",
            "example": "2024-12-01T00:00:00Z"
          },
          "deliveryLocation": {
            "type": "string",
            "description": "Delivery location",
            "example": "123 Business Park Dr, Technology City, TC 12345"
          },
          "status": {
            "type": "string",
            "description": "RFQ status",
            "example": "SUBMITTED",
            "enum": [
              "DRAFT",
              "SUBMITTED",
              "UNDER_REVIEW",
              "QUOTES_RECEIVED",
              "QUOTES_COMPARED",
              "QUOTE_SELECTED",
              "NEGOTIATING",
              "APPROVED",
              "CONVERTED",
              "EXPIRED",
              "CANCELLED"
            ]
          },
          "submittedAt": {
            "type": "string",
            "description": "Submission timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "deadline": {
            "type": "string",
            "description": "Quote submission deadline",
            "example": "2024-11-15T23:59:59Z"
          },
          "requirements": {
            "description": "Additional requirements",
            "allOf": [
              {
                "$ref": "#/components/schemas/RFQRequirementsDto"
              }
            ]
          },
          "attachments": {
            "description": "Attachment URLs",
            "example": [
              "https://storage.example.com/rfq-attachments/specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "items": {
            "description": "RFQ items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RFQItemResponseDto"
            }
          },
          "quoteCount": {
            "type": "number",
            "description": "Number of quotes received",
            "example": 3
          },
          "isActive": {
            "type": "boolean",
            "description": "Active status",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "rfqNumber",
          "title",
          "requester",
          "urgencyLevel",
          "status",
          "items",
          "quoteCount",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "RFQListDto": {
        "type": "object",
        "properties": {
          "rfqs": {
            "description": "List of RFQs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RFQResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of RFQs",
            "example": 25
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 3
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there are more pages",
            "example": true
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there are previous pages",
            "example": false
          }
        },
        "required": [
          "rfqs",
          "total",
          "page",
          "limit",
          "totalPages",
          "hasNext",
          "hasPrev"
        ]
      },
      "UpdateRFQDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the RFQ",
            "example": "Updated Network Infrastructure Equipment RFQ"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the RFQ",
            "example": "Updated description with additional requirements."
          },
          "urgencyLevel": {
            "type": "string",
            "description": "Urgency level of the request",
            "example": "HIGH",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT",
              "CRITICAL"
            ]
          },
          "expectedDelivery": {
            "type": "string",
            "description": "Expected delivery date",
            "example": "2024-12-15"
          },
          "deliveryLocation": {
            "type": "string",
            "description": "Delivery location address",
            "example": "456 Updated Business Park Dr, Technology City, TC 12345"
          },
          "deadline": {
            "type": "string",
            "description": "Deadline for quote submissions",
            "example": "2024-11-20"
          },
          "requirements": {
            "description": "Additional requirements and terms",
            "allOf": [
              {
                "$ref": "#/components/schemas/RFQRequirementsDto"
              }
            ]
          },
          "attachments": {
            "description": "File attachment URLs",
            "example": [
              "https://storage.example.com/rfq-attachments/updated-spec.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SubmitRFQDto": {
        "type": "object",
        "properties": {
          "deadline": {
            "type": "string",
            "description": "Final deadline for quote submissions",
            "example": "2024-11-30"
          },
          "submissionNotes": {
            "type": "string",
            "description": "Additional notes for submission",
            "example": "Please provide detailed technical specifications with quotes"
          }
        }
      },
      "QuoteItemPricingDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Quantity for this pricing tier",
            "example": 100
          },
          "unitPrice": {
            "type": "string",
            "description": "Unit price for this quantity",
            "example": "150.00"
          },
          "totalPrice": {
            "type": "string",
            "description": "Total price for this quantity",
            "example": "15000.00"
          },
          "discountPercent": {
            "type": "number",
            "description": "Discount percentage applied",
            "example": 5
          },
          "leadTimeDays": {
            "type": "number",
            "description": "Lead time for this quantity in days",
            "example": 14
          }
        },
        "required": [
          "quantity",
          "unitPrice",
          "totalPrice"
        ]
      },
      "AlternativeProductDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Alternative product ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "name": {
            "type": "string",
            "description": "Alternative product name",
            "example": "Enhanced Industrial Router Model B"
          },
          "sku": {
            "type": "string",
            "description": "Alternative product SKU",
            "example": "EIR-2024-B"
          },
          "reason": {
            "type": "string",
            "description": "Reason for suggesting this alternative",
            "example": "Better performance at similar price point"
          },
          "priceDifference": {
            "type": "string",
            "description": "Price difference from original request",
            "example": "+50.00"
          },
          "specifications": {
            "type": "object",
            "description": "Additional specifications",
            "example": {
              "throughput": "200 Mbps",
              "warranty": "3 years"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "QuoteItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Quote item ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "quoteId": {
            "type": "string",
            "description": "Quote ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "rfqItemId": {
            "type": "string",
            "description": "RFQ item ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "product": {
            "type": "object",
            "description": "Product details"
          },
          "quantityPricing": {
            "description": "Pricing for different quantities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteItemPricingDto"
            }
          },
          "description": {
            "type": "string",
            "description": "Item description",
            "example": "Premium router with extended warranty"
          },
          "specifications": {
            "type": "object",
            "description": "Item specifications",
            "example": {
              "warranty": "3 years",
              "support": "24/7"
            }
          },
          "leadTime": {
            "type": "number",
            "description": "Lead time in days",
            "example": 10
          },
          "suggestedAlternatives": {
            "description": "Suggested alternatives",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlternativeProductDto"
            }
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Free installation included"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "quoteId",
          "rfqItemId",
          "quantityPricing",
          "createdAt",
          "updatedAt"
        ]
      },
      "QuoteResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Quote ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "quoteNumber": {
            "type": "string",
            "description": "Auto-generated quote number",
            "example": "QUO-2024-001"
          },
          "rfqId": {
            "type": "string",
            "description": "RFQ ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "rfq": {
            "type": "object",
            "description": "RFQ details"
          },
          "merchant": {
            "type": "object",
            "description": "Merchant information"
          },
          "totalAmount": {
            "type": "string",
            "description": "Total amount",
            "example": "15750.00"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "validUntil": {
            "type": "string",
            "description": "Quote valid until",
            "example": "2024-12-15T23:59:59Z"
          },
          "paymentTerms": {
            "type": "string",
            "description": "Payment terms",
            "example": "NET30, Credit Card accepted"
          },
          "deliveryTerms": {
            "type": "string",
            "description": "Delivery terms",
            "example": "FOB destination, free shipping"
          },
          "warrantyTerms": {
            "type": "string",
            "description": "Warranty terms",
            "example": "2-year manufacturer warranty"
          },
          "leadTime": {
            "type": "number",
            "description": "Lead time in days",
            "example": 14
          },
          "status": {
            "type": "string",
            "description": "Quote status",
            "example": "SUBMITTED",
            "enum": [
              "DRAFT",
              "SUBMITTED",
              "UNDER_REVIEW",
              "APPROVED",
              "REJECTED",
              "EXPIRED",
              "ACCEPTED",
              "COUNTER_OFFERED",
              "WITHDRAWN"
            ]
          },
          "submittedAt": {
            "type": "string",
            "description": "Submission timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "respondedAt": {
            "type": "string",
            "description": "Response timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "subtotal": {
            "type": "string",
            "description": "Subtotal amount",
            "example": "15000.00"
          },
          "discountAmount": {
            "type": "string",
            "description": "Discount amount",
            "example": "500.00"
          },
          "taxAmount": {
            "type": "string",
            "description": "Tax amount",
            "example": "750.00"
          },
          "shippingAmount": {
            "type": "string",
            "description": "Shipping amount",
            "example": "200.00"
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer-visible notes",
            "example": "Thank you for your business"
          },
          "attachments": {
            "description": "Supporting documents",
            "example": [
              "https://storage.example.com/quotes/specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "number",
            "description": "Quote version",
            "example": 1
          },
          "parentQuoteId": {
            "type": "string",
            "description": "Parent quote ID for revisions",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "items": {
            "description": "Quote items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteItemResponseDto"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Active status",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "quoteNumber",
          "rfqId",
          "merchant",
          "totalAmount",
          "currency",
          "validUntil",
          "status",
          "subtotal",
          "version",
          "items",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "QuoteListDto": {
        "type": "object",
        "properties": {
          "quotes": {
            "description": "List of quotes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of quotes",
            "example": 15
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 2
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there are more pages",
            "example": true
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there are previous pages",
            "example": false
          }
        },
        "required": [
          "quotes",
          "total",
          "page",
          "limit",
          "totalPages",
          "hasNext",
          "hasPrev"
        ]
      },
      "CreateQuoteItemDto": {
        "type": "object",
        "properties": {
          "rfqItemId": {
            "type": "string",
            "description": "RFQ item ID this quote item responds to",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "productId": {
            "type": "string",
            "description": "Product ID if quoting existing catalog product",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "quantityPricing": {
            "description": "Pricing for different quantity tiers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteItemPricingDto"
            }
          },
          "description": {
            "type": "string",
            "description": "Item description or notes",
            "example": "High-performance router with extended warranty"
          },
          "specifications": {
            "type": "object",
            "description": "Item-specific specifications",
            "example": {
              "warranty": "3 years",
              "support": "24/7"
            }
          },
          "leadTime": {
            "type": "number",
            "description": "Lead time for this item in days",
            "example": 10
          },
          "suggestedAlternatives": {
            "description": "Suggested alternative products",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlternativeProductDto"
            }
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for this item",
            "example": "Free installation included for orders over 50 units"
          }
        },
        "required": [
          "rfqItemId",
          "quantityPricing"
        ]
      },
      "CreateQuoteDto": {
        "type": "object",
        "properties": {
          "rfqId": {
            "type": "string",
            "description": "RFQ ID this quote responds to",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "validUntil": {
            "type": "string",
            "description": "Quote valid until date",
            "example": "2024-12-15"
          },
          "paymentTerms": {
            "type": "string",
            "description": "Payment terms",
            "example": "NET30, Credit Card accepted"
          },
          "deliveryTerms": {
            "type": "string",
            "description": "Delivery terms",
            "example": "FOB destination, free shipping on orders over $10,000"
          },
          "warrantyTerms": {
            "type": "string",
            "description": "Warranty terms",
            "example": "2-year manufacturer warranty with optional extended warranty available"
          },
          "leadTime": {
            "type": "number",
            "description": "Overall lead time in days",
            "example": 14
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "discountAmount": {
            "description": "Discount amount",
            "example": "500.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "taxAmount": {
            "description": "Tax amount",
            "example": "750.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "shippingAmount": {
            "description": "Shipping amount",
            "example": "200.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "notes": {
            "type": "string",
            "description": "Internal notes (not visible to customer)",
            "example": "High-priority customer, consider additional discount"
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer-visible notes",
            "example": "Thank you for your inquiry. We look forward to working with you."
          },
          "attachments": {
            "description": "Supporting document URLs",
            "example": [
              "https://storage.example.com/quotes/technical-specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "items": {
            "description": "Quote items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateQuoteItemDto"
            }
          }
        },
        "required": [
          "rfqId",
          "validUntil",
          "items"
        ]
      },
      "UpdateQuoteDto": {
        "type": "object",
        "properties": {
          "validUntil": {
            "type": "string",
            "description": "Quote valid until date",
            "example": "2024-12-20"
          },
          "paymentTerms": {
            "type": "string",
            "description": "Payment terms",
            "example": "NET30, Credit Card accepted, early payment discount available"
          },
          "deliveryTerms": {
            "type": "string",
            "description": "Delivery terms",
            "example": "FOB destination, expedited shipping available"
          },
          "warrantyTerms": {
            "type": "string",
            "description": "Warranty terms",
            "example": "3-year extended warranty included"
          },
          "leadTime": {
            "type": "number",
            "description": "Overall lead time in days",
            "example": 10
          },
          "discountAmount": {
            "description": "Discount amount",
            "example": "750.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "taxAmount": {
            "description": "Tax amount",
            "example": "800.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "shippingAmount": {
            "description": "Shipping amount",
            "example": "150.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "notes": {
            "type": "string",
            "description": "Internal notes",
            "example": "Updated pricing based on volume discount"
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer-visible notes",
            "example": "Updated quote with improved pricing and terms"
          },
          "attachments": {
            "description": "Supporting document URLs",
            "example": [
              "https://storage.example.com/quotes/updated-specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AcceptQuoteDto": {
        "type": "object",
        "properties": {
          "acceptanceNotes": {
            "type": "string",
            "description": "Notes about the acceptance",
            "example": "Approved by procurement team"
          },
          "expectedStartDate": {
            "type": "string",
            "description": "Expected start date for fulfillment",
            "example": "2024-12-01"
          }
        }
      },
      "RejectQuoteDto": {
        "type": "object",
        "properties": {
          "rejectionReason": {
            "type": "string",
            "description": "Reason for rejection",
            "example": "Price exceeds budget"
          },
          "feedback": {
            "type": "string",
            "description": "Additional feedback",
            "example": "Please consider a lower price point for future opportunities"
          }
        },
        "required": [
          "rejectionReason"
        ]
      },
      "CounterOfferDto": {
        "type": "object",
        "properties": {
          "counterAmount": {
            "description": "Counter offer total amount",
            "example": "14500.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "requestedDeliveryTerms": {
            "type": "string",
            "description": "Requested delivery terms",
            "example": "FOB origin, expedited shipping"
          },
          "requestedPaymentTerms": {
            "type": "string",
            "description": "Requested payment terms",
            "example": "NET45 terms preferred"
          },
          "requestedLeadTime": {
            "type": "number",
            "description": "Requested lead time in days",
            "example": 7
          },
          "counterOfferNotes": {
            "type": "string",
            "description": "Counter offer notes",
            "example": "Can you match this price with the same delivery terms?"
          }
        },
        "required": [
          "counterOfferNotes"
        ]
      },
      "QuoteRevisionDto": {
        "type": "object",
        "properties": {
          "revisionReason": {
            "type": "string",
            "description": "Reason for revision",
            "example": "Customer requested pricing adjustment"
          },
          "updates": {
            "description": "Updated quote data",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateQuoteDto"
              }
            ]
          }
        },
        "required": [
          "revisionReason"
        ]
      },
      "RFQCommentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Comment ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "rfqId": {
            "type": "string",
            "description": "RFQ ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "author": {
            "type": "object",
            "description": "Author information"
          },
          "content": {
            "type": "string",
            "description": "Comment content",
            "example": "Can you provide more details about the technical specifications?"
          },
          "isInternal": {
            "type": "boolean",
            "description": "Whether this is an internal comment",
            "example": false
          },
          "attachments": {
            "description": "File attachments",
            "example": [
              "https://storage.example.com/comments/clarification.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "rfqId",
          "author",
          "content",
          "isInternal",
          "createdAt",
          "updatedAt"
        ]
      },
      "RFQCommentListDto": {
        "type": "object",
        "properties": {
          "comments": {
            "description": "List of RFQ comments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RFQCommentResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of comments",
            "example": 5
          },
          "publicCount": {
            "type": "number",
            "description": "Number of public comments",
            "example": 3
          },
          "internalCount": {
            "type": "number",
            "description": "Number of internal comments",
            "example": 2
          }
        },
        "required": [
          "comments",
          "total",
          "publicCount",
          "internalCount"
        ]
      },
      "CreateRFQCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Comment content",
            "example": "Can you provide more details about the technical specifications?",
            "maxLength": 2000
          },
          "isInternal": {
            "type": "boolean",
            "description": "Whether this is an internal comment (not visible to requesters)",
            "example": false,
            "default": false
          },
          "attachments": {
            "description": "File attachment URLs",
            "example": [
              "https://storage.example.com/comments/clarification.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "QuoteCommentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Comment ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "quoteId": {
            "type": "string",
            "description": "Quote ID",
            "example": "12345678-1234-1234-1234-123456789012"
          },
          "author": {
            "type": "object",
            "description": "Author information"
          },
          "content": {
            "type": "string",
            "description": "Comment content",
            "example": "We can offer additional volume discounts for larger quantities."
          },
          "isInternal": {
            "type": "boolean",
            "description": "Whether this is an internal comment",
            "example": false
          },
          "attachments": {
            "description": "File attachments",
            "example": [
              "https://storage.example.com/comments/additional-specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "quoteId",
          "author",
          "content",
          "isInternal",
          "createdAt",
          "updatedAt"
        ]
      },
      "QuoteCommentListDto": {
        "type": "object",
        "properties": {
          "comments": {
            "description": "List of quote comments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteCommentResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of comments",
            "example": 5
          },
          "publicCount": {
            "type": "number",
            "description": "Number of public comments",
            "example": 3
          },
          "internalCount": {
            "type": "number",
            "description": "Number of internal comments",
            "example": 2
          }
        },
        "required": [
          "comments",
          "total",
          "publicCount",
          "internalCount"
        ]
      },
      "CreateQuoteCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Comment content",
            "example": "We can offer additional volume discounts for larger quantities.",
            "maxLength": 2000
          },
          "isInternal": {
            "type": "boolean",
            "description": "Whether this is an internal comment (not visible to customers)",
            "example": false,
            "default": false
          },
          "attachments": {
            "description": "File attachment URLs",
            "example": [
              "https://storage.example.com/comments/additional-specs.pdf"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "CreateCartDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Cart name for collaborative shopping",
            "example": "Q3 Equipment Purchase"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID for B2B context",
            "example": "clh1234567890"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID for guest carts",
            "example": "guest_session_123456"
          },
          "isGuest": {
            "type": "boolean",
            "description": "Whether this is a guest cart",
            "example": false
          }
        }
      },
      "CartItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Cart item ID",
            "example": "clh1234567890"
          },
          "cartId": {
            "type": "string",
            "description": "Cart ID",
            "example": "clh1234567890"
          },
          "product": {
            "type": "object",
            "description": "Product information"
          },
          "productVariant": {
            "type": "object",
            "description": "Product variant information"
          },
          "customProductName": {
            "type": "string",
            "description": "Custom product name",
            "example": "Custom Industrial Motor - 5HP"
          },
          "customSku": {
            "type": "string",
            "description": "Custom SKU",
            "example": "CUSTOM-MOTOR-5HP"
          },
          "customDescription": {
            "type": "string",
            "description": "Custom description",
            "example": "High-efficiency industrial motor with specific requirements"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity in cart",
            "example": 5
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price",
            "example": 299.99
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price for this line item",
            "example": 1499.95
          },
          "originalPrice": {
            "type": "number",
            "description": "Original price before discounts",
            "example": 349.99
          },
          "sourceType": {
            "type": "string",
            "description": "Source of cart item",
            "enum": [
              "MANUAL",
              "QUOTE",
              "PREVIOUS_ORDER",
              "BULK_UPLOAD",
              "SAVED_LIST"
            ],
            "example": "MANUAL"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID",
            "example": "quote_123456"
          },
          "requiredByDate": {
            "type": "string",
            "description": "Required delivery date",
            "example": "2024-09-15T00:00:00Z"
          },
          "notes": {
            "type": "string",
            "description": "Item notes",
            "example": "Please ensure 240V configuration"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Whether item is approved",
            "example": false
          },
          "approvedBy": {
            "type": "string",
            "description": "ID of user who approved",
            "example": "clh1234567890"
          },
          "approvedAt": {
            "type": "string",
            "description": "Approval timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "status": {
            "type": "string",
            "description": "Cart item status",
            "enum": [
              "ACTIVE",
              "SAVED",
              "REMOVED",
              "ORDERED"
            ],
            "example": "ACTIVE"
          },
          "isAvailable": {
            "type": "boolean",
            "description": "Whether item is available",
            "example": true
          },
          "availabilityMessage": {
            "type": "string",
            "description": "Availability message",
            "example": "In stock - 15 available"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-08-07T15:35:00Z"
          }
        },
        "required": [
          "id",
          "cartId",
          "quantity",
          "unitPrice",
          "totalPrice",
          "sourceType",
          "isApproved",
          "status",
          "isAvailable",
          "createdAt",
          "updatedAt"
        ]
      },
      "CartSummaryDto": {
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "number",
            "description": "Total number of items in cart",
            "example": 15
          },
          "totalQuantity": {
            "type": "number",
            "description": "Total quantity of all items",
            "example": 42
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal before taxes and shipping",
            "example": 2499.95
          },
          "estimatedTax": {
            "type": "number",
            "description": "Estimated tax amount",
            "example": 199.99
          },
          "estimatedShipping": {
            "type": "number",
            "description": "Estimated shipping cost",
            "example": 49.99
          },
          "estimatedTotal": {
            "type": "number",
            "description": "Total estimated cost",
            "example": 2749.93
          },
          "itemsRequiringApproval": {
            "type": "number",
            "description": "Number of items requiring approval",
            "example": 3
          },
          "unavailableItems": {
            "type": "number",
            "description": "Number of unavailable items",
            "example": 1
          }
        },
        "required": [
          "itemCount",
          "totalQuantity",
          "subtotal",
          "estimatedTax",
          "estimatedShipping",
          "estimatedTotal",
          "itemsRequiringApproval",
          "unavailableItems"
        ]
      },
      "CartResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Cart ID",
            "example": "clh1234567890"
          },
          "userId": {
            "type": "string",
            "description": "User ID (null for guest carts)",
            "example": "clh1234567890"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID for guest carts",
            "example": "guest_session_123456"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          },
          "name": {
            "type": "string",
            "description": "Cart name",
            "example": "Q3 Equipment Purchase"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether cart is active",
            "example": true
          },
          "isGuest": {
            "type": "boolean",
            "description": "Whether this is a guest cart",
            "example": false
          },
          "currency": {
            "type": "string",
            "description": "Cart currency",
            "example": "USD"
          },
          "shippingAddressId": {
            "type": "string",
            "description": "Shipping address ID",
            "example": "clh1234567890"
          },
          "billingAddressId": {
            "type": "string",
            "description": "Billing address ID",
            "example": "clh1234567890"
          },
          "items": {
            "description": "Cart items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemResponseDto"
            }
          },
          "summary": {
            "description": "Cart summary",
            "allOf": [
              {
                "$ref": "#/components/schemas/CartSummaryDto"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-08-07T15:35:00Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date for guest carts",
            "example": "2024-08-14T15:30:00Z"
          }
        },
        "required": [
          "id",
          "isActive",
          "isGuest",
          "currency",
          "items",
          "summary",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateCartDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated cart name",
            "example": "Q3 Equipment Purchase - Revised"
          },
          "shippingAddressId": {
            "type": "string",
            "description": "Updated shipping address ID",
            "example": "clh1234567890"
          },
          "billingAddressId": {
            "type": "string",
            "description": "Updated billing address ID",
            "example": "clh1234567890"
          }
        }
      },
      "MergeCartDto": {
        "type": "object",
        "properties": {
          "guestSessionId": {
            "type": "string",
            "description": "Guest cart session ID to merge",
            "example": "guest_session_123456"
          },
          "mergeStrategy": {
            "type": "string",
            "description": "Strategy for merging duplicate items",
            "enum": [
              "combine_quantities",
              "keep_latest",
              "keep_both"
            ],
            "example": "combine_quantities"
          }
        },
        "required": [
          "guestSessionId"
        ]
      },
      "CartValidationDto": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Overall cart validation status",
            "example": true
          },
          "errors": {
            "description": "Cart-level validation errors",
            "example": [
              "Cart is empty",
              "Billing address required"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "warnings": {
            "description": "Cart-level warnings",
            "example": [
              "Some items may have longer lead times"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "itemValidation": {
            "type": "object",
            "description": "Item-level validation results",
            "example": {
              "clh1234567890": {
                "isValid": false,
                "errors": [
                  "Product out of stock"
                ],
                "warnings": [
                  "Price may have changed"
                ]
              }
            }
          },
          "availability": {
            "type": "object",
            "description": "Availability check results",
            "example": {
              "clh1234567890": {
                "available": 8,
                "requested": 10,
                "leadTime": 7
              }
            }
          }
        },
        "required": [
          "isValid",
          "errors",
          "warnings",
          "itemValidation",
          "availability"
        ]
      },
      "CreateCartItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID to add to cart",
            "example": "clh1234567890"
          },
          "productVariantId": {
            "type": "string",
            "description": "Product variant ID for specific variant",
            "example": "clh1234567890"
          },
          "customProductName": {
            "type": "string",
            "description": "Custom product name (for quote-derived items)",
            "example": "Custom Industrial Motor - 5HP"
          },
          "customSku": {
            "type": "string",
            "description": "Custom SKU (for quote-derived items)",
            "example": "CUSTOM-MOTOR-5HP"
          },
          "customDescription": {
            "type": "string",
            "description": "Custom product description",
            "example": "High-efficiency industrial motor with specific requirements"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity to add to cart",
            "example": 5,
            "minimum": 1
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price for custom items",
            "example": 299.99
          },
          "sourceType": {
            "type": "string",
            "description": "Source of the cart item",
            "enum": [
              "MANUAL",
              "QUOTE",
              "PREVIOUS_ORDER",
              "BULK_UPLOAD",
              "SAVED_LIST"
            ],
            "example": "MANUAL"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID (Quote ID, Order ID, etc.)",
            "example": "quote_123456"
          },
          "requiredByDate": {
            "type": "string",
            "description": "Required delivery date",
            "example": "2024-09-15T00:00:00Z"
          },
          "notes": {
            "type": "string",
            "description": "Special notes for this item",
            "example": "Please ensure 240V configuration"
          }
        },
        "required": [
          "quantity"
        ]
      },
      "UpdateCartItemDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Updated quantity",
            "example": 10,
            "minimum": 1
          },
          "unitPrice": {
            "type": "number",
            "description": "Updated unit price for custom items",
            "example": 279.99
          },
          "requiredByDate": {
            "type": "string",
            "description": "Updated required delivery date",
            "example": "2024-09-20T00:00:00Z"
          },
          "notes": {
            "type": "string",
            "description": "Updated notes for this item",
            "example": "Changed to 480V configuration"
          },
          "status": {
            "type": "string",
            "description": "Cart item status",
            "enum": [
              "ACTIVE",
              "SAVED",
              "REMOVED",
              "ORDERED"
            ],
            "example": "ACTIVE"
          }
        }
      },
      "BulkAddToCartDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Array of items to add to cart",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCartItemDto"
            }
          },
          "sourceType": {
            "type": "string",
            "description": "Source of the bulk add operation",
            "enum": [
              "MANUAL",
              "QUOTE",
              "PREVIOUS_ORDER",
              "BULK_UPLOAD",
              "SAVED_LIST"
            ],
            "example": "BULK_UPLOAD"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID for bulk operation",
            "example": "bulk_upload_123"
          }
        },
        "required": [
          "items"
        ]
      },
      "QuoteToCartDto": {
        "type": "object",
        "properties": {
          "quoteId": {
            "type": "string",
            "description": "Quote ID to convert to cart",
            "example": "clh1234567890"
          },
          "quoteItemIds": {
            "description": "Specific quote item IDs to add (if not provided, all items will be added)",
            "example": [
              "clh1234567890",
              "clh0987654321"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preserveQuotedPrices": {
            "type": "boolean",
            "description": "Whether to preserve quoted prices",
            "example": true
          }
        },
        "required": [
          "quoteId"
        ]
      },
      "CreateAddressDto": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company ID (for company addresses)",
            "example": "clh1234567890"
          },
          "type": {
            "type": "string",
            "description": "Address type",
            "enum": [
              "BILLING",
              "SHIPPING",
              "BOTH"
            ],
            "example": "BOTH"
          },
          "name": {
            "type": "string",
            "description": "Address nickname/name",
            "example": "Headquarters - Main Office"
          },
          "contactName": {
            "type": "string",
            "description": "Contact person name",
            "example": "John Smith"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+1-555-123-4567"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email address",
            "example": "shipping@company.com"
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1",
            "example": "123 Industrial Blvd"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2 (suite, floor, etc.)",
            "example": "Suite 400"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Atlanta"
          },
          "state": {
            "type": "string",
            "description": "State/Province",
            "example": "GA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal/ZIP code",
            "example": "30309"
          },
          "country": {
            "type": "string",
            "description": "Country code",
            "example": "US",
            "default": "US"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default address",
            "example": false
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "Delivery instructions",
            "example": "Use loading dock entrance on the west side. Ring bell twice."
          },
          "accessCodes": {
            "type": "string",
            "description": "Access codes for delivery",
            "example": "Gate code: 1234, Building code: 5678"
          },
          "businessHours": {
            "type": "string",
            "description": "Business hours for deliveries",
            "example": "Monday-Friday 8:00 AM - 5:00 PM"
          }
        },
        "required": [
          "type",
          "name",
          "contactName",
          "addressLine1",
          "city",
          "state",
          "postalCode"
        ]
      },
      "AddressResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Address ID",
            "example": "clh1234567890"
          },
          "userId": {
            "type": "string",
            "description": "User ID (if personal address)",
            "example": "clh1234567890"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID (if company address)",
            "example": "clh1234567890"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          },
          "type": {
            "type": "string",
            "description": "Address type",
            "enum": [
              "BILLING",
              "SHIPPING",
              "BOTH"
            ],
            "example": "BOTH"
          },
          "name": {
            "type": "string",
            "description": "Address nickname/name",
            "example": "Headquarters - Main Office"
          },
          "contactName": {
            "type": "string",
            "description": "Contact person name",
            "example": "John Smith"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+1-555-123-4567"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email address",
            "example": "shipping@company.com"
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1",
            "example": "123 Industrial Blvd"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 400"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Atlanta"
          },
          "state": {
            "type": "string",
            "description": "State/Province",
            "example": "GA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal/ZIP code",
            "example": "30309"
          },
          "country": {
            "type": "string",
            "description": "Country code",
            "example": "US"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default address",
            "example": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether address is active",
            "example": true
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "Delivery instructions",
            "example": "Use loading dock entrance on the west side. Ring bell twice."
          },
          "accessCodes": {
            "type": "string",
            "description": "Access codes for delivery",
            "example": "Gate code: 1234, Building code: 5678"
          },
          "businessHours": {
            "type": "string",
            "description": "Business hours for deliveries",
            "example": "Monday-Friday 8:00 AM - 5:00 PM"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-08-07T15:35:00Z"
          },
          "formattedAddress": {
            "type": "string",
            "description": "Formatted address string",
            "example": "123 Industrial Blvd, Suite 400, Atlanta, GA 30309, US"
          }
        },
        "required": [
          "id",
          "type",
          "name",
          "contactName",
          "addressLine1",
          "city",
          "state",
          "postalCode",
          "country",
          "isDefault",
          "isActive",
          "createdAt",
          "updatedAt",
          "formattedAddress"
        ]
      },
      "AddressListDto": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "List of addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of addresses",
            "example": 5
          },
          "defaultShipping": {
            "description": "Default shipping address",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressResponseDto"
              }
            ]
          },
          "defaultBilling": {
            "description": "Default billing address",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressResponseDto"
              }
            ]
          }
        },
        "required": [
          "addresses",
          "total"
        ]
      },
      "UpdateAddressDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Address type",
            "enum": [
              "BILLING",
              "SHIPPING",
              "BOTH"
            ],
            "example": "SHIPPING"
          },
          "name": {
            "type": "string",
            "description": "Address nickname/name",
            "example": "Warehouse - East Coast"
          },
          "contactName": {
            "type": "string",
            "description": "Contact person name",
            "example": "Jane Doe"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+1-555-987-6543"
          },
          "contactEmail": {
            "type": "string",
            "description": "Contact email address",
            "example": "warehouse@company.com"
          },
          "addressLine1": {
            "type": "string",
            "description": "Address line 1",
            "example": "456 Warehouse Ave"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Building B"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Charlotte"
          },
          "state": {
            "type": "string",
            "description": "State/Province",
            "example": "NC"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal/ZIP code",
            "example": "28202"
          },
          "country": {
            "type": "string",
            "description": "Country code",
            "example": "US"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default address",
            "example": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether address is active",
            "example": true
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "Delivery instructions",
            "example": "Updated: Use main entrance during business hours"
          },
          "accessCodes": {
            "type": "string",
            "description": "Access codes for delivery",
            "example": "Updated gate code: 9876"
          },
          "businessHours": {
            "type": "string",
            "description": "Business hours for deliveries",
            "example": "Monday-Friday 7:00 AM - 6:00 PM, Saturday 9:00 AM - 2:00 PM"
          }
        }
      },
      "SetDefaultAddressDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Address type to set as default",
            "enum": [
              "BILLING",
              "SHIPPING",
              "BOTH"
            ],
            "example": "SHIPPING"
          }
        },
        "required": [
          "type"
        ]
      },
      "InitiateCheckoutDto": {
        "type": "object",
        "properties": {
          "cartId": {
            "type": "string",
            "description": "Cart ID to checkout",
            "example": "clh1234567890"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID for B2B context",
            "example": "clh1234567890"
          }
        },
        "required": [
          "cartId"
        ]
      },
      "CheckoutCalculationDto": {
        "type": "object",
        "properties": {
          "subtotal": {
            "type": "number",
            "description": "Items subtotal",
            "example": 2499.95
          },
          "taxAmount": {
            "type": "number",
            "description": "Tax amount",
            "example": 199.99
          },
          "shippingAmount": {
            "type": "number",
            "description": "Shipping amount",
            "example": 49.99
          },
          "discountAmount": {
            "type": "number",
            "description": "Discount amount",
            "example": 100
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount",
            "example": 2649.93
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "taxBreakdown": {
            "type": "object",
            "description": "Tax breakdown by jurisdiction",
            "example": {
              "state": {
                "rate": 0.06,
                "amount": 149.99
              },
              "local": {
                "rate": 0.02,
                "amount": 50
              }
            }
          },
          "appliedDiscounts": {
            "description": "Applied discounts",
            "example": [
              {
                "type": "volume_discount",
                "description": "Volume discount (>$2000)",
                "amount": 100,
                "percentage": 4
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "shippingOptions": {
            "description": "Shipping options",
            "example": [
              {
                "method": "Standard Ground",
                "cost": 49.99,
                "estimatedDays": 5
              },
              {
                "method": "Express",
                "cost": 129.99,
                "estimatedDays": 2
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "subtotal",
          "taxAmount",
          "shippingAmount",
          "discountAmount",
          "totalAmount",
          "currency",
          "taxBreakdown",
          "appliedDiscounts",
          "shippingOptions"
        ]
      },
      "CheckoutResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Checkout ID",
            "example": "clh1234567890"
          },
          "cartId": {
            "type": "string",
            "description": "Cart ID",
            "example": "clh1234567890"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "clh1234567890"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          },
          "shippingAddress": {
            "description": "Shipping address",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressResponseDto"
              }
            ]
          },
          "billingAddress": {
            "description": "Billing address",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressResponseDto"
              }
            ]
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "CREDIT_CARD",
              "CORPORATE_ACCOUNT",
              "PURCHASE_ORDER",
              "ACH_TRANSFER",
              "NET_TERMS",
              "WIRE_TRANSFER"
            ],
            "example": "CORPORATE_ACCOUNT"
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number",
            "example": "PO-2024-08-001"
          },
          "calculation": {
            "description": "Pricing calculation",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutCalculationDto"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Checkout status",
            "enum": [
              "PENDING",
              "PENDING_APPROVAL",
              "APPROVED",
              "REJECTED",
              "PROCESSING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ],
            "example": "PENDING"
          },
          "requiresApproval": {
            "type": "boolean",
            "description": "Whether checkout requires approval",
            "example": false
          },
          "approvalStatus": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "NONE",
              "PENDING",
              "APPROVED",
              "REJECTED",
              "ESCALATED"
            ],
            "example": "NONE"
          },
          "approvalRequestedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Approval requested timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "approvalRequestedBy": {
            "type": "string",
            "description": "ID of user who requested approval",
            "example": "clh1234567890"
          },
          "approvedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Approval timestamp",
            "example": "2024-08-07T15:45:00Z"
          },
          "approvedBy": {
            "type": "string",
            "description": "ID of user who approved",
            "example": "clh1234567890"
          },
          "rejectedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Rejection timestamp",
            "example": "2024-08-07T15:45:00Z"
          },
          "rejectedBy": {
            "type": "string",
            "description": "ID of user who rejected",
            "example": "clh1234567890"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Rejection reason",
            "example": "Exceeds monthly budget limit"
          },
          "preferredDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Preferred delivery date",
            "example": "2024-09-15T00:00:00Z"
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "Delivery instructions",
            "example": "Leave at loading dock if no one available"
          },
          "shippingMethod": {
            "type": "string",
            "description": "Shipping method",
            "example": "Standard Ground"
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer notes",
            "example": "Rush order - needed by end of week"
          },
          "internalNotes": {
            "type": "string",
            "description": "Internal notes",
            "example": "Large order - may require freight shipping"
          },
          "orderId": {
            "type": "string",
            "description": "Created order ID (when checkout completes)",
            "example": "clh1234567890"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "Payment intent ID (Stripe, etc.)",
            "example": "pi_1234567890"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-08-07T15:35:00Z"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Completion timestamp",
            "example": "2024-08-07T16:00:00Z"
          }
        },
        "required": [
          "id",
          "cartId",
          "userId",
          "calculation",
          "status",
          "requiresApproval",
          "approvalStatus",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateCheckoutShippingDto": {
        "type": "object",
        "properties": {
          "shippingAddressId": {
            "type": "string",
            "description": "Shipping address ID",
            "example": "clh1234567890"
          },
          "preferredDeliveryDate": {
            "type": "string",
            "description": "Preferred delivery date",
            "example": "2024-09-15T00:00:00Z"
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "Delivery instructions",
            "example": "Leave at loading dock if no one available"
          },
          "shippingMethod": {
            "type": "string",
            "description": "Shipping method",
            "example": "Standard Ground"
          }
        },
        "required": [
          "shippingAddressId"
        ]
      },
      "UpdateCheckoutBillingDto": {
        "type": "object",
        "properties": {
          "billingAddressId": {
            "type": "string",
            "description": "Billing address ID",
            "example": "clh1234567890"
          }
        },
        "required": [
          "billingAddressId"
        ]
      },
      "UpdateCheckoutPaymentDto": {
        "type": "object",
        "properties": {
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "CREDIT_CARD",
              "CORPORATE_ACCOUNT",
              "PURCHASE_ORDER",
              "ACH_TRANSFER",
              "NET_TERMS",
              "WIRE_TRANSFER"
            ],
            "example": "CORPORATE_ACCOUNT"
          },
          "paymentDetails": {
            "type": "string",
            "description": "Encrypted payment details (for credit cards)",
            "example": "encrypted_payment_token_12345"
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number (for corporate purchases)",
            "example": "PO-2024-08-001"
          }
        },
        "required": [
          "paymentMethod"
        ]
      },
      "UpdateCheckoutNotesDto": {
        "type": "object",
        "properties": {
          "customerNotes": {
            "type": "string",
            "description": "Customer notes for the order",
            "example": "Please coordinate delivery with our receiving department"
          },
          "internalNotes": {
            "type": "string",
            "description": "Internal notes (admin/merchant only)",
            "example": "Large order - may require freight shipping"
          }
        }
      },
      "SubmitCheckoutDto": {
        "type": "object",
        "properties": {
          "customerNotes": {
            "type": "string",
            "description": "Final customer notes",
            "example": "Rush order - needed by end of week"
          },
          "bypassApproval": {
            "type": "boolean",
            "description": "Whether to bypass approval for authorized users",
            "example": false
          }
        }
      },
      "ApproveCheckoutDto": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean",
            "description": "Approval decision",
            "example": true
          },
          "approvalNotes": {
            "type": "string",
            "description": "Approval notes",
            "example": "Approved with budget allocation from Q3 capital expenses"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Rejection reason (if not approved)",
            "example": "Exceeds monthly budget limit"
          }
        },
        "required": [
          "approved"
        ]
      },
      "CheckoutListDto": {
        "type": "object",
        "properties": {
          "checkouts": {
            "description": "List of checkouts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of checkouts",
            "example": 45
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 20
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 3
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there are more pages",
            "example": true
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there are previous pages",
            "example": false
          }
        },
        "required": [
          "checkouts",
          "total",
          "page",
          "limit",
          "totalPages",
          "hasNext",
          "hasPrev"
        ]
      },
      "ApprovalRequirementDto": {
        "type": "object",
        "properties": {
          "required": {
            "type": "boolean",
            "description": "Whether approval is required",
            "example": true
          },
          "reason": {
            "type": "string",
            "description": "Reason for approval requirement",
            "example": "Order total exceeds user approval limit of $1,000"
          },
          "userApprovalLimit": {
            "type": "number",
            "description": "User approval limit",
            "example": 1000
          },
          "orderTotal": {
            "type": "number",
            "description": "Order total amount",
            "example": 2649.93
          },
          "requiredLevel": {
            "type": "string",
            "description": "Required approval level",
            "example": "manager"
          },
          "eligibleApprovers": {
            "description": "Eligible approvers",
            "example": [
              {
                "userId": "clh1234567890",
                "name": "John Manager",
                "email": "john.manager@company.com",
                "approvalLimit": 10000
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "required",
          "reason",
          "userApprovalLimit",
          "orderTotal",
          "requiredLevel",
          "eligibleApprovers"
        ]
      },
      "CreateSavedItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID to save",
            "example": "clh1234567890"
          },
          "productVariantId": {
            "type": "string",
            "description": "Product variant ID to save",
            "example": "clh1234567890"
          },
          "name": {
            "type": "string",
            "description": "Custom name for the saved item",
            "example": "High-Efficiency Motor for Line 3"
          },
          "notes": {
            "type": "string",
            "description": "Notes about the saved item",
            "example": "Need to verify voltage requirements before ordering"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity to save",
            "example": 3,
            "minimum": 1,
            "default": 1
          },
          "savedPrice": {
            "type": "number",
            "description": "Price when saved (for tracking price changes)",
            "example": 299.99
          },
          "listName": {
            "type": "string",
            "description": "List name to save item to",
            "example": "Q4 Equipment Needs"
          },
          "tags": {
            "description": "Tags for organization",
            "example": [
              "motors",
              "high-priority",
              "line-3"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SavedItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Saved item ID",
            "example": "clh1234567890"
          },
          "userId": {
            "type": "string",
            "description": "User ID who saved the item",
            "example": "clh1234567890"
          },
          "product": {
            "type": "object",
            "description": "Product information"
          },
          "productVariant": {
            "type": "object",
            "description": "Product variant information"
          },
          "name": {
            "type": "string",
            "description": "Custom name for the saved item",
            "example": "High-Efficiency Motor for Line 3"
          },
          "notes": {
            "type": "string",
            "description": "Notes about the saved item",
            "example": "Need to verify voltage requirements before ordering"
          },
          "quantity": {
            "type": "number",
            "description": "Saved quantity",
            "example": 3
          },
          "savedPrice": {
            "type": "number",
            "description": "Price when saved",
            "example": 299.99
          },
          "currentPrice": {
            "type": "number",
            "description": "Current price (for comparison)",
            "example": 279.99
          },
          "priceChange": {
            "type": "number",
            "description": "Price change since saved",
            "example": -20
          },
          "priceChangePercentage": {
            "type": "number",
            "description": "Price change percentage",
            "example": -6.67
          },
          "listName": {
            "type": "string",
            "description": "List name",
            "example": "Q4 Equipment Needs"
          },
          "tags": {
            "description": "Tags for organization",
            "example": [
              "motors",
              "high-priority",
              "line-3"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether item is active",
            "example": true
          },
          "isAvailable": {
            "type": "boolean",
            "description": "Whether product is currently available",
            "example": true
          },
          "availabilityMessage": {
            "type": "string",
            "description": "Availability message",
            "example": "In stock - 12 available"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-08-07T15:35:00Z"
          }
        },
        "required": [
          "id",
          "userId",
          "quantity",
          "priceChange",
          "priceChangePercentage",
          "tags",
          "isActive",
          "isAvailable",
          "createdAt",
          "updatedAt"
        ]
      },
      "SavedListResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "List ID",
            "example": "clh1234567890"
          },
          "name": {
            "type": "string",
            "description": "List name",
            "example": "Q4 Equipment Procurement"
          },
          "description": {
            "type": "string",
            "description": "List description",
            "example": "Equipment needed for Q4 production line expansion"
          },
          "userId": {
            "type": "string",
            "description": "Owner user ID",
            "example": "clh1234567890"
          },
          "tags": {
            "description": "List tags",
            "example": [
              "q4",
              "production",
              "expansion"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isPublic": {
            "type": "boolean",
            "description": "Whether list is public",
            "example": false
          },
          "itemCount": {
            "type": "number",
            "description": "Number of items in list",
            "example": 12
          },
          "totalEstimatedValue": {
            "type": "number",
            "description": "Total estimated value",
            "example": 3499.88
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-08-07T15:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-08-07T15:35:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "userId",
          "tags",
          "isPublic",
          "itemCount",
          "totalEstimatedValue",
          "createdAt",
          "updatedAt"
        ]
      },
      "SavedItemsListDto": {
        "type": "object",
        "properties": {
          "savedItems": {
            "description": "List of saved items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavedItemResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of saved items",
            "example": 35
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 20
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 2
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there are more pages",
            "example": true
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there are previous pages",
            "example": false
          },
          "availableLists": {
            "description": "Available lists",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavedListResponseDto"
            }
          },
          "availableTags": {
            "description": "Available tags",
            "example": [
              "motors",
              "high-priority",
              "line-3",
              "approved"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "savedItems",
          "total",
          "page",
          "limit",
          "totalPages",
          "hasNext",
          "hasPrev",
          "availableLists",
          "availableTags"
        ]
      },
      "UpdateSavedItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated custom name",
            "example": "High-Efficiency Motor for Line 3 - Updated Specs"
          },
          "notes": {
            "type": "string",
            "description": "Updated notes",
            "example": "Confirmed 240V requirement with engineering team"
          },
          "quantity": {
            "type": "number",
            "description": "Updated quantity",
            "example": 5,
            "minimum": 1
          },
          "savedPrice": {
            "type": "number",
            "description": "Updated saved price",
            "example": 279.99
          },
          "listName": {
            "type": "string",
            "description": "Updated list name",
            "example": "Q4 Equipment Needs - Priority Items"
          },
          "tags": {
            "description": "Updated tags",
            "example": [
              "motors",
              "urgent",
              "line-3",
              "approved"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether item is active",
            "example": true
          }
        }
      },
      "AddSavedItemToCartDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Quantity to add to cart (defaults to saved quantity)",
            "example": 2,
            "minimum": 1
          },
          "notes": {
            "type": "string",
            "description": "Notes for the cart item",
            "example": "Adding from saved list - verify availability"
          }
        }
      },
      "BulkAddSavedItemsToCartDto": {
        "type": "object",
        "properties": {
          "savedItemIds": {
            "description": "Array of saved item IDs to add to cart",
            "example": [
              "clh1234567890",
              "clh0987654321"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "useSavedQuantities": {
            "type": "boolean",
            "description": "Whether to use saved quantities or custom quantities",
            "example": true
          },
          "customQuantities": {
            "description": "Custom quantities for each item (if useSavedQuantities is false)",
            "example": [
              2,
              5,
              1
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "savedItemIds"
        ]
      },
      "CreateOrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "uuid-product-id"
          },
          "productVariantId": {
            "type": "string",
            "description": "Product variant ID",
            "example": "uuid-variant-id"
          },
          "customProductName": {
            "type": "string",
            "description": "Custom product name (for quote-derived items)",
            "example": "Custom Steel Component"
          },
          "customSku": {
            "type": "string",
            "description": "Custom SKU",
            "example": "CUSTOM-001"
          },
          "customDescription": {
            "type": "string",
            "description": "Custom product description",
            "example": "Custom manufactured steel component per specifications"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity ordered",
            "example": 10,
            "minimum": 1
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price",
            "example": 99.99
          },
          "requestedDeliveryDate": {
            "type": "string",
            "description": "Item-specific delivery date",
            "example": "2024-08-15T00:00:00Z"
          },
          "itemNotes": {
            "type": "string",
            "description": "Item notes",
            "example": "Customer prefers blue color if available"
          }
        },
        "required": [
          "quantity",
          "unitPrice"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "checkoutId": {
            "type": "string",
            "description": "Checkout ID to create order from",
            "example": "uuid-checkout-id"
          },
          "quoteId": {
            "type": "string",
            "description": "Quote ID to create order from",
            "example": "uuid-quote-id"
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Customer purchase order number",
            "example": "PO-2024-001"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID for B2B orders",
            "example": "uuid-company-id"
          },
          "shippingAddressId": {
            "type": "string",
            "description": "Shipping address ID",
            "example": "uuid-address-id"
          },
          "billingAddressId": {
            "type": "string",
            "description": "Billing address ID",
            "example": "uuid-address-id"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "CREDIT_CARD",
              "CORPORATE_ACCOUNT",
              "PURCHASE_ORDER",
              "ACH_TRANSFER",
              "NET_TERMS",
              "WIRE_TRANSFER"
            ],
            "example": "CORPORATE_ACCOUNT"
          },
          "requestedDeliveryDate": {
            "type": "string",
            "description": "Requested delivery date",
            "example": "2024-08-15T00:00:00Z"
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer notes",
            "example": "Please deliver after 2 PM"
          },
          "specialInstructions": {
            "type": "string",
            "description": "Special delivery instructions",
            "example": "Fragile items - handle with care"
          },
          "rushOrder": {
            "type": "boolean",
            "description": "Mark as rush order",
            "example": false
          },
          "creditTerms": {
            "type": "string",
            "description": "Credit terms",
            "example": "NET30"
          },
          "items": {
            "description": "Order items to create",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            }
          }
        },
        "required": [
          "purchaseOrderNumber",
          "companyId",
          "shippingAddressId",
          "billingAddressId",
          "paymentMethod",
          "items"
        ]
      },
      "OrderItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order item ID"
          },
          "product": {
            "type": "object",
            "description": "Product information"
          },
          "productVariant": {
            "type": "object",
            "description": "Product variant information"
          },
          "customProductName": {
            "type": "string",
            "description": "Custom product name"
          },
          "customSku": {
            "type": "string",
            "description": "Custom SKU"
          },
          "customDescription": {
            "type": "string",
            "description": "Custom description"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity ordered"
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price"
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price"
          },
          "quantityFulfilled": {
            "type": "number",
            "description": "Quantity fulfilled"
          },
          "quantityShipped": {
            "type": "number",
            "description": "Quantity shipped"
          },
          "quantityDelivered": {
            "type": "number",
            "description": "Quantity delivered"
          },
          "quantityCancelled": {
            "type": "number",
            "description": "Quantity cancelled"
          },
          "requestedDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Requested delivery date"
          },
          "estimatedDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Estimated delivery date"
          },
          "itemNotes": {
            "type": "string",
            "description": "Item notes"
          },
          "productSnapshot": {
            "type": "object",
            "description": "Complete product data snapshot at time of order"
          },
          "variantSnapshot": {
            "type": "object",
            "description": "Complete variant data snapshot at time of order"
          },
          "snapshotCreatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the product snapshot was created"
          },
          "productName": {
            "type": "string",
            "description": "Product name at time of order (snapshot)"
          },
          "productSku": {
            "type": "string",
            "description": "Product SKU at time of order (snapshot)"
          },
          "productBrand": {
            "type": "string",
            "description": "Product brand at time of order (snapshot)"
          },
          "productCategory": {
            "type": "string",
            "description": "Product category at time of order (snapshot)"
          },
          "productImages": {
            "description": "Product images at time of order (snapshot)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "variantName": {
            "type": "string",
            "description": "Variant name at time of order (snapshot)"
          },
          "variantSku": {
            "type": "string",
            "description": "Variant SKU at time of order (snapshot)"
          },
          "variantAttributes": {
            "type": "object",
            "description": "Variant attributes at time of order (snapshot)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated date"
          }
        },
        "required": [
          "id",
          "quantity",
          "unitPrice",
          "totalPrice",
          "quantityFulfilled",
          "quantityShipped",
          "quantityDelivered",
          "quantityCancelled",
          "productName",
          "productSku",
          "createdAt",
          "updatedAt"
        ]
      },
      "OrderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID"
          },
          "orderNumber": {
            "type": "string",
            "description": "Order number"
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number"
          },
          "user": {
            "type": "object",
            "description": "User information"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          },
          "shippingAddress": {
            "type": "object",
            "description": "Shipping address"
          },
          "billingAddress": {
            "type": "object",
            "description": "Billing address"
          },
          "subtotal": {
            "type": "number",
            "description": "Order totals"
          },
          "taxAmount": {
            "type": "number",
            "description": "Tax amount"
          },
          "shippingAmount": {
            "type": "number",
            "description": "Shipping amount"
          },
          "discountAmount": {
            "type": "number",
            "description": "Discount amount"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "PROCESSING",
              "PARTIALLY_SHIPPED",
              "SHIPPED",
              "DELIVERED",
              "CANCELLED",
              "RETURNED",
              "REFUNDED"
            ]
          },
          "fulfillmentStatus": {
            "type": "string",
            "description": "Fulfillment status",
            "enum": [
              "PENDING",
              "ALLOCATED",
              "PICKING",
              "PICKED",
              "PACKING",
              "PACKED",
              "SHIPPED",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "PENDING",
              "AUTHORIZED",
              "CAPTURED",
              "FAILED",
              "REFUNDED",
              "CANCELLED"
            ]
          },
          "requestedDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Requested delivery date"
          },
          "estimatedDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Estimated delivery date"
          },
          "actualDeliveryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Actual delivery date"
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer notes"
          },
          "internalNotes": {
            "type": "string",
            "description": "Internal notes"
          },
          "specialInstructions": {
            "type": "string",
            "description": "Special instructions"
          },
          "rushOrder": {
            "type": "boolean",
            "description": "Rush order flag"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "CREDIT_CARD",
              "CORPORATE_ACCOUNT",
              "PURCHASE_ORDER",
              "ACH_TRANSFER",
              "NET_TERMS",
              "WIRE_TRANSFER"
            ]
          },
          "paymentReference": {
            "type": "string",
            "description": "Payment reference"
          },
          "creditTerms": {
            "type": "string",
            "description": "Credit terms"
          },
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemResponseDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated date"
          },
          "confirmedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Confirmed date"
          },
          "shippedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Shipped date"
          },
          "deliveredAt": {
            "format": "date-time",
            "type": "string",
            "description": "Delivered date"
          }
        },
        "required": [
          "id",
          "orderNumber",
          "user",
          "shippingAddress",
          "billingAddress",
          "subtotal",
          "taxAmount",
          "shippingAmount",
          "discountAmount",
          "totalAmount",
          "currency",
          "status",
          "fulfillmentStatus",
          "paymentStatus",
          "rushOrder",
          "paymentMethod",
          "items",
          "createdAt",
          "updatedAt"
        ]
      },
      "OrderListResponseDto": {
        "type": "object",
        "properties": {
          "orders": {
            "description": "Orders",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count of orders matching filter"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Items per page"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "orders",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Customer purchase order number",
            "example": "PO-2024-001-UPDATED"
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "PROCESSING",
              "PARTIALLY_SHIPPED",
              "SHIPPED",
              "DELIVERED",
              "CANCELLED",
              "RETURNED",
              "REFUNDED"
            ],
            "example": "CONFIRMED"
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "PENDING",
              "AUTHORIZED",
              "CAPTURED",
              "FAILED",
              "REFUNDED",
              "CANCELLED"
            ],
            "example": "CAPTURED"
          },
          "requestedDeliveryDate": {
            "type": "string",
            "description": "Requested delivery date",
            "example": "2024-08-20T00:00:00Z"
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer notes",
            "example": "Updated delivery instructions"
          },
          "internalNotes": {
            "type": "string",
            "description": "Internal notes",
            "example": "Customer contacted about delay"
          },
          "specialInstructions": {
            "type": "string",
            "description": "Special delivery instructions",
            "example": "Updated: Use loading dock entrance"
          },
          "paymentReference": {
            "type": "string",
            "description": "Payment reference",
            "example": "PAY-REF-12345"
          }
        }
      },
      "CreateFulfillmentItemDto": {
        "type": "object",
        "properties": {
          "orderItemId": {
            "type": "string",
            "description": "Order item ID",
            "example": "uuid-order-item-id"
          },
          "quantityAllocated": {
            "type": "number",
            "description": "Quantity to allocate for fulfillment",
            "example": 5,
            "minimum": 1
          },
          "inventoryItemId": {
            "type": "string",
            "description": "Specific inventory item ID to use",
            "example": "uuid-inventory-item-id"
          },
          "pickingNotes": {
            "type": "string",
            "description": "Picking notes for this item",
            "example": "Located in aisle A-5, shelf 3"
          }
        },
        "required": [
          "orderItemId",
          "quantityAllocated"
        ]
      },
      "CreateFulfillmentDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order ID to fulfill",
            "example": "uuid-order-id"
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse ID where fulfillment will occur",
            "example": "uuid-warehouse-id"
          },
          "priority": {
            "type": "string",
            "description": "Fulfillment priority",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT",
              "RUSH"
            ],
            "example": "NORMAL"
          },
          "scheduledAt": {
            "type": "string",
            "description": "Scheduled fulfillment date/time",
            "example": "2024-08-15T09:00:00Z"
          },
          "assignedTo": {
            "type": "string",
            "description": "User ID to assign for picking",
            "example": "uuid-user-id"
          },
          "pickingNotes": {
            "type": "string",
            "description": "Picking instructions/notes",
            "example": "Fragile items - handle with care"
          },
          "packingNotes": {
            "type": "string",
            "description": "Packing instructions/notes",
            "example": "Use bubble wrap for electronic components"
          },
          "items": {
            "description": "Fulfillment items to allocate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateFulfillmentItemDto"
            }
          }
        },
        "required": [
          "orderId",
          "warehouseId",
          "items"
        ]
      },
      "FulfillmentItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Fulfillment item ID"
          },
          "orderItem": {
            "type": "object",
            "description": "Order item information"
          },
          "quantityAllocated": {
            "type": "number",
            "description": "Quantity allocated"
          },
          "quantityPicked": {
            "type": "number",
            "description": "Quantity picked"
          },
          "quantityPacked": {
            "type": "number",
            "description": "Quantity packed"
          },
          "inventoryItem": {
            "type": "object",
            "description": "Inventory item used"
          },
          "status": {
            "type": "string",
            "description": "Item status",
            "enum": [
              "ALLOCATED",
              "PICKED",
              "PACKED",
              "SHIPPED",
              "CANCELLED"
            ]
          },
          "pickingNotes": {
            "type": "string",
            "description": "Picking notes"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated date"
          }
        },
        "required": [
          "id",
          "orderItem",
          "quantityAllocated",
          "quantityPicked",
          "quantityPacked",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "FulfillmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Fulfillment ID"
          },
          "fulfillmentNumber": {
            "type": "string",
            "description": "Fulfillment number"
          },
          "order": {
            "type": "object",
            "description": "Order information"
          },
          "warehouse": {
            "type": "object",
            "description": "Warehouse information"
          },
          "status": {
            "type": "string",
            "description": "Fulfillment status",
            "enum": [
              "PENDING",
              "ALLOCATED",
              "PICKING",
              "PICKED",
              "PACKING",
              "PACKED",
              "SHIPPED",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "priority": {
            "type": "string",
            "description": "Priority",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT",
              "RUSH"
            ]
          },
          "scheduledAt": {
            "format": "date-time",
            "type": "string",
            "description": "Scheduled date/time"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Started date/time"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Completed date/time"
          },
          "assignedUser": {
            "type": "object",
            "description": "Assigned user"
          },
          "pickingNotes": {
            "type": "string",
            "description": "Picking notes"
          },
          "packingNotes": {
            "type": "string",
            "description": "Packing notes"
          },
          "items": {
            "description": "Fulfillment items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentItemResponseDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated date"
          }
        },
        "required": [
          "id",
          "fulfillmentNumber",
          "order",
          "warehouse",
          "status",
          "priority",
          "items",
          "createdAt",
          "updatedAt"
        ]
      },
      "AssignFulfillmentDto": {
        "type": "object",
        "properties": {
          "assignedTo": {
            "type": "string",
            "description": "User ID to assign for picking",
            "example": "uuid-user-id"
          },
          "notes": {
            "type": "string",
            "description": "Assignment notes",
            "example": "Assigned to John - experienced with fragile items"
          }
        },
        "required": [
          "assignedTo"
        ]
      },
      "CreateShipmentItemDto": {
        "type": "object",
        "properties": {
          "orderItemId": {
            "type": "string",
            "description": "Order item ID",
            "example": "uuid-order-item-id"
          },
          "quantityShipped": {
            "type": "number",
            "description": "Quantity being shipped",
            "example": 5,
            "minimum": 1
          }
        },
        "required": [
          "orderItemId",
          "quantityShipped"
        ]
      },
      "CreateShipmentDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order ID for this shipment",
            "example": "uuid-order-id"
          },
          "fulfillmentId": {
            "type": "string",
            "description": "Fulfillment ID if shipment is from fulfillment",
            "example": "uuid-fulfillment-id"
          },
          "fromWarehouseId": {
            "type": "string",
            "description": "Warehouse ID where shipment originates",
            "example": "uuid-warehouse-id"
          },
          "carrierId": {
            "type": "string",
            "description": "Shipping carrier ID",
            "example": "uuid-carrier-id"
          },
          "shippingMethod": {
            "type": "string",
            "description": "Shipping method/service",
            "example": "Ground"
          },
          "shippingCost": {
            "type": "number",
            "description": "Shipping cost",
            "example": 15.99
          },
          "toAddress": {
            "type": "object",
            "description": "Shipping address as JSON object",
            "example": {
              "name": "Acme Corp Receiving",
              "contactName": "John Doe",
              "addressLine1": "123 Business Ave",
              "city": "New York",
              "state": "NY",
              "postalCode": "10001",
              "country": "US"
            }
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number",
            "example": "1Z12345E1234567890"
          },
          "estimatedDelivery": {
            "type": "string",
            "description": "Estimated delivery date",
            "example": "2024-08-18T17:00:00Z"
          },
          "weight": {
            "type": "number",
            "description": "Package weight in kg",
            "example": 2.5
          },
          "dimensions": {
            "type": "object",
            "description": "Package dimensions",
            "example": {
              "length": 30,
              "width": 20,
              "height": 15,
              "unit": "cm"
            }
          },
          "packageCount": {
            "type": "number",
            "description": "Number of packages",
            "example": 1,
            "minimum": 1
          },
          "items": {
            "description": "Items to include in this shipment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateShipmentItemDto"
            }
          }
        },
        "required": [
          "orderId",
          "fromWarehouseId",
          "shippingMethod",
          "shippingCost",
          "toAddress",
          "items"
        ]
      },
      "ShipmentItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shipment item ID"
          },
          "orderItem": {
            "type": "object",
            "description": "Order item information"
          },
          "quantityShipped": {
            "type": "number",
            "description": "Quantity shipped"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          }
        },
        "required": [
          "id",
          "orderItem",
          "quantityShipped",
          "createdAt"
        ]
      },
      "ShipmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shipment ID"
          },
          "shipmentNumber": {
            "type": "string",
            "description": "Shipment number"
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number"
          },
          "order": {
            "type": "object",
            "description": "Order information"
          },
          "fulfillment": {
            "type": "object",
            "description": "Fulfillment information"
          },
          "carrier": {
            "type": "object",
            "description": "Shipping carrier"
          },
          "shippingMethod": {
            "type": "string",
            "description": "Shipping method"
          },
          "shippingCost": {
            "type": "number",
            "description": "Shipping cost"
          },
          "fromWarehouse": {
            "type": "object",
            "description": "Origin warehouse"
          },
          "toAddress": {
            "type": "object",
            "description": "Destination address"
          },
          "status": {
            "type": "string",
            "description": "Shipment status",
            "enum": [
              "PREPARING",
              "READY",
              "SHIPPED",
              "IN_TRANSIT",
              "OUT_FOR_DELIVERY",
              "DELIVERED",
              "FAILED_DELIVERY",
              "RETURNED",
              "LOST"
            ]
          },
          "shippedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Shipped date"
          },
          "estimatedDelivery": {
            "format": "date-time",
            "type": "string",
            "description": "Estimated delivery date"
          },
          "actualDelivery": {
            "format": "date-time",
            "type": "string",
            "description": "Actual delivery date"
          },
          "weight": {
            "type": "number",
            "description": "Package weight"
          },
          "dimensions": {
            "type": "object",
            "description": "Package dimensions"
          },
          "packageCount": {
            "type": "number",
            "description": "Package count"
          },
          "trackingEvents": {
            "description": "Tracking events",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deliverySignature": {
            "type": "string",
            "description": "Delivery signature"
          },
          "deliveryPhoto": {
            "type": "string",
            "description": "Delivery photo URL"
          },
          "items": {
            "description": "Shipment items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentItemResponseDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated date"
          }
        },
        "required": [
          "id",
          "shipmentNumber",
          "order",
          "shippingMethod",
          "shippingCost",
          "fromWarehouse",
          "toAddress",
          "status",
          "packageCount",
          "trackingEvents",
          "items",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateInvoiceDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order ID to create invoice for",
            "example": "uuid-order-id"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID for B2B invoicing",
            "example": "uuid-company-id"
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal amount",
            "example": 999.99
          },
          "taxAmount": {
            "type": "number",
            "description": "Tax amount",
            "example": 79.99
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount",
            "example": 1079.98
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "issuedAt": {
            "type": "string",
            "description": "Issue date (defaults to now)",
            "example": "2024-08-15T00:00:00Z"
          },
          "dueAt": {
            "type": "string",
            "description": "Due date",
            "example": "2024-09-15T23:59:59Z"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method used",
            "enum": [
              "CREDIT_CARD",
              "CORPORATE_ACCOUNT",
              "PURCHASE_ORDER",
              "ACH_TRANSFER",
              "NET_TERMS",
              "WIRE_TRANSFER"
            ],
            "example": "CORPORATE_ACCOUNT"
          },
          "paymentReference": {
            "type": "string",
            "description": "Payment reference/transaction ID",
            "example": "TXN-12345678"
          }
        },
        "required": [
          "orderId",
          "subtotal",
          "taxAmount",
          "totalAmount"
        ]
      },
      "InvoiceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Invoice ID"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice number"
          },
          "order": {
            "type": "object",
            "description": "Order information"
          },
          "user": {
            "type": "object",
            "description": "Customer information"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal amount"
          },
          "taxAmount": {
            "type": "number",
            "description": "Tax amount"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "status": {
            "type": "string",
            "description": "Invoice status",
            "enum": [
              "DRAFT",
              "SENT",
              "PAID",
              "OVERDUE",
              "CANCELLED",
              "REFUNDED"
            ]
          },
          "issuedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Issue date"
          },
          "dueAt": {
            "format": "date-time",
            "type": "string",
            "description": "Due date"
          },
          "paidAt": {
            "format": "date-time",
            "type": "string",
            "description": "Paid date"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "CREDIT_CARD",
              "CORPORATE_ACCOUNT",
              "PURCHASE_ORDER",
              "ACH_TRANSFER",
              "NET_TERMS",
              "WIRE_TRANSFER"
            ]
          },
          "paymentReference": {
            "type": "string",
            "description": "Payment reference"
          },
          "pdfUrl": {
            "type": "string",
            "description": "PDF URL"
          },
          "isOverdue": {
            "type": "boolean",
            "description": "Is overdue"
          },
          "daysOverdue": {
            "type": "number",
            "description": "Days overdue (if applicable)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated date"
          }
        },
        "required": [
          "id",
          "invoiceNumber",
          "order",
          "user",
          "subtotal",
          "taxAmount",
          "totalAmount",
          "currency",
          "status",
          "isOverdue",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnalyticsOverviewDto": {
        "type": "object",
        "properties": {
          "totalRevenue": {
            "type": "number",
            "description": "Total revenue"
          },
          "revenueGrowth": {
            "type": "number",
            "description": "Revenue growth percentage"
          },
          "totalOrders": {
            "type": "number",
            "description": "Total orders"
          },
          "ordersGrowth": {
            "type": "number",
            "description": "Orders growth percentage"
          },
          "totalUsers": {
            "type": "number",
            "description": "Total users"
          },
          "usersGrowth": {
            "type": "number",
            "description": "Users growth percentage"
          },
          "averageOrderValue": {
            "type": "number",
            "description": "Average order value"
          },
          "aovGrowth": {
            "type": "number",
            "description": "AOV growth percentage"
          },
          "conversionRate": {
            "type": "number",
            "description": "Conversion rate"
          },
          "activeMerchants": {
            "type": "number",
            "description": "Active merchants"
          },
          "topProducts": {
            "description": "Top products by revenue",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "topMerchants": {
            "description": "Top merchants by revenue",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "revenueChart": {
            "description": "Revenue by time period",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ordersChart": {
            "description": "Orders by time period",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "totalRevenue",
          "revenueGrowth",
          "totalOrders",
          "ordersGrowth",
          "totalUsers",
          "usersGrowth",
          "averageOrderValue",
          "aovGrowth",
          "conversionRate",
          "activeMerchants",
          "topProducts",
          "topMerchants",
          "revenueChart",
          "ordersChart"
        ]
      },
      "CreateAnalyticsSessionDto": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          },
          "userAgent": {
            "type": "string",
            "description": "User agent"
          },
          "deviceType": {
            "type": "string",
            "description": "Device type"
          },
          "browserType": {
            "type": "string",
            "description": "Browser type"
          },
          "platform": {
            "type": "string",
            "description": "Platform"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "region": {
            "type": "string",
            "description": "Region"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "startTime": {
            "type": "string",
            "description": "Session start time"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID"
          }
        },
        "required": [
          "sessionId",
          "startTime"
        ]
      },
      "AnalyticsSessionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Session ID"
          },
          "sessionId": {
            "type": "string",
            "description": "Unique session identifier"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          },
          "userAgent": {
            "type": "string",
            "description": "User agent"
          },
          "deviceType": {
            "type": "string",
            "description": "Device type"
          },
          "browserType": {
            "type": "string",
            "description": "Browser type"
          },
          "platform": {
            "type": "string",
            "description": "Platform"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "region": {
            "type": "string",
            "description": "Region"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "startTime": {
            "format": "date-time",
            "type": "string",
            "description": "Session start time"
          },
          "endTime": {
            "format": "date-time",
            "type": "string",
            "description": "Session end time"
          },
          "duration": {
            "type": "number",
            "description": "Session duration in seconds"
          },
          "pageViews": {
            "type": "number",
            "description": "Page views count"
          },
          "eventCount": {
            "type": "number",
            "description": "Events count"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID"
          },
          "revenue": {
            "type": "number",
            "description": "Revenue generated"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "sessionId",
          "startTime",
          "pageViews",
          "eventCount",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateAnalyticsSessionDto": {
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "Session end time"
          },
          "duration": {
            "type": "number",
            "description": "Session duration in seconds"
          },
          "pageViews": {
            "type": "number",
            "description": "Page views count"
          },
          "eventCount": {
            "type": "number",
            "description": "Events count"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID if purchase made"
          },
          "revenue": {
            "type": "number",
            "description": "Revenue generated"
          }
        }
      },
      "CreateAnalyticsEventDto": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "eventType": {
            "type": "string",
            "description": "Event type"
          },
          "eventName": {
            "type": "string",
            "description": "Event name"
          },
          "category": {
            "type": "string",
            "description": "Event category"
          },
          "action": {
            "type": "string",
            "description": "Event action"
          },
          "label": {
            "type": "string",
            "description": "Event label"
          },
          "value": {
            "type": "number",
            "description": "Event value"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID"
          },
          "productId": {
            "type": "string",
            "description": "Product ID"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID"
          },
          "pageUrl": {
            "type": "string",
            "description": "Page URL"
          },
          "pageTitle": {
            "type": "string",
            "description": "Page title"
          },
          "referrer": {
            "type": "string",
            "description": "Referrer URL"
          },
          "properties": {
            "type": "object",
            "description": "Custom properties"
          },
          "timestamp": {
            "type": "string",
            "description": "Event timestamp"
          }
        },
        "required": [
          "sessionId",
          "eventType",
          "eventName"
        ]
      },
      "AnalyticsEventResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Event ID"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID"
          },
          "eventType": {
            "type": "string",
            "description": "Event type"
          },
          "eventName": {
            "type": "string",
            "description": "Event name"
          },
          "category": {
            "type": "string",
            "description": "Event category"
          },
          "action": {
            "type": "string",
            "description": "Event action"
          },
          "label": {
            "type": "string",
            "description": "Event label"
          },
          "value": {
            "type": "number",
            "description": "Event value"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID"
          },
          "productId": {
            "type": "string",
            "description": "Product ID"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID"
          },
          "pageUrl": {
            "type": "string",
            "description": "Page URL"
          },
          "pageTitle": {
            "type": "string",
            "description": "Page title"
          },
          "referrer": {
            "type": "string",
            "description": "Referrer URL"
          },
          "properties": {
            "type": "object",
            "description": "Custom properties"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Event timestamp"
          }
        },
        "required": [
          "id",
          "sessionId",
          "eventType",
          "eventName",
          "timestamp"
        ]
      },
      "BusinessMetricResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Metric ID"
          },
          "name": {
            "type": "string",
            "description": "Metric name"
          },
          "category": {
            "type": "string",
            "description": "Metric category"
          },
          "description": {
            "type": "string",
            "description": "Metric description"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date"
          },
          "granularity": {
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR"
            ],
            "description": "Time granularity"
          },
          "totalRevenue": {
            "type": "number",
            "description": "Total revenue"
          },
          "totalOrders": {
            "type": "number",
            "description": "Total orders"
          },
          "totalUsers": {
            "type": "number",
            "description": "Total users"
          },
          "activeUsers": {
            "type": "number",
            "description": "Active users"
          },
          "newUsers": {
            "type": "number",
            "description": "New users"
          },
          "averageOrderValue": {
            "type": "number",
            "description": "Average order value"
          },
          "conversionRate": {
            "type": "number",
            "description": "Conversion rate"
          },
          "customerLifetimeValue": {
            "type": "number",
            "description": "Customer lifetime value"
          },
          "activeMerchants": {
            "type": "number",
            "description": "Active merchants"
          },
          "newMerchants": {
            "type": "number",
            "description": "New merchants"
          },
          "merchantRevenue": {
            "type": "number",
            "description": "Merchant revenue"
          },
          "averageOrdersPerMerchant": {
            "type": "number",
            "description": "Average orders per merchant"
          },
          "totalProducts": {
            "type": "number",
            "description": "Total products"
          },
          "activeProducts": {
            "type": "number",
            "description": "Active products"
          },
          "productViews": {
            "type": "number",
            "description": "Product views"
          },
          "addToCartRate": {
            "type": "number",
            "description": "Add to cart rate"
          },
          "averageFulfillmentTime": {
            "type": "number",
            "description": "Average fulfillment time (hours)"
          },
          "shippingCost": {
            "type": "number",
            "description": "Shipping cost"
          },
          "returnRate": {
            "type": "number",
            "description": "Return rate"
          },
          "customerSatisfaction": {
            "type": "number",
            "description": "Customer satisfaction"
          },
          "customMetrics": {
            "type": "object",
            "description": "Custom metrics"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "category",
          "date",
          "granularity",
          "createdAt"
        ]
      },
      "CreateMetricDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Metric name"
          },
          "type": {
            "type": "string",
            "enum": [
              "SALES_REVENUE",
              "ORDER_COUNT",
              "USER_REGISTRATIONS",
              "PRODUCT_VIEWS",
              "SEARCH_QUERIES",
              "CONVERSION_RATE",
              "CART_ABANDONMENT",
              "MERCHANT_PERFORMANCE",
              "INVENTORY_TURNOVER",
              "CUSTOMER_LIFETIME_VALUE",
              "AVERAGE_ORDER_VALUE",
              "FULFILLMENT_TIME",
              "SHIPPING_COST",
              "REFUND_RATE",
              "CUSTOMER_SATISFACTION"
            ],
            "description": "Metric type"
          },
          "description": {
            "type": "string",
            "description": "Metric description"
          },
          "unit": {
            "type": "string",
            "description": "Metric unit (e.g., USD, count, percentage)"
          },
          "formula": {
            "type": "string",
            "description": "Calculation formula"
          },
          "dataSource": {
            "type": "string",
            "description": "Data source table/view"
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in minutes"
          },
          "category": {
            "type": "string",
            "description": "Metric category"
          },
          "tags": {
            "description": "Metric tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isRealTime": {
            "type": "boolean",
            "description": "Is real-time metric"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "MetricResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Metric ID"
          },
          "name": {
            "type": "string",
            "description": "Metric name"
          },
          "type": {
            "type": "string",
            "enum": [
              "SALES_REVENUE",
              "ORDER_COUNT",
              "USER_REGISTRATIONS",
              "PRODUCT_VIEWS",
              "SEARCH_QUERIES",
              "CONVERSION_RATE",
              "CART_ABANDONMENT",
              "MERCHANT_PERFORMANCE",
              "INVENTORY_TURNOVER",
              "CUSTOMER_LIFETIME_VALUE",
              "AVERAGE_ORDER_VALUE",
              "FULFILLMENT_TIME",
              "SHIPPING_COST",
              "REFUND_RATE",
              "CUSTOMER_SATISFACTION"
            ],
            "description": "Metric type"
          },
          "description": {
            "type": "string",
            "description": "Metric description"
          },
          "unit": {
            "type": "string",
            "description": "Metric unit"
          },
          "formula": {
            "type": "string",
            "description": "Calculation formula"
          },
          "dataSource": {
            "type": "string",
            "description": "Data source"
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in minutes"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is active"
          },
          "isRealTime": {
            "type": "boolean",
            "description": "Is real-time metric"
          },
          "category": {
            "type": "string",
            "description": "Metric category"
          },
          "tags": {
            "description": "Metric tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "isActive",
          "isRealTime",
          "tags",
          "createdAt",
          "updatedAt"
        ]
      },
      "MetricListResponseDto": {
        "type": "object",
        "properties": {
          "metrics": {
            "description": "List of metrics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Page size"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "metrics",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "UpdateMetricDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Metric name"
          },
          "description": {
            "type": "string",
            "description": "Metric description"
          },
          "unit": {
            "type": "string",
            "description": "Metric unit"
          },
          "formula": {
            "type": "string",
            "description": "Calculation formula"
          },
          "dataSource": {
            "type": "string",
            "description": "Data source"
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in minutes"
          },
          "category": {
            "type": "string",
            "description": "Metric category"
          },
          "tags": {
            "description": "Metric tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Is active"
          },
          "isRealTime": {
            "type": "boolean",
            "description": "Is real-time metric"
          }
        }
      },
      "Object": {
        "type": "object",
        "properties": {}
      },
      "DataPointResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Data point ID"
          },
          "metricId": {
            "type": "string",
            "description": "Metric ID"
          },
          "value": {
            "type": "number",
            "description": "Data point value"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp"
          },
          "granularity": {
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR"
            ],
            "description": "Time granularity"
          },
          "dimensions": {
            "type": "object",
            "description": "Dimensions"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID"
          },
          "productId": {
            "type": "string",
            "description": "Product ID"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "metricId",
          "value",
          "timestamp",
          "granularity",
          "createdAt"
        ]
      },
      "MetricDataQueryDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "format": "date-time",
            "type": "string",
            "description": "Start date"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "End date"
          },
          "granularity": {
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR"
            ],
            "description": "Data granularity"
          },
          "filters": {
            "type": "object",
            "description": "Filter dimensions"
          },
          "groupBy": {
            "description": "Group by dimensions",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "startDate",
          "endDate"
        ]
      },
      "MetricDataResponseDto": {
        "type": "object",
        "properties": {
          "metricId": {
            "type": "string",
            "description": "Metric ID"
          },
          "metricName": {
            "type": "string",
            "description": "Metric name"
          },
          "dataPoints": {
            "description": "Data points",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPointResponseDto"
            }
          },
          "query": {
            "description": "Query parameters",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricDataQueryDto"
              }
            ]
          },
          "totalPoints": {
            "type": "number",
            "description": "Total data points"
          }
        },
        "required": [
          "metricId",
          "metricName",
          "dataPoints",
          "query",
          "totalPoints"
        ]
      },
      "CreateDataPointDto": {
        "type": "object",
        "properties": {
          "metricId": {
            "type": "string",
            "description": "Metric ID"
          },
          "value": {
            "type": "number",
            "description": "Data point value"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp"
          },
          "granularity": {
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR"
            ],
            "description": "Time granularity"
          },
          "dimensions": {
            "type": "object",
            "description": "Dimensions for filtering/grouping"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID"
          },
          "productId": {
            "type": "string",
            "description": "Product ID"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID"
          }
        },
        "required": [
          "metricId",
          "value",
          "timestamp",
          "granularity"
        ]
      },
      "CreateDashboardDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Dashboard name"
          },
          "description": {
            "type": "string",
            "description": "Dashboard description"
          },
          "type": {
            "type": "string",
            "enum": [
              "EXECUTIVE",
              "SALES",
              "OPERATIONS",
              "MARKETING",
              "FINANCE",
              "MERCHANT",
              "CUSTOMER_SERVICE",
              "INVENTORY",
              "FULFILLMENT",
              "CUSTOM"
            ],
            "description": "Dashboard type"
          },
          "layout": {
            "type": "object",
            "description": "Widget layout configuration"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Is dashboard public"
          },
          "sharedWith": {
            "description": "User IDs with access",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedRoles": {
            "description": "Roles that can access dashboard",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in seconds"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "dateRange": {
            "type": "object",
            "description": "Default date range"
          },
          "autoRefresh": {
            "type": "boolean",
            "description": "Auto refresh enabled"
          },
          "tags": {
            "description": "Dashboard tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isTemplate": {
            "type": "boolean",
            "description": "Is template dashboard"
          },
          "templateSource": {
            "type": "string",
            "description": "Source template ID"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "DashboardResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Dashboard ID"
          },
          "name": {
            "type": "string",
            "description": "Dashboard name"
          },
          "description": {
            "type": "string",
            "description": "Dashboard description"
          },
          "type": {
            "type": "string",
            "enum": [
              "EXECUTIVE",
              "SALES",
              "OPERATIONS",
              "MARKETING",
              "FINANCE",
              "MERCHANT",
              "CUSTOMER_SERVICE",
              "INVENTORY",
              "FULFILLMENT",
              "CUSTOM"
            ],
            "description": "Dashboard type"
          },
          "layout": {
            "type": "object",
            "description": "Widget layout configuration"
          },
          "ownerId": {
            "type": "string",
            "description": "Owner ID"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Is dashboard public"
          },
          "sharedWith": {
            "description": "User IDs with access",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedRoles": {
            "description": "Roles that can access dashboard",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in seconds"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "dateRange": {
            "type": "object",
            "description": "Default date range"
          },
          "autoRefresh": {
            "type": "boolean",
            "description": "Auto refresh enabled"
          },
          "isTemplate": {
            "type": "boolean",
            "description": "Is template dashboard"
          },
          "templateSource": {
            "type": "string",
            "description": "Source template ID"
          },
          "tags": {
            "description": "Dashboard tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "widgetCount": {
            "type": "number",
            "description": "Widget count"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "layout",
          "ownerId",
          "isPublic",
          "sharedWith",
          "allowedRoles",
          "refreshRate",
          "autoRefresh",
          "isTemplate",
          "tags",
          "widgetCount",
          "createdAt",
          "updatedAt"
        ]
      },
      "DashboardListResponseDto": {
        "type": "object",
        "properties": {
          "dashboards": {
            "description": "List of dashboards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Page size"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "dashboards",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "WidgetResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Widget ID"
          },
          "dashboardId": {
            "type": "string",
            "description": "Dashboard ID"
          },
          "title": {
            "type": "string",
            "description": "Widget title"
          },
          "type": {
            "type": "string",
            "enum": [
              "LINE",
              "BAR",
              "PIE",
              "AREA",
              "SCATTER",
              "DONUT",
              "GAUGE",
              "HEATMAP",
              "FUNNEL",
              "TABLE"
            ],
            "description": "Chart type"
          },
          "description": {
            "type": "string",
            "description": "Widget description"
          },
          "position": {
            "type": "object",
            "description": "Widget position and size"
          },
          "order": {
            "type": "number",
            "description": "Widget order"
          },
          "metricId": {
            "type": "string",
            "description": "Metric ID"
          },
          "dataQuery": {
            "type": "object",
            "description": "Custom data query configuration"
          },
          "chartConfig": {
            "type": "object",
            "description": "Chart-specific configuration"
          },
          "filters": {
            "type": "object",
            "description": "Widget-specific filters"
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in seconds"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Is widget visible"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "dashboardId",
          "title",
          "type",
          "position",
          "order",
          "refreshRate",
          "isVisible",
          "createdAt",
          "updatedAt"
        ]
      },
      "DashboardWithWidgetsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Dashboard ID"
          },
          "name": {
            "type": "string",
            "description": "Dashboard name"
          },
          "description": {
            "type": "string",
            "description": "Dashboard description"
          },
          "type": {
            "type": "string",
            "enum": [
              "EXECUTIVE",
              "SALES",
              "OPERATIONS",
              "MARKETING",
              "FINANCE",
              "MERCHANT",
              "CUSTOMER_SERVICE",
              "INVENTORY",
              "FULFILLMENT",
              "CUSTOM"
            ],
            "description": "Dashboard type"
          },
          "layout": {
            "type": "object",
            "description": "Widget layout configuration"
          },
          "ownerId": {
            "type": "string",
            "description": "Owner ID"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Is dashboard public"
          },
          "sharedWith": {
            "description": "User IDs with access",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedRoles": {
            "description": "Roles that can access dashboard",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in seconds"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "dateRange": {
            "type": "object",
            "description": "Default date range"
          },
          "autoRefresh": {
            "type": "boolean",
            "description": "Auto refresh enabled"
          },
          "isTemplate": {
            "type": "boolean",
            "description": "Is template dashboard"
          },
          "templateSource": {
            "type": "string",
            "description": "Source template ID"
          },
          "tags": {
            "description": "Dashboard tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "widgetCount": {
            "type": "number",
            "description": "Widget count"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          },
          "widgets": {
            "description": "Dashboard widgets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetResponseDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "layout",
          "ownerId",
          "isPublic",
          "sharedWith",
          "allowedRoles",
          "refreshRate",
          "autoRefresh",
          "isTemplate",
          "tags",
          "widgetCount",
          "createdAt",
          "updatedAt",
          "widgets"
        ]
      },
      "UpdateDashboardDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Dashboard name"
          },
          "description": {
            "type": "string",
            "description": "Dashboard description"
          },
          "layout": {
            "type": "object",
            "description": "Widget layout configuration"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Is dashboard public"
          },
          "sharedWith": {
            "description": "User IDs with access",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedRoles": {
            "description": "Roles that can access dashboard",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in seconds"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "dateRange": {
            "type": "object",
            "description": "Default date range"
          },
          "autoRefresh": {
            "type": "boolean",
            "description": "Auto refresh enabled"
          },
          "tags": {
            "description": "Dashboard tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WidgetDataDto": {
        "type": "object",
        "properties": {
          "widgetId": {
            "type": "string",
            "description": "Widget ID"
          },
          "data": {
            "type": "object",
            "description": "Widget data"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Data timestamp"
          },
          "error": {
            "type": "string",
            "description": "Error message if data fetch failed"
          }
        },
        "required": [
          "widgetId",
          "data",
          "timestamp"
        ]
      },
      "CreateWidgetDto": {
        "type": "object",
        "properties": {
          "dashboardId": {
            "type": "string",
            "description": "Dashboard ID"
          },
          "title": {
            "type": "string",
            "description": "Widget title"
          },
          "type": {
            "type": "string",
            "enum": [
              "LINE",
              "BAR",
              "PIE",
              "AREA",
              "SCATTER",
              "DONUT",
              "GAUGE",
              "HEATMAP",
              "FUNNEL",
              "TABLE"
            ],
            "description": "Chart type"
          },
          "description": {
            "type": "string",
            "description": "Widget description"
          },
          "position": {
            "type": "object",
            "description": "Widget position and size"
          },
          "order": {
            "type": "number",
            "description": "Widget order"
          },
          "metricId": {
            "type": "string",
            "description": "Metric ID"
          },
          "dataQuery": {
            "type": "object",
            "description": "Custom data query configuration"
          },
          "chartConfig": {
            "type": "object",
            "description": "Chart-specific configuration"
          },
          "filters": {
            "type": "object",
            "description": "Widget-specific filters"
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in seconds"
          }
        },
        "required": [
          "dashboardId",
          "title",
          "type",
          "position"
        ]
      },
      "UpdateWidgetDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Widget title"
          },
          "description": {
            "type": "string",
            "description": "Widget description"
          },
          "position": {
            "type": "object",
            "description": "Widget position and size"
          },
          "order": {
            "type": "number",
            "description": "Widget order"
          },
          "metricId": {
            "type": "string",
            "description": "Metric ID"
          },
          "dataQuery": {
            "type": "object",
            "description": "Custom data query configuration"
          },
          "chartConfig": {
            "type": "object",
            "description": "Chart-specific configuration"
          },
          "filters": {
            "type": "object",
            "description": "Widget-specific filters"
          },
          "refreshRate": {
            "type": "number",
            "description": "Refresh rate in seconds"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Is widget visible"
          }
        }
      },
      "CreateReportDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report name"
          },
          "description": {
            "type": "string",
            "description": "Report description"
          },
          "type": {
            "type": "string",
            "enum": [
              "SALES_REPORT",
              "INVENTORY_REPORT",
              "CUSTOMER_REPORT",
              "MERCHANT_REPORT",
              "PRODUCT_PERFORMANCE",
              "FINANCIAL_REPORT",
              "OPERATIONAL_REPORT",
              "MARKETING_REPORT",
              "EXECUTIVE_SUMMARY",
              "CUSTOM_REPORT"
            ],
            "description": "Report type"
          },
          "format": {
            "type": "string",
            "enum": [
              "PDF",
              "CSV",
              "EXCEL",
              "JSON"
            ],
            "description": "Report format"
          },
          "parameters": {
            "type": "object",
            "description": "Report parameters/filters"
          },
          "template": {
            "type": "string",
            "description": "Report template ID"
          },
          "recipients": {
            "description": "Email recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metricIds": {
            "description": "Metric IDs to include",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "ReportResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Report ID"
          },
          "name": {
            "type": "string",
            "description": "Report name"
          },
          "description": {
            "type": "string",
            "description": "Report description"
          },
          "type": {
            "type": "string",
            "enum": [
              "SALES_REPORT",
              "INVENTORY_REPORT",
              "CUSTOMER_REPORT",
              "MERCHANT_REPORT",
              "PRODUCT_PERFORMANCE",
              "FINANCIAL_REPORT",
              "OPERATIONAL_REPORT",
              "MARKETING_REPORT",
              "EXECUTIVE_SUMMARY",
              "CUSTOM_REPORT"
            ],
            "description": "Report type"
          },
          "format": {
            "type": "string",
            "enum": [
              "PDF",
              "CSV",
              "EXCEL",
              "JSON"
            ],
            "description": "Report format"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ],
            "description": "Report status"
          },
          "parameters": {
            "type": "object",
            "description": "Report parameters/filters"
          },
          "template": {
            "type": "string",
            "description": "Report template ID"
          },
          "isScheduled": {
            "type": "boolean",
            "description": "Is scheduled report"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression for scheduling"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "createdBy": {
            "type": "string",
            "description": "Created by user ID"
          },
          "recipients": {
            "description": "Email recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileName": {
            "type": "string",
            "description": "Generated file name"
          },
          "fileSize": {
            "type": "number",
            "description": "File size in bytes"
          },
          "filePath": {
            "type": "string",
            "description": "File storage path"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Download URL"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Generation started at"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Generation completed at"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if failed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "format",
          "status",
          "isScheduled",
          "createdBy",
          "recipients",
          "createdAt",
          "updatedAt"
        ]
      },
      "ReportListResponseDto": {
        "type": "object",
        "properties": {
          "reports": {
            "description": "List of reports",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          },
          "page": {
            "type": "number",
            "description": "Current page"
          },
          "limit": {
            "type": "number",
            "description": "Page size"
          },
          "totalPages": {
            "type": "number",
            "description": "Total pages"
          }
        },
        "required": [
          "reports",
          "total",
          "page",
          "limit",
          "totalPages"
        ]
      },
      "UpdateReportDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report name"
          },
          "description": {
            "type": "string",
            "description": "Report description"
          },
          "format": {
            "type": "string",
            "enum": [
              "PDF",
              "CSV",
              "EXCEL",
              "JSON"
            ],
            "description": "Report format"
          },
          "parameters": {
            "type": "object",
            "description": "Report parameters/filters"
          },
          "template": {
            "type": "string",
            "description": "Report template ID"
          },
          "recipients": {
            "description": "Email recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GenerateReportDto": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "description": "Report ID"
          },
          "parameters": {
            "type": "object",
            "description": "Override parameters"
          },
          "additionalRecipients": {
            "description": "Send to additional recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "reportId"
        ]
      },
      "ReportGenerationResponseDto": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Generation job ID"
          },
          "reportId": {
            "type": "string",
            "description": "Report ID"
          },
          "estimatedCompletion": {
            "format": "date-time",
            "type": "string",
            "description": "Estimated completion time"
          },
          "statusUrl": {
            "type": "string",
            "description": "Status check URL"
          }
        },
        "required": [
          "jobId",
          "reportId",
          "estimatedCompletion",
          "statusUrl"
        ]
      },
      "CreateScheduleDto": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "description": "Report ID"
          },
          "name": {
            "type": "string",
            "description": "Schedule name"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "recipients": {
            "description": "Email recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "message": {
            "type": "string",
            "description": "Email message"
          }
        },
        "required": [
          "reportId",
          "name",
          "cronExpression",
          "recipients"
        ]
      },
      "ScheduleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Schedule ID"
          },
          "reportId": {
            "type": "string",
            "description": "Report ID"
          },
          "name": {
            "type": "string",
            "description": "Schedule name"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is active"
          },
          "recipients": {
            "description": "Email recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "message": {
            "type": "string",
            "description": "Email message"
          },
          "lastRun": {
            "format": "date-time",
            "type": "string",
            "description": "Last run timestamp"
          },
          "nextRun": {
            "format": "date-time",
            "type": "string",
            "description": "Next run timestamp"
          },
          "runCount": {
            "type": "number",
            "description": "Run count"
          },
          "failureCount": {
            "type": "number",
            "description": "Failure count"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp"
          }
        },
        "required": [
          "id",
          "reportId",
          "name",
          "cronExpression",
          "timezone",
          "isActive",
          "recipients",
          "runCount",
          "failureCount",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateScheduleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Schedule name"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is active"
          },
          "recipients": {
            "description": "Email recipients",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "message": {
            "type": "string",
            "description": "Email message"
          }
        }
      }
    }
  }
}